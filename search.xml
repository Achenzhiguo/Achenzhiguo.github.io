<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Typora使用技巧</title>
      <link href="/2022/05/19/typora-shi-yong-ji-qiao/"/>
      <url>/2022/05/19/typora-shi-yong-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h1><h2 id="一-Typora使用技巧"><a href="#一-Typora使用技巧" class="headerlink" title="一, Typora使用技巧"></a>一, Typora使用技巧</h2><h3 id="1-1快捷键的使用"><a href="#1-1快捷键的使用" class="headerlink" title="1.1快捷键的使用"></a>1.1快捷键的使用</h3><p><img src="https://s2.loli.net/2022/05/19/c48UeSa2YLn3rVZ.png" alt="image-20220519102031901"></p><p>点击自定义快捷键会进入到官网,进行查看已有的快捷键</p><p><img src="https://s2.loli.net/2022/05/19/su5YnjU3FSXzKcB.png" alt="image-20220519102301727"></p><h3 id="1-2主题更换"><a href="#1-2主题更换" class="headerlink" title="1.2主题更换"></a>1.2主题更换</h3><p>主题在哪里?</p><p><img src="https://s2.loli.net/2022/05/19/3LoVpA1SlMgsy2I.png" alt="image-20220519102423691"></p><p>主题从哪里获取</p><p><img src="https://s2.loli.net/2022/05/19/VS5LD1jMG6W47Rf.png" alt="image-20220519102731693"></p><p>主题如何安装?往哪安装</p><p>将获取的主题解压并复制到typora主题文件夹位置</p><p>快速找到该文件夹:见上图(4) , 直接点击即可定位</p><p>完成上述操作后 , 重启生效</p><h3 id="1-3图床的使用"><a href="#1-3图床的使用" class="headerlink" title="1.3图床的使用"></a>1.3图床的使用</h3><p>typora自带的图床使用 , 也可自己搭建图床（七牛云新用户免费10个G）</p><p><img src="https://s2.loli.net/2022/05/19/WCfARbQdJD86nta.png" alt="image-20220519103425237"></p><p>注意事项：</p><p>如图步骤3操作慢或者操作失败的情况 ： 科学上网即可</p><p>步骤4修改的配文件</p><ul><li>  sm.ms官网注册一个账号： 以获取属于自己的token 官网地址：<a href="https://sm.ms/">https://sm.ms/</a></li><li>  修改配置文件:</li><li>  可以直接测试或者重启测试效果</li></ul><pre><code>&#123;  &quot;picBed&quot;: &#123;    &quot;uploader&quot;: &quot;smms&quot;, // 代表当前的默认上传图床为 SM.MS,    &quot;smms&quot;: &#123;      &quot;token&quot;: &quot;&quot; // 从 https://sm.ms/home/apitoken 获取的 token    &#125;  &#125;,  &quot;picgoPlugins&quot;: &#123;&#125; // 为插件预留&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typora </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 工具 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitBook</title>
      <link href="/2022/05/14/gitbook/"/>
      <url>/2022/05/14/gitbook/</url>
      
        <content type="html"><![CDATA[<h1 id="GitBook"><a href="#GitBook" class="headerlink" title="GitBook"></a>GitBook</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近发现自己的命令行操作实在太差  甚至有的常用的命令都忘了  ,  本着练习命令的原则  ,  自己搭建了个人博客  ,算是熟悉了一波, 然后在浏览优秀博客时 , 有博主提到gitbook , 出于好奇,  简单了解了下 ,  个人感觉还不错, 加上自己在练习命令  , 果断搞一个 ,搭建的时候遇到了一些坑 , 有必要记录一下 , 就当是给博客在补充点内容</p><h2 id="GitBook简介"><a href="#GitBook简介" class="headerlink" title="GitBook简介"></a>GitBook简介</h2><p>GitBook 是一款现代化的文档平台，支持团队协作，可以在上面写产品文档、内部知识分享、接口文档等。GitBook 有网页版和本地版两种，网页版地址如下：<a href="https://link.zhihu.com/?target=https://www.gitbook.com/">https://www.gitbook.com/</a>，本地版地址如下：<a href="https://link.zhihu.com/?target=https://github.com/GitbookIO/gitbook">https://github.com/GitbookIO/gitbook</a>。</p><p>本地版是基于 Node.js 开发的，所以需要本地安装 Node.js 环境，(本地版现已停止维护了，而且本地版的大部分功能网页版都支持)，</p><p>网页版直接注册账号 , 按提示操作即可   没啥可说的   但是网页版本土访问是真的慢</p><p>GitBook 和 GitHub 是什么关系呢？这是两个相互独立的网站，但是你在 GitBook 上创建的文档可以同步到 GitHub 仓库，每次对文档的修改都会生成一个 commit，GitBook 会自动帮你提交到 GitHub，这样有助于追溯历史版本。而你往 GitHub 提交的内容也会自动同步到 GitBook。</p><p>以本地版为例</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>gitbook 是基于node.js 的</p><p>环境准备:  node.js  npm</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#确认是否安装成功</span>node -v<span class="token function">npm</span> -v</code></pre><p>安装gitbook  , 可npm包中找到 gitbook-cli</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#安装</span><span class="token function">npm</span> <span class="token function">install</span> -g gitbook-cli<span class="token comment" spellcheck="true">#安装完成后多一个gitbook命令</span><span class="token comment" spellcheck="true">#查看版本</span>gitbook -V  <span class="token comment" spellcheck="true">#(注意这里是大V   而不是小v)</span></code></pre><p>新建文件 夹 并初始化</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#新建</span><span class="token function">mkdir</span> mybook<span class="token comment" spellcheck="true">#进入</span><span class="token function">cd</span> mybook<span class="token comment" spellcheck="true">#初始化(初始化成功后生成两个文件readme.md和summary.md )</span>gitbook init</code></pre><p><strong>无坑可跳过以下</strong></p><h4 id="这里有个坑-执行gitbook-init报错"><a href="#这里有个坑-执行gitbook-init报错" class="headerlink" title="这里有个坑 执行gitbook init报错"></a>这里有个坑 执行gitbook init报错</h4><p>1,  安装速度卡顿问题解决</p><p>​        科学上网        </p><p>​        切换国内的淘宝镜像</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry<span class="token operator">=</span>http://registry.npm.taobao.org -g</code></pre><p>2,  node.js版本问题</p><blockquote><p>gitbook运行出错  ,  需要降低其版本,使用稳定版本</p><p>解决办法</p><p>​        a   卸载原有版本,,重装稳定版本</p><p>​        b   使用node.js 的版本管理器 nvm-windows   作用可以切换node.js版本</p><p>​                    nvm-windows下载地址:  github地址:  <a href="https://github.com/coreybutler/nvm-windows">https://github.com/coreybutler/nvm-windows</a>   </p><p>​                            选择nvm-setup.下载   直接安装  (这里顺便提一句   这种命令式的尽量装在C盘   否则后续出各种各样的小问题)</p><p>​                            如不能直接使用,,请自行配置环境变量</p><p>这里本着以后方便  我选了  b   下载nvm 并查阅相关命令</p><p>nvm命令下载和切换node.js版本</p><pre class=" language-bash"><code class="language-bash">nvm -v                    查看nvm版本信息：nvm <span class="token function">install</span> 10.22.0        安装多版本 node/npm（以v10.22.0为例）：nvm use 10.22.0            使用特定Node版本（以v10.22.0为例）：nvm <span class="token function">ls</span> available        查看远程服务器上的可用Node版本：nvm <span class="token function">ls</span>                    查看本机的可用Node版本</code></pre><p>注意命令是   nvm 而不是  mvn</p><pre class=" language-bash"><code class="language-bash">mvn是maven 的命令</code></pre><p>还没完  这里是nvm的坑</p><p>nvm切换node版本的坑</p><p>​    显示切换成功   但是node -v 后仍是原来的高版本  , 切换无效</p><pre class=" language-bash"><code class="language-bash">尝试解决1 尝试切换成功后 , 重启终端  ,仍无效2  查询资料  nvm的使用过是先卸载原有node 且卸载彻底 且重启 再安装 否则无效</code></pre><p>卸载原来的版本重启后  </p><p>nvm的坑到此结束</p></blockquote><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>初始化和启动</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#进入文件夹</span><span class="token function">cd</span> mybook<span class="token comment" spellcheck="true">#初始化</span><span class="token comment" spellcheck="true">#生成两个文件  readme.md相当于首页    summary.md章节</span>gitbook init<span class="token comment" spellcheck="true">#交给npm管理  (可选)</span><span class="token function">npm</span> init<span class="token comment" spellcheck="true">#启动(默认localhost:4000)  (生成book文件夹可根据自身需求修改配置文件)</span>gitbook serve<span class="token comment" spellcheck="true">#打包构建</span>gitbook build</code></pre><p>插件使用</p><p>用法：在book.json中添加<code>&quot;plugins&quot;</code>和<code>&quot;pluginConfig&quot;</code>字段。然后执行<code>gitbook install</code>，或者使用NPM安装<code>npm install gitbook-plugin-插件名</code>，也可以从源码GitHub地址中下载，放到<code>node_modules</code>文件夹里</p><p>常用插件</p><ol><li>代码可复制</li><li>高级搜索 </li><li>导航目录折叠</li><li>主题</li><li>回到顶部</li></ol><p>详细使用见  :  gitbook文档  (<a href="https://chrisniael.gitbooks.io/gitbook-documentation/content/index.html">介绍 | GitBook文档（中文版） (gitbooks.io)</a>) </p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>免费的 同博客   可以部署到gitee    github</p><p>也可以自己购买或租用服务器</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>近期命令:   git   node npm  cnpm  hexo  gitbook  nvm  win终端</li><li>凡是命令 , 操作大都雷同  ,任何一个命令,  只要彻底研究过一次,理清功能,作用, 细节, 然后丢一篇文档即可上手 , 当然想要脱离文档 , 重点还是多敲!  多敲!  多敲!   </li><li>无纸化办公的时代 , 免不了一些资料的记录 , 以后可以整理成电子书部署到网站上 , 也算是圆一圆小时候的出书梦</li></ol>]]></content>
      
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitbook </tag>
            
            <tag> 命令 </tag>
            
            <tag> 避坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20个linux常用命令</title>
      <link href="/2022/05/14/linux-ji-ben-ming-ling/"/>
      <url>/2022/05/14/linux-ji-ben-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="20个linux常用命令"><a href="#20个linux常用命令" class="headerlink" title="20个linux常用命令"></a>20个linux常用命令</h1><h2 id="1-ls：列出文件list"><a href="#1-ls：列出文件list" class="headerlink" title="1. ls：列出文件list"></a>1. ls：列出文件list</h2><p>List列出当前路径下的文件与文件夹。</p><blockquote><p>ls 常用参数：<br>-l：列出文件的详细信息<br>-a：all，列出所有文件，包括隐藏文件<br>注：参数可以叠加使用，如-la表示列出所有文件及其详细信息</p></blockquote><h2 id="2-cd：切换目录change-directory"><a href="#2-cd：切换目录change-directory" class="headerlink" title="2. cd：切换目录change directory"></a>2. cd：切换目录change directory</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## cd用法</span><span class="token function">cd</span> /home        <span class="token comment" spellcheck="true"># 切换/进入home目录</span><span class="token function">cd</span> <span class="token punctuation">..</span>            <span class="token comment" spellcheck="true"># 到上一目录（父目录）</span><span class="token function">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>        <span class="token comment" spellcheck="true"># 到父目录的父目录</span><span class="token function">cd</span> <span class="token keyword">.</span>            <span class="token comment" spellcheck="true"># 进入当前目录（其实啥都不做）</span>12345</code></pre><h2 id="3-cp：复制copy"><a href="#3-cp：复制copy" class="headerlink" title="3. cp：复制copy"></a>3. cp：复制copy</h2><blockquote><p>cp 常用参数：<br>-i：interactive mode，若有同名文件，会询问是否覆盖（如果没这个参数，会不提示，直接覆盖）<br>-r：recursive copy，复制文件夹时连同子文件（夹）一起复制，如果是对文件夹进行操作，一定要带这个参数</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## cp用法</span><span class="token function">cp</span> -ir sourceDir/ home/targetDir/    <span class="token comment" spellcheck="true"># 把当前路径下的sourceDir文件夹复制到home目录下，取名为targetDir，且带参数-i和-r</span>12</code></pre><h2 id="4-mv：移动move"><a href="#4-mv：移动move" class="headerlink" title="4. mv：移动move"></a>4. mv：移动move</h2><p>即剪切操作。源文件会被删除。</p><blockquote><p>mv 参数：<br>-i： interactive mode，同cp的-i参数，若覆盖会询问</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## mv用法</span><span class="token function">mv</span> -i sourceFile /home/targetFile    <span class="token comment" spellcheck="true"># 把当前目录下的sourceFile剪切到/home目录下并命名为targetFile</span>12</code></pre><h2 id="5-rm：移除，删除remove"><a href="#5-rm：移除，删除remove" class="headerlink" title="5. rm：移除，删除remove"></a>5. rm：移除，删除remove</h2><blockquote><p>rm 参数：<br>-i：interactive，同上，若覆盖，先询问<br>-r：recursive mode，删除所有子文件（夹）</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## rm用法</span><span class="token function">rm</span> Dir/    <span class="token comment" spellcheck="true"># 删除Dir文件夹（错误示例，会报错）</span><span class="token function">rm</span> -r Dir/    <span class="token comment" spellcheck="true"># 删除Dir文件夹（正确，对文件夹操作一定要带-r）</span>123</code></pre><h2 id="6-mkdir：创建文件夹make-directory"><a href="#6-mkdir：创建文件夹make-directory" class="headerlink" title="6. mkdir：创建文件夹make directory"></a>6. <a href="https://so.csdn.net/so/search?q=mkdir&spm=1001.2101.3001.7020">mkdir</a>：创建文件夹make directory</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## mkdir用法</span><span class="token function">mkdir</span> newDir/    <span class="token comment" spellcheck="true"># 在当前路径创建一个空文件夹newDir/</span>12</code></pre><h2 id="7-rmdir：移除，删除文件夹remove-directory"><a href="#7-rmdir：移除，删除文件夹remove-directory" class="headerlink" title="7. rmdir：移除，删除文件夹remove directory"></a>7. rmdir：移除，删除文件夹remove directory</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## rmdir用法</span><span class="token function">rmdir</span> oldDir/    <span class="token comment" spellcheck="true"># 在当前路径删除oldDir文件夹及其子文件（夹）</span>12</code></pre><h2 id="8-chown：更改所有者change-owner"><a href="#8-chown：更改所有者change-owner" class="headerlink" title="8. chown：更改所有者change owner"></a>8. chown：更改所有者change owner</h2><blockquote><p>chown 参数：<br>-R： 同-r，recursive</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## chown用法</span><span class="token function">chown</span> user -R myDir/    <span class="token comment" spellcheck="true"># 把文件夹myDir的所有者改成user</span>12</code></pre><h2 id="9-chmod：更改文件的权限模式change-mode"><a href="#9-chmod：更改文件的权限模式change-mode" class="headerlink" title="9. chmod：更改文件的权限模式change mode"></a>9. <a href="https://so.csdn.net/so/search?q=chmod&spm=1001.2101.3001.7020">chmod</a>：更改文件的权限模式change mode</h2><p>文件权限模式针对三类对象：当前用户user（这里也是文件的所有者），组group，其他用户other。<br>文件权限有读Read，写Write，执行Execute。</p><blockquote><p>chmod参数：<br>u: user，权限对象为当前用户（这里是所有者）<br>g：group，权限对象为所有者和组<br>o：other，权限对象为其他用户<br>r：read = 4，读权限<br>w：write = 2，写权限<br>e：execute = 1，执行权限<br>+：u/g/o与r/w/e组合使用，加入<br>-：删除<br>=：设置<br>4：仅读<br>5：仅读+执行<br>6：仅读+写<br>7：读+写+执行</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## chmod用法</span><span class="token function">chmod</span> 754 myDir/    <span class="token comment" spellcheck="true"># 当前用户（所有者）可读+写+执行，组group可读+执行，其他用户可读</span><span class="token function">chmod</span> g+w myDir/    <span class="token comment" spellcheck="true"># 为组group添加写write权限</span><span class="token function">chmod</span> -R 777 myDir/ <span class="token comment" spellcheck="true"># 给myDir/及其所有子目录添加所有权限</span><span class="token function">ls</span> -n <span class="token comment" spellcheck="true"># 可以查看当前目录下各子目录的文件权限</span>12345</code></pre><h2 id="10-find：查找"><a href="#10-find：查找" class="headerlink" title="10. find：查找"></a>10. find：查找</h2><blockquote><p>find 常用参数：<br>-name：根据文件名查找<br>-mtime n：n为数字，表示找出在n天前的当天被更改过的文件（0表示今天）<br>-mtime +n：查找在n天前（不包括n天当天）被改过的文件<br>-mtime -n：查找在n天之内（包括n天当天）被改过的文件<br>-size +/-：查找比XXsize大/小的文件</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## find用法</span><span class="token function">find</span> /home -name myFile        <span class="token comment" spellcheck="true"># 在/home目录下查找文件名为myFile的文件（注：myFile也可以搭配正则表达式使用）</span><span class="token function">find</span> /home -name *.txt        <span class="token comment" spellcheck="true"># 在/home目录下查找以txt为后缀的文件</span><span class="token function">find</span> /home -mtime 0            <span class="token comment" spellcheck="true"># 在/home目录下查找今天内被改过的文件</span><span class="token function">find</span> /home -mtime +1        <span class="token comment" spellcheck="true"># 在/home目录下查找昨天之前（不包括昨天）被改过的文件</span><span class="token function">find</span> /home -mtime -1        <span class="token comment" spellcheck="true"># 在/home目录下查找昨天至今（即昨天和今天）被改过的文件</span><span class="token function">find</span> /home -size +100M        <span class="token comment" spellcheck="true"># 在/home目录下查找大于100MB的文件，注意c表示byte</span>1234567</code></pre><h2 id="11-：管道"><a href="#11-：管道" class="headerlink" title="11. |：管道"></a>11. |：管道</h2><p>将前一个命令的输出结果像管道一样传递给后一个命令作为输入</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## 管道|用法</span><span class="token function">ls</span> <span class="token operator">|</span> <span class="token function">find</span> -name myFile    <span class="token comment" spellcheck="true"># 列出当前路径的文件（夹）并查找名字为“myFile”的，打印出来</span>12</code></pre><h2 id="12-grep：按行查找并匹配"><a href="#12-grep：按行查找并匹配" class="headerlink" title="12. grep：按行查找并匹配"></a>12. <a href="https://so.csdn.net/so/search?q=grep&spm=1001.2101.3001.7020">grep</a>：按行查找并匹配</h2><blockquote><p>grep参数：<br>-r：recursive，查找所有子文件（夹）<br>-n：number，显示行号<br>-w：word，完整匹配整个单词<br>-i：insensitive search，忽略大小写<br>-l：显示文件名称，而非匹配到的行的内容<br>-v：反向选择，显示出没匹配到的行的内容</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## grep用法</span><span class="token function">grep</span> -i mystring file.txt    <span class="token comment" spellcheck="true"># 忽略大小写，在file.txt中查找并打印出有“mystring”的行</span><span class="token function">ls</span> -l <span class="token operator">|</span> <span class="token function">grep</span> -i mystring    <span class="token comment" spellcheck="true"># 在ls -l的输出中把有“mystring”的行打印出来（忽略大小写）</span>123</code></pre><h2 id="13-tar：打包，压缩，解压"><a href="#13-tar：打包，压缩，解压" class="headerlink" title="13. tar：打包，压缩，解压"></a>13. tar：打包，压缩，解压</h2><blockquote><p>tar常用参数<br>-jcv：压缩<br>-jxv：解压</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## tar用法</span><span class="token function">tar</span> -jcv myDir/        <span class="token comment" spellcheck="true"># 压缩myDir文件夹</span><span class="token function">tar</span> -jxv DownloadDir.tar.gz myDir/    <span class="token comment" spellcheck="true"># 解压DownloadDir.tar.gz到当前文件夹下，并命令为myDir</span>123</code></pre><h2 id="14-cat：打印文件内容"><a href="#14-cat：打印文件内容" class="headerlink" title="14. cat：打印文件内容"></a>14. cat：打印文件内容</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## cat用法</span><span class="token function">cat</span> myFile    <span class="token comment" spellcheck="true"># 显示myFile</span>12</code></pre><h2 id="15-ps：查看进程process-select"><a href="#15-ps：查看进程process-select" class="headerlink" title="15. ps：查看进程process select"></a>15. ps：查看进程process select</h2><blockquote><p>ps 常用参数：<br>-A：显示所有进程<br>-a：不与terminal有关的所有进程<br>-u：有效用户的相关进程<br>-x：一般与-a一起用，列出完整的进程信息<br>-l：long，详细列出PID的信息</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## ps用法</span><span class="token function">ps</span> Aux     <span class="token comment" spellcheck="true"># 查看系统所有的进程数据</span><span class="token function">ps</span> ax    123</code></pre><h2 id="16-kill：杀死进程"><a href="#16-kill：杀死进程" class="headerlink" title="16. kill：杀死进程"></a>16. kill：杀死进程</h2><blockquote><p>kill常用参数：<br>-SIGHUP：启动被终止的进程<br>-SIGINT：相当于ctrl+c，中断进程<br>-SIGKILL：强制中断进程<br>-SIGTERM：以正常的结束进程方式来终止进程<br>-SIGSTOP：相当于ctrl+z，暂停进程</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## kill用法</span><span class="token function">kill</span> -SIGKILL 10876    <span class="token comment" spellcheck="true"># 强制中断PID=10876的进程（PID可以通过ps查到，有时可以加上| grep进行筛选）</span>12</code></pre><h2 id="17-passwd：修改密码password"><a href="#17-passwd：修改密码password" class="headerlink" title="17. passwd：修改密码password"></a>17. passwd：修改密码password</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## passwd用法</span><span class="token function">passwd</span>    <span class="token comment" spellcheck="true"># 修改当前用户的密码</span>12</code></pre><h2 id="18-pwd：显示工作目录print-work-directory"><a href="#18-pwd：显示工作目录print-work-directory" class="headerlink" title="18. pwd：显示工作目录print work directory"></a>18. pwd：显示工作目录print work directory</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># pwd用法</span><span class="token function">pwd</span>    <span class="token comment" spellcheck="true"># 显示当前路径的具体位置</span>12</code></pre><h2 id="19-tee：显示并保存"><a href="#19-tee：显示并保存" class="headerlink" title="19. tee：显示并保存"></a>19. tee：显示并保存</h2><p>显示内容并将内容保存在文件中。</p><pre class=" language-bash"><code class="language-bash">python3.6 test.py <span class="token operator">|</span> <span class="token function">tee</span> result.log    <span class="token comment" spellcheck="true"># 运行test.py文件，显示编译与运行结果并保存成result.log文件</span>1</code></pre><h2 id="20-reboot：重启"><a href="#20-reboot：重启" class="headerlink" title="20. reboot：重启"></a>20. reboot：重启</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## reboot用法</span><span class="token function">reboot</span>    <span class="token comment" spellcheck="true"># 输完立马重启（记得保存文件）</span>12</code></pre><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><ol><li>alias 设置别名</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">alias</span> cp<span class="token operator">=</span><span class="token string">'cp -i'</span>  <span class="token comment" spellcheck="true"># 输入cp默认调用cp -i</span><span class="token function">alias</span> rm<span class="token operator">=</span><span class="token string">'rm -i'</span><span class="token function">alias</span> mv<span class="token operator">=</span><span class="token string">'mv -i'</span>123</code></pre><ol><li>bg查看后端运行的进程 background</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">bg</span> <span class="token comment" spellcheck="true">#会显示后端进程的号码</span><span class="token function">kill</span> %1 <span class="token comment" spellcheck="true">#强制杀死1号进程</span>12</code></pre><ol><li>touch创建新文件</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">touch</span> new_file.txt <span class="token comment" spellcheck="true"># 创建一个new_file.txt文件</span>1</code></pre><ol><li>du -h 打印文件/文件夹的大小</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">du</span> -h <span class="token comment" spellcheck="true">#打印当前目录下所有子目录与子文件夹的大小</span><span class="token function">du</span> -h --max-depth<span class="token operator">=</span>0 <span class="token comment" spellcheck="true">#打印当前目录的大小</span><span class="token function">du</span> -h --max-depth<span class="token operator">=</span>1 <span class="token comment" spellcheck="true">#打印当前目录下所有子目录的大小 </span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 命令手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis框架</title>
      <link href="/2022/05/13/mybatis/"/>
      <url>/2022/05/13/mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis框架"><a href="#MyBatis框架" class="headerlink" title="MyBatis框架"></a>MyBatis框架</h1><h2 id="1-1为什么要学习框架"><a href="#1-1为什么要学习框架" class="headerlink" title="1.1为什么要学习框架"></a>1.1为什么要学习框架</h2><p>举例子：            如何制作一份看上去具有专业水准的PPT文档呢？</p><p>​                           一个简单的方法就是使用 Microsoft  Power Point 的模板功能。</p><p>​                           使用模板新建出来的文档已经有了一个PPT的”架子“，我们只需要把必要的信息像”做填空题“一样填写进去就可以了。</p><p>思考一下，使用ppt模板制作ppt有哪些好处呢？</p><p>​                            a.不用考虑布局，排版等问题，提高了效率</p><p>​                            b.可以专心于ppt的内容上，使ppt的质量更有保障</p><p>​                            c.新手也可以很快速的制作很专业的ppt</p><p>而使用框架来构建项目也是基于这样的考虑。当确定使用哪个技术框架后，就已经有了一个”半成品“，然后在这个半成品里填上内容，工作就完成了。这就是框架的优势：</p><p>​                            a.不用在考虑公共问题，框架都已经帮我们做好了</p><p>​                            b.可以专心于业务的实现，保证核心业务逻辑的开发质量</p><p>​                            c.结构统一，便于学习和维护</p><p>​                            d.框架中集成了前人的经验，可以帮助新手写出稳定，性能优良而且结构优美的高质量程序。</p><p>​                            e.缩短我们开发的时间与周期</p><h2 id="1-2框架的概念"><a href="#1-2框架的概念" class="headerlink" title="1.2框架的概念"></a>1.2框架的概念</h2><p>​          框架(Framework)是一个提供了可重用的公共结构的半成品。它为我们构建新的应用程序提供了极大的便利。一方面提供了可以拿来就用的工具，更重要的是，提供了可重用的设计。</p><p>​          框架的另一个层面的含义是：框架使混乱的东西变得结构化。莎士比亚说：”一千个人眼中有一千个哈姆雷特“。同样，如果没有框架的话，一千个人将写出一千种Servlet+JavaBean+JSP的代码。而框架保证了程序结构风格统一。从企业的角度来说，降低了培训成本和软件的维护成本。</p><p>​            框架像它的名字一样，是一个框，那框就是要有一些约束，所以在学习框架很多时候都需要按照人家规定好的步骤按部就班去操作；是一个架，是框架中包含了很多设计模式和基础功能，将应用程序支撑起来。</p><h2 id="1-3框架的使用场合"><a href="#1-3框架的使用场合" class="headerlink" title="1.3框架的使用场合"></a>1.3框架的使用场合</h2><p>但是框架也有它的弊端，不是任何时候都适合使用框架的。</p><p>框架的维护需要很大的人力，财力。如果不是特别大规模，特别复杂的项目，建议还是不要使用 框架。</p><p>那么今天我们就要学习一个框架MyBatis，那该框架是为了解决什么问题的呢？又有哪些强大的功能呢？那么我们一起来学习一下！</p><h1 id="2-MyBatis框架"><a href="#2-MyBatis框架" class="headerlink" title="2.MyBatis框架"></a>2.MyBatis框架</h1><h2 id="2-1-MyBatis框架简介"><a href="#2-1-MyBatis框架简介" class="headerlink" title="2.1.MyBatis框架简介"></a>2.1.MyBatis框架简介</h2><h3 id="2-1-1-Mybatis的基本信息"><a href="#2-1-1-Mybatis的基本信息" class="headerlink" title="2.1.1.Mybatis的基本信息"></a>2.1.1.Mybatis的基本信息</h3><p>MyBatis 本是<a href="https://baike.baidu.com/item/apache/6265">apache</a>的一个开源项目<a href="https://baike.baidu.com/item/iBatis">iBatis</a>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github。</p><p>当前，最新版本是MyBatis 3.5.5 ，其发布时间是2020年6月4日。</p><p>MyBatis是一个基于Java的数据持久层(ORM)框架。把实体类和SQL语句之间建立了映射关系，是一种半自动化的ORM实现。</p><pre><code>  补充：（1）ORM 对象关系映射，是一种数据持久化技术             O：Object   对象===java里的实体类（对象）           R：Relation 关系===关系型数据库（表）           M：Mapping  映射===提供一种机制，实现映射       （2）半自动化：需要写一些sql语句，才能完成 指定功能。           全自动化：不需要使用sql语句，直接操作实体类对象，就可以对应的操作数据库表里的数据。           有全自动为什么还需要半自动化？===多表查询的时候，分页查询的时候，全自动在进行修改的的时候反而很复杂</code></pre><p>MyBatis 支持定制化SQL，存储过程以及高级映射。</p><p>MyBatis 可以使用简单的XML或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录。</p><h3 id="2-1-2-MyBatis与传统JDBC比较"><a href="#2-1-2-MyBatis与传统JDBC比较" class="headerlink" title="2.1.2.MyBatis与传统JDBC比较"></a>2.1.2.MyBatis与传统JDBC比较</h3><p><strong>——-MyBatis避免了几乎所有的JDBC代码和手动设置参数以及获取结果集。</strong></p><p>​     A.传统JDBC实现根据用户名查询用户信息代码：</p><pre class=" language-java"><code class="language-java">Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">;</span>String user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>String password <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span>String sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM userinfo where username= ? "</span><span class="token punctuation">;</span>PreparedStatement statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>                statement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ResultSet rs <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                 rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> <img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Cimage-20200810152127748.png" alt="image-20200810152127748"></p><p> B. MyBatis配置文件实现根据用户名查询用户信息代码:</p><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Cimage-20200810152445228.png" alt="image-20200810152445228"></p><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Cimage-20200810152515136.png" alt="image-20200810152515136"></p><h3 id="2-1-3-MyBatis的优点"><a href="#2-1-3-MyBatis的优点" class="headerlink" title="2.1.3.MyBatis的优点"></a>2.1.3.MyBatis的优点</h3><p>A.简单易学</p><p>===MyBatis本身小巧简单，没有任何第三方依赖，易于学习，易于使用。</p><p>B.基于SQL语法，灵活</p><p>===MyBatis不会 对 应用程序或者数据库的现有设计强加任何影响。SQL写在xml里，便于统一管理和优化，通过SQL语句可以满足操作数据库的所有需求。</p><p>C.解除SQL与程序代码的耦合</p><p>===通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</p><p>D.提供映射标签，支持对象与数据库的orm字段关系映射</p><p>E.提供对象关系映射标签，支持对象关系组建维护</p><p>F.提供xml标签，支持编写动态sql</p><p>===如果您以前有使用JDBC，您就会明白把SQL语句条件连接在一起是多么的痛苦，要确保不能忘记空格或者不要在columns列后面省略一个逗号等。动态语句能够完全解决掉这些痛苦。</p><h1 id="3-MyBatis框架架构讲解"><a href="#3-MyBatis框架架构讲解" class="headerlink" title="3.MyBatis框架架构讲解"></a>3.MyBatis框架架构讲解</h1><h2 id="3-1回顾"><a href="#3-1回顾" class="headerlink" title="3.1回顾"></a>3.1回顾</h2><h3 id="3-1-1什么是MyBatis？"><a href="#3-1-1什么是MyBatis？" class="headerlink" title="3.1.1什么是MyBatis？"></a>3.1.1什么是MyBatis？</h3><p>​        mybatis是一个优秀的基于java的持久层框架，它内部封装了JDBC， 使开发者只需要关注SQL语句本身，而<br>不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。</p><p>​        mybatis通过xmI或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中sq|<br>的动态参数进行映射生成最终执行的sq|语句，最后由mybatis框架执行sq|并将结果映射为java对象并返回。</p><p>​      </p><h3 id="3-1-2为什么学习MyBatis？"><a href="#3-1-2为什么学习MyBatis？" class="headerlink" title="3.1.2为什么学习MyBatis？"></a>3.1.2为什么学习MyBatis？</h3><p>​         为了和数据库进行交互，通常的做法是将SQL语句写在Java代码中，SQL语句和Java代码耦合在一起不利于后期维护修改，而MyBatis能够帮助我们将SQL语句和Java代码分离，方便了后期因需求变动而对SQL语句进行修改。</p><p>​       采用ORM思想解决了实体对象和数据库映射的问题，对jdbc进行了封装，屏蔽了jdbc api 底层访问细节，使我<br>们不用与jdbc api打交道，就可以完成对数据库的持久化操作； 同时MyBatis封装了绝大部分JDBC中参数设置和返回值接收工作，我们不再需要编写大量臃肿代码。</p><h2 id="3-2MyBatis框架功能架构"><a href="#3-2MyBatis框架功能架构" class="headerlink" title="3.2MyBatis框架功能架构"></a>3.2MyBatis框架功能架构</h2><h3 id="3-2-1MyBatis架构图"><a href="#3-2-1MyBatis架构图" class="headerlink" title="3.2.1MyBatis架构图"></a>3.2.1MyBatis架构图</h3><p>​     <img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Cimage-20200811185305792.png" alt="image-20200811185305792"></p><p>详细说明：</p><p>MyBatis框架功能架构分为三层：</p><p>(1)API接口层：</p><p>　　首先接口层是我们打交道最多的。核心对象是SqlSession，它是上层应用和MyBatis打交道的桥梁，SqlSession 上定义了非常多的对数据库的操作方法。接口层在接收到调用请求的时候，会调用核心处理层的相应模块来完成具体的数据库操作。</p><p>(2)数据处理层/核心处理层：</p><p>​         跟数据库操作相关的动作都是在这一层完成的。核心处理层主要做了这几件事：</p><ol><li>把接口中传入的参数解析并且映射成JDBC 类型；</li><li>解析xml 文件中的SQL 语句，包括插入参数，和动态SQL 的生成；</li><li>执行SQL 语句；</li><li>处理结果集，并映射成Java 对象。</li></ol><p>(3)基础支撑层：</p><p>　    基础支持层主要是一些抽取出来的通用的功能（实现复用），比如数据源、缓存、日志、xml 解析、反射、IO、事务等等这些功能。</p><p>为上层的数据处理层提供最基础的支撑。</p><h3 id="3-2-2MyBatis核心类及工作流程"><a href="#3-2-2MyBatis核心类及工作流程" class="headerlink" title="3.2.2MyBatis核心类及工作流程"></a>3.2.2MyBatis核心类及工作流程</h3><h4 id="3-2-2-1Mybatis核心类"><a href="#3-2-2-1Mybatis核心类" class="headerlink" title="3.2.2.1Mybatis核心类"></a>3.2.2.1Mybatis核心类</h4><p> <strong>SqlSessionFactory：</strong>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为中心的。SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或通过Java的方式构建出 SqlSessionFactory 的实例。SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在。一个SqlSessionFactory对应配置文件中的一个环境（environment），如果你要使用多个数据库 就配置多个环境分别对应一个SqlSessionFactory。</p><p> <strong>SqlSession：</strong>SqlSession是一个接口，它有2个实现类，分别是DefaultSqlSession(默认使用)以及SqlSessionManager。SqlSession通过内部存放的执行器（Executor）来对数据进行CRUD。此外SqlSession不是线程安全的，因为每一次操作完数据库后都要调用close对其进行关闭，官方建议通过try-finally来保证总是关闭SqlSession。</p><p> <strong>Executor：</strong>Executor（执行器）接口有两个实现类，其中BaseExecutor有三个继承类分别是BatchExecutor（重用语句并执行批量更新），ReuseExecutor（重用预处理语句prepared statement，跟Simple的唯一区别就是内部缓存statement），SimpleExecutor（默认，每次都会创建新的statement）。以上三个就是主要的Executor。我们可以用CachingExecutor来装饰前面的三个执行器目的就是用来实现缓存。</p><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5C1.png" alt="1"></p><p> <strong>MappedStatement：</strong>MappedStatement就是用来存放我们SQL映射文件中的信息包括sql语句，输入参数，输出参数等等。一个SQL节点对应一个MappedStatement对象。</p><h4 id="3-2-2-2-MyBatis工作流程"><a href="#3-2-2-2-MyBatis工作流程" class="headerlink" title="3.2.2.2 MyBatis工作流程"></a>3.2.2.2 MyBatis工作流程</h4><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5C777.png" alt="777"></p><p>详细说明：</p><p>MyBatis工作流程具体如下：</p><p>我们再来说下MyBatis 的主要工作流程：<br>1.加载配置并初始化：<br>首先在MyBatis 启动的时候我们要去解析配置文件，包括全局配置文件和映射器配置文件，<br>全局配置文件里面包含了我们怎么控制MyBatis 的行为，我们会把它们解析成一个Configuration 对象。<br>映射器配置文件包含了我们要对数据库下达的指令，也就是我们的SQL 信息。然后一个SQL节点会被对应解析成一个MappedStatement对象存储在内存中。<br>接下来就是我们操作数据库的接口，它在应用程序和数据库中间，<br>代表我们跟数据库之间的一次连接：这个就是SqlSession 对象。<br>我们要获得一个SqlSession对象或者说是获得一次连接会话， 必须有一个会话工厂SqlSessionFactory 。<br>SqlSessionFactory 里面又必须包含我们的所有的配置信息，所以我们会通过一个FactoryBuilder 来创建工厂类。</p><p>2.接收调用的请求：<br>  接收SQL的ID 和传入的参数对象</p><p>3.处理操作请求：</p><pre><code>    A.根据SQL的ID查找对应的MappedStatement对象。        B.根据传入参数对象解析MappedStatement对象，得到最终要执行的SQL和执行传入参数。    C.获取数据库连接，根据得到的最终SQL语句和执行传入参数到数据库执行，并得到执行结果。    D.根据MappedStatement对象中的结果映射配置，对得到的执行结果进行转换处理，并得到最终的处理结果。    E.释放连接资源。</code></pre><p>4.返回最终的处理结果</p><p>​        我们知道MyBatis 是对JDBC 的封装，也就是意味着底层一定会出现JDBC 的一些核心对象，比如执行SQL 的Statement，结果集ResultSet。在Mybatis 里面，SqlSession 只是提供给应用一个接口，还不是SQL 的真正的执行对象。<br>其实SqlSession内部是持有了一个Executor 对象，用来封装对数据库的操作。在执行器Executor 执行query 或者update 操作的时候我们创建一系列的对象，来处理参数、执行SQL、处理结果集，这里我们把它简化成一个对象：StatementHandler,（但是Executor ,StatementHandler我们都操作不到，底层源码里可以看到）以上这些就是MyBatis 主要的工作流程。</p><h1 id="4-MyBatis环境搭建-入门程序"><a href="#4-MyBatis环境搭建-入门程序" class="headerlink" title="4.MyBatis环境搭建/入门程序"></a>4.MyBatis环境搭建/入门程序</h1><h2 id="A-项目结构"><a href="#A-项目结构" class="headerlink" title="A.项目结构"></a>A.项目结构</h2><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5C%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" alt="项目结构"></p><h2 id="B-添加项目依赖"><a href="#B-添加项目依赖" class="headerlink" title="B.添加项目依赖"></a>B.添加项目依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- mybatis核心包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- mysql驱动包 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- junit测试包 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 日志包，方便看sql语句 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>说明：</p><p>5.<build> 因为Maven默认只编译resource下面的文件 ，</p><p>​                    不会去编译java下面的xml 或者properties文件。</p><p>​                   所以会报错：文件找不到，那么为了解决这个问题 添加build标签</p><pre class=" language-xml"><code class="language-xml">【第一种方案：将mapper映射文件放在src/main/resource/同名文件夹下】【第二种方案：添加build，让mapper映射文件继续放在src/main/java/文件夹下 但是maven项目不推荐使用】<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><h2 id="C-创建SqlMapConfig-xml全局配置文件"><a href="#C-创建SqlMapConfig-xml全局配置文件" class="headerlink" title="C.创建SqlMapConfig.xml全局配置文件"></a>C.创建SqlMapConfig.xml全局配置文件</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置数据源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://127.0.0.1:3306/test<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 加载映射文件： --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/msb/pojo/DeptMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>说明：</p><p>====如何设置可以让idea平台直接创建核心配置文件 和 mapper映射文件？</p><p><a href="https://blog.csdn.net/weixin_40689822/article/details/81909380">https://blog.csdn.net/weixin_40689822/article/details/81909380</a>  该网址提供解决方案。</p><h2 id="D-创建实体类"><a href="#D-创建实体类" class="headerlink" title="D.创建实体类"></a>D.创建实体类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dept</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer deptno<span class="token punctuation">;</span>    <span class="token keyword">private</span> String dname<span class="token punctuation">;</span>    <span class="token keyword">private</span> String loc<span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getDeptno</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> deptno<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDeptno</span><span class="token punctuation">(</span>Integer deptno<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> deptno<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getDname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dname<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDname</span><span class="token punctuation">(</span>String dname<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dname <span class="token operator">=</span> dname<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> loc<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLoc</span><span class="token punctuation">(</span>String loc<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loc <span class="token operator">=</span> loc<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dept</span><span class="token punctuation">(</span>Integer deptno<span class="token punctuation">,</span> String dname<span class="token punctuation">,</span> String loc<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> deptno<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dname <span class="token operator">=</span> dname<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loc <span class="token operator">=</span> loc<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="E-创建mapper-xml映射文件"><a href="#E-创建mapper-xml映射文件" class="headerlink" title="E.创建mapper.xml映射文件"></a>E.创建mapper.xml映射文件</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.msb.pojo.Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addDept<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into Dept(dname) values(#<span class="token entity" title="&#123;">&amp;#123;</span>dname<span class="token entity" title="&#125;">&amp;#125;</span>)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectDept<span class="token punctuation">"</span></span>  <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.msb.pojo.Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         select * from dept    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h2 id="F-创建Junit测试类："><a href="#F-创建Junit测试类：" class="headerlink" title="F.创建Junit测试类："></a>F.创建Junit测试类：</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.加载配置文件</span>            InputStream is<span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.获得session对象，建立会话连接</span>            SqlSessionFactoryBuilder builder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SqlSessionFactory factory<span class="token operator">=</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>            SqlSession session<span class="token operator">=</span>factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//3.调用session方法，获得结果信息    </span>            List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> list<span class="token operator">=</span>session<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"selectDept"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>Dept d<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getDeptno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";"</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">getDname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";"</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">getLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//4.关闭session对象资源     </span>            session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>首先在SqlSessionFactoryBuilder的build（）方法中可以看到MyBatis内部定义了一个类XMLConfigBuilder用来解析配置文件mybatis-config.xml。针对配置文件中的每一个节点进行解析并将数据存放到Configuration这个对象中，紧接着使用带有Configuration的构造方法发返回一个DefautSqlSessionFactory。</p><h2 id="G-添加log4j-查看生成的sql语句"><a href="#G-添加log4j-查看生成的sql语句" class="headerlink" title="G.添加log4j 查看生成的sql语句"></a>G.添加log4j 查看生成的sql语句</h2><pre class=" language-java"><code class="language-java">DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token operator">-</span> Logging initialized using <span class="token string">'class org.apache.ibatis.logging.slf4j.Slf4jImpl'</span> adapter<span class="token punctuation">.</span>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token operator">-</span> PooledDataSource forcefully closed<span class="token operator">/</span>removed all connections<span class="token punctuation">.</span>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token operator">-</span> PooledDataSource forcefully closed<span class="token operator">/</span>removed all connections<span class="token punctuation">.</span>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token operator">-</span> PooledDataSource forcefully closed<span class="token operator">/</span>removed all connections<span class="token punctuation">.</span>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token operator">-</span> PooledDataSource forcefully closed<span class="token operator">/</span>removed all connections<span class="token punctuation">.</span>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token operator">-</span> Opening JDBC ConnectionDEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token operator">-</span> Created connection <span class="token number">1256728724</span><span class="token punctuation">.</span>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token operator">-</span> Setting autocommit to <span class="token boolean">false</span> on JDBC Connection <span class="token punctuation">[</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>JDBC4Connection<span class="token annotation punctuation">@4ae82894</span><span class="token punctuation">]</span>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token operator">==</span><span class="token operator">></span>  Preparing<span class="token operator">:</span> select <span class="token operator">*</span> from dept DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token operator">==</span><span class="token operator">></span> Parameters<span class="token operator">:</span> DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token operator">&lt;=</span><span class="token operator">=</span>      Total<span class="token operator">:</span> <span class="token number">3</span><span class="token number">10</span><span class="token punctuation">;</span>开发部<span class="token punctuation">;</span>沈阳<span class="token number">20</span><span class="token punctuation">;</span>实施部<span class="token punctuation">;</span>长春<span class="token number">30</span><span class="token punctuation">;</span>运维部<span class="token punctuation">;</span>北京DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token operator">-</span> Resetting autocommit to <span class="token boolean">true</span> on JDBC Connection <span class="token punctuation">[</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>JDBC4Connection<span class="token annotation punctuation">@4ae82894</span><span class="token punctuation">]</span>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token operator">-</span> Closing JDBC Connection <span class="token punctuation">[</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>JDBC4Connection<span class="token annotation punctuation">@4ae82894</span><span class="token punctuation">]</span>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token operator">-</span> Returned connection <span class="token number">1256728724</span> to pool<span class="token punctuation">.</span></code></pre><h1 id="5-MyBatis核心配置文件讲解"><a href="#5-MyBatis核心配置文件讲解" class="headerlink" title="5.MyBatis核心配置文件讲解"></a>5.MyBatis核心配置文件讲解</h1><p>​         MyBatis的核心配置文件包含了会深深影响MyBatis行为的设置和属性信息。</p><p>​        那MyBatis的核心配置文件到底长什么样子呢？我们借助核心配置文件的文档类型定义和中文帮助文档一起来学习一下。首先下载一份核心配置文件的文档类型定义，记事本打开，简单介绍一下。</p><p>​       然后我们结合着帮助文档一起来实际操作一下：</p><h2 id="5-1properties-属性"><a href="#5-1properties-属性" class="headerlink" title="5.1properties 属性"></a>5.1properties 属性</h2><h3 id="使用方式一："><a href="#使用方式一：" class="headerlink" title="使用方式一："></a>使用方式一：</h3><p>​    A.将数据源中四要素提取出来，成为全局变量</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://127.0.0.1:3306/test<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><p>​       B.  使用变量调用的方式 获得四要素的属性值            </p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;driver&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;username&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span></code></pre><h3 id="使用方式二：推荐使用"><a href="#使用方式二：推荐使用" class="headerlink" title="使用方式二：推荐使用"></a>使用方式二：推荐使用</h3><p>​              A：在src/main/resources/下创建一个属性文件，一般取名为jdbc.properties。然后在该属性文件中保存四要素信息</p><pre class=" language-xml"><code class="language-xml">        driver=com.mysql.jdbc.Driver        url=jdbc:mysql://127.0.0.1:3306/test1        username=root        password=root</code></pre><p>​              B：使用properties 标签加载属性文件</p><pre><code>    &lt;properties resource=&quot;jdbc.properties&quot;&gt;    &lt;/properties&gt;</code></pre><p>​            说明：</p><p>​            resource属性：常用 —-&gt; 指定配置文件的位置，是按照类路径的写法来写，并且必须存在于类路径下。</p><p>​            url属性： 按照统一资源标识符的写法来写地址</p><p>​          C：使用变量调用的方式 获得四要素的属性值</p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;driver&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;username&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span></code></pre><p>注意：</p><p>假设需要临时更改url访问路径，我们可以在 properties  标签中设置新的属性值，但是有一个问题要注意就是不能同名！</p><p>因为MyBatis加载属性的顺序是：A。先加载properties 元素内指定的属性。</p><p>​                                                         B。再加载properties元素中  resource属性值所对应的属性文件里的值，并覆盖之前读取的同名变量。</p><p>​                                                         C。最后读取作为方法参数传递的属性，并覆盖之前读取的同名变量。（稍后解释）</p><p>所以如果想通过修改properties 元素修改指定的属性值，需要设置不同的名字如url123，例子如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url123<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://127.0.0.1:3306/test123<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;driver&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;url123&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;username&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span></code></pre><h3 id="使用方式三：做为了解"><a href="#使用方式三：做为了解" class="headerlink" title="使用方式三：做为了解"></a>使用方式三：做为了解</h3><p>​        也可以在 SqlSessionFactoryBuilder.build() 方法中传入属性值  </p><p>​        A.多添加一个数据源环境：此时配置文件中，设置使用的数据源是id=“development”</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;driver&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;username&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;driver&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;username&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span></code></pre><p>​     B.编写代码：通过代码 动态设置使用development123 数据源环境。</p><pre class=" language-xml"><code class="language-xml">InputStream resource= Resources.getResourceAsStream("SqlMapConfig.xml");SqlSessionFactoryBuilder builder=new SqlSessionFactoryBuilder();SqlSessionFactory factory=builder.build(resource,"development123");</code></pre><h3 id="额外补充："><a href="#额外补充：" class="headerlink" title="额外补充："></a>额外补充：</h3><p>为四要素设置默认值，假设属性 ‘username’ 没有被配置，设置’username’ 属性的默认值为 ‘ut_user’ </p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.ibatis.parsing.PropertyParser.enable-default-value<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;driver&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;username:ut_user&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>  </code></pre><h2 id="5-2-settings设置"><a href="#5-2-settings设置" class="headerlink" title="5.2 settings设置"></a>5.2 settings设置</h2><p>MyBatis框架在运行时可以调整一些运行参数，比如：开启二级缓存，开启延迟加载等。</p><p>介绍几个后面会用到的属性：</p><p>cacheEnabled   ：开启二级缓存</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>lazyLoadingEnabled ：开启延迟加载/懒加载   “针对级联使用的”</p><pre><code>&lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</code></pre><p>aggressiveLazyLoading ：3.4.1（包含）前为true，之后为false。它是控制具有懒加载特性的对象的属性的加载情况的。</p><p>​            true表示如果对具有懒加载特性的对象的任意调用会导致这个对象的完整加载，false表示每种属性按照需要加载。       “属性”</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aggressiveLazyLoading<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h2 id="5-3-typeAliases-类型别名"><a href="#5-3-typeAliases-类型别名" class="headerlink" title="5.3 typeAliases 类型别名"></a>5.3 typeAliases 类型别名</h2><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。</p><p>举个例子：</p><p>在如下mapper映射文件中，resultType的值为全限定类名；</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAllDept<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.msb.pojo.Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     select * from dept<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>如果再有一个例子，根据主键查找该对象，resultType的值仍然为全限定类名；</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAllDept<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.msb.pojo.Dept<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     select * from dept where deptno=#<span class="token entity" title="&#123;">&amp;#123;</span>deptno<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>所以 ，为了降低冗余的全限定类名  进行如下配置，</p><h3 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h3><p>alias 别名；type类型；当这样设置完，dept可以用在任何使用com.msb.pojo.Dept的地方。一般多用于mapper.xml中。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.msb.pojo.Dept<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre><h3 id="方式二：推荐使用"><a href="#方式二：推荐使用" class="headerlink" title="方式二：推荐使用"></a>方式二：推荐使用</h3><p>也可以直接设置一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，那别名是什么呢？</p><p>如果实体类中没有设置@Alias(“author”) 该注解，那么该实体类的别名就是首字母小写的名字；</p><p>如果实体类中有@Alias(“author”) 该注解，那么该实体类的别名就是 注解中设置的名字。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.msb.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre><h2 id="5-4-typeHandlers类型处理器-了解"><a href="#5-4-typeHandlers类型处理器-了解" class="headerlink" title="5.4 typeHandlers类型处理器 (了解)"></a>5.4 typeHandlers类型处理器 (了解)</h2><p>​        MyBatis 在   设置预处理语句（PreparedStatement）中的参数     或从     结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式完成jdbc类型和java类型的转换。 从 3.4.5 开始，MyBatis 默认支持 JSR-310（日期和时间  API） 。 通常情况下，MyBatis提供的类型处理器满足日常的需求，不需要自定义。</p><h2 id="5-5-objectFactory-对象工厂-了解"><a href="#5-5-objectFactory-对象工厂-了解" class="headerlink" title="5.5 objectFactory 对象工厂(了解)"></a>5.5 objectFactory 对象工厂(了解)</h2><p>​        每次 MyBatis 创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成实例化工作。  默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认无参构造方法，要么通过存在的参数映射来调用带有参数的构造方法。  如果想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂来实现。   但是通常我们不进行自定义，直接使用MyBatis提供的对象工厂。</p><h2 id="5-6-plugins-插件-了解"><a href="#5-6-plugins-插件-了解" class="headerlink" title="5.6 plugins 插件(了解)"></a>5.6 plugins 插件(了解)</h2><p>MyBatis 允许你在映射语句执行过程中的某一点进行拦截调用。但很可能会破坏 MyBatis 的核心模块。 这些都是更底层的类和方法，所以使用插件的时候要特别当心。这可能会极大影响 MyBatis 的行为，务请慎之又慎。</p><h2 id="5-7-environments-环境配置"><a href="#5-7-environments-环境配置" class="headerlink" title="5.7 environments 环境配置"></a>5.7 environments 环境配置</h2><p>​        MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中。现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；<strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong>所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例。</p><p>​        那要如何创建两个SqlSessionFactory 实例？</p><p>为了指定创建哪种环境，只要将它作为可选的参数传递给 SqlSessionFactoryBuilder 即可。可以接受环境配置的两个方法名是： </p><pre class=" language-java"><code class="language-java">SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> environment<span class="token punctuation">)</span><span class="token punctuation">;</span>SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>reader：读取的全局XML配置文件的输入流，配置信息都在这个文件中；environment：指定的此SqlSessionFactory的数据库环境，默认为<span class="token keyword">default</span>；properties：设置一些动态化常量，会和XML中的properties 中常量合并在一起；</code></pre><p>​        </p><h3 id="5-7-1-environments-元素定义了如何配置环境。"><a href="#5-7-1-environments-元素定义了如何配置环境。" class="headerlink" title="5.7.1 environments 元素定义了如何配置环境。"></a>5.7.1 environments 元素定义了如何配置环境。</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;driver&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;username&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span></code></pre><p>注意几个关键点：</p><p>A.默认使用的环境 ID 叫development</p><p>B.每个 environment 元素都要定义一个环境 ID</p><p>===环境ID可以随意命名，但务必保证默认的环境 ID 要匹配其中一个。 </p><p>C.事务管理器的配置</p><p>​    在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）：</p><p>​    JDBC：这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域</p><p>   Manager：这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如Spring, JEE 应用服务器                        的上下文）。 </p><p>   <strong>然后和 Spring 整合后environments 配置将废除。</strong> </p><p>D.数据源的配置</p><p>有三种数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）：</p><p>​     UNPOOLED：如果将类型设置成UNPOOLED，mybaties会为每一个数据库操作创建一个新的连接，并关闭它。该方式适用于只有小规模数量并发用户的简单应用程序上。</p><p>​     POOLED：如果将属性设置成POOLED，mybaties会创建一个数据库连接池，连接池的一个连接将会被用作数据库操作。一旦数据库操作完成，mybaties会将此连接返回给连接池。在开发或测试环境中经常用到此方式。</p><p>​     JNDI：如果将类型设置成JNDI。mybaties会从在应用服务器向配置好的JNDI数据源DataSource获取数据库连接。</p><h1 id="5-8-mappers映射器"><a href="#5-8-mappers映射器" class="headerlink" title="5.8 mappers映射器"></a>5.8 mappers映射器</h1><p> MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。  在<strong>自动查找资源方面</strong>，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。  你可以使用<strong>相对于类路径的资源引用</strong>，或<strong>完全限定资源定位符</strong>（包括 <code>file:///</code> 形式的 URL），或<strong>类名和包名</strong>等。例如： </p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 使用相对于类路径的资源引用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org/mybatis/builder/AuthorMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org/mybatis/builder/BlogMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org/mybatis/builder/PostMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 使用完全限定资源定位符（URL） --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file:///var/mappers/AuthorMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file:///var/mappers/BlogMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file:///var/mappers/PostMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 使用映射器接口实现类的完全限定类名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.builder.AuthorMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.builder.BlogMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.builder.PostMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.builder<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span>===其中后两种方式 适合应用在mapper代理模式下！</code></pre><p>这些配置会告诉 MyBatis 去哪里找映射文件，剩下的细节就应该是每个 SQL 映射文件了，也就是接下来我们要讨论的。</p><h1 id="6-Mapper-xml映射文件讲解"><a href="#6-Mapper-xml映射文件讲解" class="headerlink" title="6.Mapper.xml映射文件讲解"></a>6.Mapper.xml映射文件讲解</h1><p>​        MyBatis 的真正强大在于它的语句映射，这是它的魔力所在。由于它的异常强大，映射器的 XML 文件就显得相对简单。如果拿它跟具有相同功能的 JDBC  代码进行对比，你会立即发现省掉了将近 95% 的代码。MyBatis 致力于减少使用成本，让用户能更专注于 SQL 代码。</p><p>​        那Mapper.xml映射文件到底长什么样子呢？我们借助Mapper.xml映射文件的文档类型定义和中文帮助文档一起来学习一下。首先下载一份核心配置文件的文档类型定义，记事本打开，简单介绍一下。</p><p>SQL 映射文件只有很少的几个顶级元素（按照应被定义的顺序列出）：</p><ul><li><code>cache</code> – 该命名空间的缓存配置。 <strong>—-缓存处理</strong></li><li><code>cache-ref</code> – 引用其它命名空间的缓存配置。 <strong>—–缓存处理</strong></li><li><code>resultMap</code> – 描述如何从数据库结果集中加载对象，是最复杂也是最强大的元素。 <strong>—-关联关系映射</strong></li><li><del><code>parameterMap</code> –  老式风格的参数映射。此元素已被废弃，并可能在将来被移除！请使用行内参数映射。文档中不会介绍此元素。</del> </li><li><code>sql</code> – 可被其它语句引用的可重用语句块。  <strong>—-动态sql语句</strong></li><li><code>insert</code> – 映射插入语句。 </li><li><code>update</code> – 映射更新语句。 </li><li><code>delete</code> – 映射删除语句。 </li><li><code>select</code> – 映射查询语句。 </li></ul><h2 id="6-1-select-查询"><a href="#6-1-select-查询" class="headerlink" title="6.1 select 查询"></a>6.1 select 查询</h2><p>查询语句是 MyBatis 中最常用的元素之一</p><p>一个简单查询的 select 元素是非常简单的。比如： </p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectDept<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM Dept WHERE deptno = #<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectDept<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM Dept WHERE dname = #<span class="token entity" title="&#123;">&amp;#123;</span>name<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectDept<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM Dept WHERE dname = $<span class="token entity" title="&#123;">&amp;#123;</span>name<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>===输出参数是  开发部     #<span class="token entity" title="&#123;">&amp;#123;</span> <span class="token entity" title="&#125;">&amp;#125;</span>-----“开发部”      $<span class="token entity" title="&#123;">&amp;#123;</span> <span class="token entity" title="&#125;">&amp;#125;</span>----- 开发部 or '1=1'   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectDept<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM Dept WHERE dname = #<span class="token entity" title="&#123;">&amp;#123;</span>dname<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Caaa.png" alt="aaa"></p><table><thead><tr><th><code>id</code></th><th>在命名空间中唯一的标识符，可以被用来引用这条语句。</th></tr></thead><tbody><tr><td><code>parameterType</code></td><td>将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis  可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td></tr><tr><td><del>parameterMap</del></td><td><del>用于引用外部 parameterMap 的属性，目前已被废弃。请使用行内参数映射和 parameterType 属性。</del></td></tr><tr><td><code>resultType</code></td><td>期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。 resultType 和  resultMap 之间只能同时使用一个。</td></tr><tr><td><code>resultMap</code></td><td>对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。  resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td><code>flushCache</code></td><td>将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：false。</td></tr><tr><td><code>useCache</code></td><td>将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true。</td></tr></tbody></table><p>然后我们来说一下sql语句中的<code>parameterType</code></p><p>1.parameterType后的类型可以是基本类型int,String,HashMap和java自定义类型。</p><p>2.占位符号和名字：</p><p> 【占位符号：】   </p><p>#{  }  ,  ${  } 区别在于 </p><p>​        #{}是预编译处理，$ {}是字符串替换。mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；  mybatis在处理 $ { } 时，就是把 ${ } 替换成变量的值。使用 #{} 可以有效的防止SQL注入，提高系统安全性。但是表名用参数传递进来的时候，只能使用 ${}</p><p>【名字】</p><p>​       如果是简单类型，参数名可以任意；</p><p>​      如果是pojo类型，参数名必须是pojo中的属性名。</p><h2 id="6-2-insert语句"><a href="#6-2-insert语句" class="headerlink" title="6.2 insert语句"></a>6.2 insert语句</h2><p>例子1：简单的添加语句</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertAuthor<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  insert into Author (id,username,password,email,bio)  values (#<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>username<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>password<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>email<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>bio<span class="token entity" title="&#125;">&amp;#125;</span>)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><table><thead><tr><th><code>id</code></th><th>在命名空间中唯一的标识符，可以被用来引用这条语句。</th></tr></thead><tbody><tr><td><code>parameterType</code></td><td>将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis  可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td></tr><tr><td><del><code>parameterMap</code></del></td><td><del>用于引用外部 parameterMap 的属性，目前已被废弃。请使用行内参数映射和 parameterType 属性。</del></td></tr><tr><td><code>flushCache</code></td><td>将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：（对 insert、update 和 delete 语句）true。</td></tr></tbody></table><p>例子2：主键自增语句</p><p>插入语句的配置规则更加丰富，在插入语句里面有一些额外的属性和子元素用来处理主键的生成，并且提供了多种生成方式。</p><p>首先，如果你的数据库支持自动生成主键的字段（比如 MySQL 和 SQL Server），那么你可以设置  useGeneratedKeys=”true”，然后再把 keyProperty 设置为目标属性就 OK 了。例如，如果上面的 Author 表已经在 id  列上使用了自动生成，那么语句可以修改为：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertAuthor<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>    <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  insert into Author (username,password,email,bio)  values (#<span class="token entity" title="&#123;">&amp;#123;</span>username<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>password<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>email<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>bio<span class="token entity" title="&#125;">&amp;#125;</span>)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span> public void insertuseGeneratedKeys()<span class="token entity" title="&#123;">&amp;#123;</span>        SqlSession session=factory.openSession();        Dept dept=new Dept();        dept.setDname("开发2组");        dept.setLoc("成都");        int i=session.insert("insertuseGeneratedKeys",dept);        //注意：session 进行手动提交        session.commit();        session.close();        System.out.println(i==1?"添加成功":"添加失败");    <span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h2 id="6-3-update，delete语句"><a href="#6-3-update，delete语句" class="headerlink" title="6.3 update，delete语句"></a>6.3 update，delete语句</h2><p>例子1：插入，删除语句</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>update id<span class="token operator">=</span><span class="token string">"updateAuthor"</span> parameterType<span class="token operator">=</span><span class="token string">"author"</span><span class="token operator">></span>  update Author set    username <span class="token operator">=</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>username<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    password <span class="token operator">=</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>password<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    email <span class="token operator">=</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>email<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    bio <span class="token operator">=</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>bio<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  where id <span class="token operator">=</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>id<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>update<span class="token operator">></span><span class="token operator">&lt;</span>delete id<span class="token operator">=</span><span class="token string">"deleteAuthor"</span> parameterType<span class="token operator">=</span><span class="token string">"int"</span><span class="token operator">></span>  delete from Author where id <span class="token operator">=</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>id<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>delete<span class="token operator">></span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SqlSession session<span class="token operator">=</span>factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Dept dept<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dept<span class="token punctuation">.</span><span class="token function">setDeptno</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dept<span class="token punctuation">.</span><span class="token function">setLoc</span><span class="token punctuation">(</span><span class="token string">"沈阳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"updDeptByid"</span><span class="token punctuation">,</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token string">"修改成功"</span><span class="token operator">:</span><span class="token string">"修改失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SqlSession session<span class="token operator">=</span>factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"delDeptByid"</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token string">"删除成功"</span><span class="token operator">:</span><span class="token string">"删除失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="7-MyBatis-Mapper代理开发Dao层"><a href="#7-MyBatis-Mapper代理开发Dao层" class="headerlink" title="7.MyBatis Mapper代理开发Dao层"></a>7.MyBatis Mapper代理开发Dao层</h1><h2 id="7-1-MyBatis-原始模式开发Dao层："><a href="#7-1-MyBatis-原始模式开发Dao层：" class="headerlink" title="7.1 MyBatis 原始模式开发Dao层："></a>7.1 MyBatis 原始模式开发Dao层：</h2><h3 id="A-创建Maven项目，添加jar包依赖"><a href="#A-创建Maven项目，添加jar包依赖" class="headerlink" title="A.创建Maven项目，添加jar包依赖"></a>A.创建Maven项目，添加jar包依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- mybatis核心包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- mysql驱动包 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- junit测试包 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 日志包，方便看sql语句 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h3 id="B-编写mybatis的核心配置文件：SqlMapConfig-xml"><a href="#B-编写mybatis的核心配置文件：SqlMapConfig-xml" class="headerlink" title="B.编写mybatis的核心配置文件：SqlMapConfig.xml"></a>B.编写mybatis的核心配置文件：SqlMapConfig.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 加载属性文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>config.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置数据源环境--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;driver&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;username&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置mapper映射文件地址 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/msb/dao/DeptDao.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h3 id="C-实体类：Dept"><a href="#C-实体类：Dept" class="headerlink" title="C.实体类：Dept"></a>C.实体类：Dept</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dept</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">private</span> Integer deptno<span class="token punctuation">;</span><span class="token keyword">private</span> String dname<span class="token punctuation">;</span><span class="token keyword">private</span> String loc<span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getDeptno</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> deptno<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDeptno</span><span class="token punctuation">(</span>Integer deptno<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> deptno<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getDname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dname<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDname</span><span class="token punctuation">(</span>String dname<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dname <span class="token operator">=</span> dname<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> loc<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLoc</span><span class="token punctuation">(</span>String loc<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loc <span class="token operator">=</span> loc<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dept</span><span class="token punctuation">(</span>Integer deptno<span class="token punctuation">,</span> String dname<span class="token punctuation">,</span> String loc<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> deptno<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dname <span class="token operator">=</span> dname<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loc <span class="token operator">=</span> loc<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="D-写接口："><a href="#D-写接口：" class="headerlink" title="D.写接口："></a>D.写接口：</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">selectDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>         Dept <span class="token function">selectDeptByid</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>         <span class="token keyword">int</span> <span class="token function">updateDept</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="E-写映射文件："><a href="#E-写映射文件：" class="headerlink" title="E.写映射文件："></a>E.写映射文件：</h3><p>​    在src/main/resources/下创建com.msb.dao包下创建DeptDao.xml映射文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.msb.dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAllDept<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         select * from dept    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectDeptById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from dept where deptno=#<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateDept<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update dept set dname=#<span class="token entity" title="&#123;">&amp;#123;</span>dname<span class="token entity" title="&#125;">&amp;#125;</span>,loc=#<span class="token entity" title="&#123;">&amp;#123;</span>loc<span class="token entity" title="&#125;">&amp;#125;</span> where deptno=#<span class="token entity" title="&#123;">&amp;#123;</span>deptno<span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h3 id="F-写接口的实现类："><a href="#F-写接口的实现类：" class="headerlink" title="F.写接口的实现类："></a>F.写接口的实现类：</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DeptDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> SqlSessionFactory sessionFactory<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DeptDaoImpl</span><span class="token punctuation">(</span>SqlSessionFactory sessionFactory<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sessionFactory<span class="token operator">=</span>sessionFactory<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">selectDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      SqlSession session<span class="token operator">=</span> sessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> list<span class="token operator">=</span>session<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"selectAllDept"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Dept <span class="token function">selectDeptByid</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SqlSession session<span class="token operator">=</span> sessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Dept dept<span class="token operator">=</span>session<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">"selectDeptById"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dept<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateDept</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SqlSession session<span class="token operator">=</span> sessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span>session<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"updateDept"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="G-编写测试类："><a href="#G-编写测试类：" class="headerlink" title="G.编写测试类："></a>G.编写测试类：</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 此方法是在执行testFindUserById之前执行</span><span class="token annotation punctuation">@Before</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建sqlSessionFactory</span>    <span class="token comment" spellcheck="true">// mybatis配置文件</span>    String resource <span class="token operator">=</span> <span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 得到配置文件流</span>    InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建会话工厂，传入mybatis的配置文件信息</span>    sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindUserById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建UserDao的对象</span>    DeptDao deptDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeptDaoImpl</span><span class="token punctuation">(</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用UserDao的方法</span>    Dept dept <span class="token operator">=</span> deptDao<span class="token punctuation">.</span><span class="token function">selectDeptByid</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dept<span class="token punctuation">.</span><span class="token function">getDeptno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";"</span><span class="token operator">+</span>dept<span class="token punctuation">.</span><span class="token function">getDname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";"</span><span class="token operator">+</span>dept<span class="token punctuation">.</span><span class="token function">getLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="总结-原始的Dao层开发的缺点："><a href="#总结-原始的Dao层开发的缺点：" class="headerlink" title="总结:原始的Dao层开发的缺点："></a>总结:原始的Dao层开发的缺点：</h3><pre><code>1.dao接口实现类方法中存在大量模板方法，设想能否将这些代码提取出来，大大减轻程序员的工作量。2.调用sqlsession的方法时 将statement的id硬编码了。3.调用sqlsession的方法时 传入的变量和接收的返回值使用了泛型，这样即使变量类型传入或者接收错误，在编译阶段也不报错，不利于程序员开发。</code></pre><h2 id="7-2-MyBatis-Mapper代理开发Dao层："><a href="#7-2-MyBatis-Mapper代理开发Dao层：" class="headerlink" title="7.2 MyBatis  Mapper代理开发Dao层："></a>7.2 MyBatis  Mapper代理开发Dao层：</h2><h3 id="7-2-1Mapper代理开发原因"><a href="#7-2-1Mapper代理开发原因" class="headerlink" title="7.2.1Mapper代理开发原因"></a>7.2.1Mapper代理开发原因</h3><p>​    1.程序员只需要写mapper接口和mapper.xml映射文件，MyBatis可以自动生成mapper接口实现类代理对象。</p><p>​    2.只不过程序员在编写mapper接口时 需要遵循一些开发规范：</p><pre class=" language-xml"><code class="language-xml">      1.mapper.java接口名 跟 mapper.xml映射文件名相同并且在同一个包下。      2.在mapper.xml映射文件中，namespace="mapper接口地址" --完全包名.mapper接口名。        3.mapper.java接口中的方法名和mapper.xml中statement的id值一致。      4.mapper.java接口中的方法输入参数类型 和 mapper.xml中statement的parameterType指定的类型一致      5.mapper.java接口中的方法返回值类型 和 mapper.xml中statement的resultType指定的类型一致      6.SqlMapConfig.xml 配置文件中 ---由于使用mapper代理方式，改为加载mapper接口！</code></pre><h3 id="7-2-2-Mapper代理开发过程"><a href="#7-2-2-Mapper代理开发过程" class="headerlink" title="7.2.2 Mapper代理开发过程"></a>7.2.2 Mapper代理开发过程</h3><h4 id="A-创建Maven项目，添加jar包依赖-1"><a href="#A-创建Maven项目，添加jar包依赖-1" class="headerlink" title="A.创建Maven项目，添加jar包依赖"></a>A.创建Maven项目，添加jar包依赖</h4><p>​     没改动</p><h4 id="B-编写mybatis的核心配置文件：SqlMapConfig-xml-1"><a href="#B-编写mybatis的核心配置文件：SqlMapConfig-xml-1" class="headerlink" title="B.编写mybatis的核心配置文件：SqlMapConfig.xml"></a>B.编写mybatis的核心配置文件：SqlMapConfig.xml</h4><p>​     有改动！</p><p>原来的样子：</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 配置mapper映射文件地址 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/msb/dao/DeptDao.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><p>现在的样子：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 使用映射器接口实现类的完全限定类名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.msb.mapper.DeptMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.msb.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><h4 id="C-实体类：Dept-1"><a href="#C-实体类：Dept-1" class="headerlink" title="C.实体类：Dept"></a>C.实体类：Dept</h4><p>​     没改动</p><h4 id="D-写接口：-1"><a href="#D-写接口：-1" class="headerlink" title="D.写接口："></a>D.写接口：</h4><p>​    有改动！</p><p>​    在src/main/java/下创建com.msb.mapper包下创建DeptMapper.java接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptMapper</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">selectDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    Dept <span class="token function">selectDeptByid</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">updateDept</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="E-写映射文件：-1"><a href="#E-写映射文件：-1" class="headerlink" title="E.写映射文件："></a>E.写映射文件：</h4><p>​      有改动！</p><p>​     在src/main/resources/下创建com.msb.mapper包下创建DeptMapper.xml映射文件</p><p>​    遵守如下规则：</p><pre><code>      1.在mapper.xml映射文件中，namespace=&quot;mapper接口地址&quot; --完全包名.mapper接口名。        2.mapper.java接口中的方法名和mapper.xml中statement的id值一致。      3.mapper.java接口中的方法输入参数类型 和 mapper.xml中statement的parameterType指定的类型一致      4.mapper.java接口中的方法返回值类型 和 mapper.xml中statement的resultType指定的类型一致</code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.msb.mapper.DeptMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectDept<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from dept    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectDeptByid<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from dept where deptno=#<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateDept<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update dept set dname=#<span class="token entity" title="&#123;">&amp;#123;</span>dname<span class="token entity" title="&#125;">&amp;#125;</span>,loc=#<span class="token entity" title="&#123;">&amp;#123;</span>loc<span class="token entity" title="&#125;">&amp;#125;</span> where deptno=#<span class="token entity" title="&#123;">&amp;#123;</span>deptno<span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h4 id="F-写接口的实现类：-1"><a href="#F-写接口的实现类：-1" class="headerlink" title="F.写接口的实现类："></a>F.写接口的实现类：</h4><p>​    不存在了！</p><h4 id="G-编写测试类：-1"><a href="#G-编写测试类：-1" class="headerlink" title="G.编写测试类："></a>G.编写测试类：</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 此方法是在执行testFindUserById之前执行</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建sqlSessionFactory</span>        <span class="token comment" spellcheck="true">// mybatis配置文件</span>        String resource <span class="token operator">=</span> <span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 得到配置文件流</span>        InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建会话工厂，传入mybatis的配置文件信息</span>        sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SqlSession session<span class="token operator">=</span>sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DeptMapper deptMapper<span class="token operator">=</span>session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>DeptMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Dept dept<span class="token operator">=</span>deptMapper<span class="token punctuation">.</span><span class="token function">selectDeptByid</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dept<span class="token punctuation">.</span><span class="token function">getDeptno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";"</span><span class="token operator">+</span>dept<span class="token punctuation">.</span><span class="token function">getDname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";"</span><span class="token operator">+</span>dept<span class="token punctuation">.</span><span class="token function">getLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="8-逆向工程"><a href="#8-逆向工程" class="headerlink" title="8.逆向工程"></a>8.逆向工程</h1><p>​          MyBatis的一个主要的特点就是需要程序员自己编写SQL，那么如果表太多的话，难免会很麻烦，所以MyBatis官方提供了一个逆向工程，可以针对单表自动生成MyBatis执行所需要的代码（包括mapper.xml，mapper.java，pojo）。一般在开发中，常用的逆向工程方式是通过数据库的表生成代码。</p><h2 id="8-1创建逆向工程-了解"><a href="#8-1创建逆向工程-了解" class="headerlink" title="8.1创建逆向工程(了解)"></a>8.1创建逆向工程(了解)</h2><p>A.新建一个maven  java工程</p><p>B.添加依赖jar 包</p><pre class=" language-xml"><code class="language-xml">     <span class="token comment" spellcheck="true">&lt;!-- mysql驱动包 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 日志包，方便查看执行信息--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 代码生成工具jar --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-generator-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>C.添加配置文件generatorConfig.xml</p><p>用于设置数据库驱动，配置，包名，文件保存位置，表名等</p><p>D.定义GeneratorSqlmap类，调用MyBatis自动创建接口，在main方法执行自动创建</p><p>说明：不需要同学们会编写，为大家准备好了一个逆向工程，同学们只需要会使用就可以。</p><h2 id="8-2使用逆向工程"><a href="#8-2使用逆向工程" class="headerlink" title="8.2使用逆向工程"></a>8.2使用逆向工程</h2><p>A.设置数据库驱动，url，用户名和密码</p><pre class=" language-xml"><code class="language-xml">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span>        <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://127.0.0.1:3306/test<span class="token punctuation">"</span></span>         <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>        <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">></span></span> </code></pre><p>B.设置生成的pojo的位置</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- targetProject:生成PO类的位置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.msb.pojo<span class="token punctuation">"</span></span>        <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.\src<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 从数据库返回的值被清理前后的空格 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>trimStrings<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaModelGenerator</span><span class="token punctuation">></span></span></code></pre><p>C.设置生成的Mapper映射文件的位置</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- targetProject:mapper映射文件生成的位置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.msb.mapper<span class="token punctuation">"</span></span>         <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.\src<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlMapGenerator</span><span class="token punctuation">></span></span></code></pre><p>D.设置生成的Mapper接口的位置</p><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!-- targetPackage：mapper接口生成的位置 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span>            <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.msb.mapper<span class="token punctuation">"</span></span>             <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.\src<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaClientGenerator</span><span class="token punctuation">></span></span></code></pre><p>E.根据数据库表生成pojo类</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- 指定数据库表 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span>     <span class="token attr-name">enableCountByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">enableUpdateByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">enableDeleteByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token attr-name">enableSelectByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">selectByExampleQueryId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columnOverride</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Integer<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>F.运行逆向工程，执行主方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeneratorSqlmap</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> warnings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> overwrite <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定 逆向工程配置文件</span>        File configFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\reverseEngineering\src\main\resources\generatorConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ConfigurationParser cp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationParser</span><span class="token punctuation">(</span>warnings<span class="token punctuation">)</span><span class="token punctuation">;</span>        Configuration config <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">parseConfiguration</span><span class="token punctuation">(</span>configFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        DefaultShellCallback callback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultShellCallback</span><span class="token punctuation">(</span>overwrite<span class="token punctuation">)</span><span class="token punctuation">;</span>        MyBatisGenerator myBatisGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBatisGenerator</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span>                callback<span class="token punctuation">,</span> warnings<span class="token punctuation">)</span><span class="token punctuation">;</span>        myBatisGenerator<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            GeneratorSqlmap generatorSqlmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeneratorSqlmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            generatorSqlmap<span class="token punctuation">.</span><span class="token function">generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>注意：</strong></p><p>1.使用逆向工程，右键运行GeneratorSqlmap类里的main方法。成功执行后，刷新项目会生成3个文件：Dept.java  DeptMapper.java  DeptMapper.xml  下图为运行成功后控制台显示的结果。</p><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Czzz.png" alt="zzz"></p><p>2.使用逆向工程过程中，如果出现了  “找不到程序包 和 符号” ，但是点击类名的时候，还可以点击进入。</p><p>​    idea 2020.1平台修改方法是，修改setting 里的本地仓库地址，改到c盘默认位置就可以了。</p><p>3.使用逆向工程过程中，如果显示generatorConfig.xml配置文件 找不到，可以改为写绝对路径，如下：</p><pre><code>&quot;E:\\reverseEngineering\\src\\main\\resources\\generatorConfig.xml&quot;</code></pre><h1 id="9-动态SQL"><a href="#9-动态SQL" class="headerlink" title="9.动态SQL"></a>9.动态SQL</h1><h2 id="9-1简介动态SQL"><a href="#9-1简介动态SQL" class="headerlink" title="9.1简介动态SQL"></a>9.1简介动态SQL</h2><p>​        动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL  语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p><p>​        通过MyBatis提供的各种标签对条件作出判断以实现动态拼接SQL语句。</p><h2 id="9-2使用动态SQL的原因"><a href="#9-2使用动态SQL的原因" class="headerlink" title="9.2使用动态SQL的原因"></a>9.2使用动态SQL的原因</h2><p>​        动态SQL主要用于解决查询条件不确定的情况：在程序运行期间，提供的查询条件不同，执行的SQL语句不同。若将每种可能的情况均逐一列出，就将出现大量的SQL语句。而动态SQL可以解决这个问题！</p><h2 id="9-3使用动态SQL"><a href="#9-3使用动态SQL" class="headerlink" title="9.3使用动态SQL"></a>9.3使用动态SQL</h2><h3 id="9-3-1-使用if标签-实现查询功能"><a href="#9-3-1-使用if标签-实现查询功能" class="headerlink" title="9.3.1 使用if标签-实现查询功能"></a>9.3.1 使用if标签-实现查询功能</h3><pre class=" language-xml"><code class="language-xml">例子1：模糊查询  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectempByinfo<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       select * from emp where sal>3500             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ename!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           and ename like '%$<span class="token entity" title="&#123;">&amp;#123;</span>ename<span class="token entity" title="&#125;">&amp;#125;</span>%'        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptno!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           and deptno=#<span class="token entity" title="&#123;">&amp;#123;</span>deptno<span class="token entity" title="&#125;">&amp;#125;</span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>   例子2：模糊查询   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectempByinfo<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       select * from emp where sal>3500             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ename!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          and ename like concat('%','$<span class="token entity" title="&#123;">&amp;#123;</span>ename<span class="token entity" title="&#125;">&amp;#125;</span>','%')        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptno!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           and deptno=#<span class="token entity" title="&#123;">&amp;#123;</span>deptno<span class="token entity" title="&#125;">&amp;#125;</span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    或者      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectempByinfo<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       select * from emp where sal>3500             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ename!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          and ename like concat('%',#<span class="token entity" title="&#123;">&amp;#123;</span>ename<span class="token entity" title="&#125;">&amp;#125;</span>,'%')        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptno!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           and deptno=#<span class="token entity" title="&#123;">&amp;#123;</span>deptno<span class="token entity" title="&#125;">&amp;#125;</span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  例子3：“CDATA 语法”   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectempByinfo<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       select * from emp where sal>3500            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sal!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           and sal <span class="token cdata">&lt;![CDATA[&lt;=]]></span>#<span class="token entity" title="&#123;">&amp;#123;</span>sal<span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptno!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           and deptno=#<span class="token entity" title="&#123;">&amp;#123;</span>deptno<span class="token entity" title="&#125;">&amp;#125;</span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="9-3-2-使用-if-where标签-实现查询功能"><a href="#9-3-2-使用-if-where标签-实现查询功能" class="headerlink" title="9.3.2 使用 if+where标签-实现查询功能"></a>9.3.2 使用 if+where标签-实现查询功能</h3><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectempByinfo<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       select * from emp          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ename!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           and ename like '%$<span class="token entity" title="&#123;">&amp;#123;</span>ename<span class="token entity" title="&#125;">&amp;#125;</span>%'        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sal!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           and sal <span class="token cdata">&lt;![CDATA[&lt;=]]></span>#<span class="token entity" title="&#123;">&amp;#123;</span>sal<span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptno!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           and deptno=#<span class="token entity" title="&#123;">&amp;#123;</span>deptno<span class="token entity" title="&#125;">&amp;#125;</span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p><strong>注意说明：</strong></p><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Cccc.png" alt="ccc"></p><h3 id="9-3-3-使用-choose-when-otherwise标签-实现查询功能"><a href="#9-3-3-使用-choose-when-otherwise标签-实现查询功能" class="headerlink" title="9.3.3 使用 choose+when+otherwise标签-实现查询功能"></a>9.3.3 使用 choose+when+otherwise标签-实现查询功能</h3><p>​        有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的  switch 语句。</p><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Cddd.png" alt="ddd"></p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectEmpByinfo<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from emp where        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sal !<span class="token punctuation">=</span>null <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                sal <span class="token cdata">&lt;![CDATA[ &lt;= ]]></span>#<span class="token entity" title="&#123;">&amp;#123;</span>sal<span class="token entity" title="&#125;">&amp;#125;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ename !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and ename like concat('%',#<span class="token entity" title="&#123;">&amp;#123;</span>ename<span class="token entity" title="&#125;">&amp;#125;</span>,'%')            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>                deptno=#<span class="token entity" title="&#123;">&amp;#123;</span>deptno<span class="token entity" title="&#125;">&amp;#125;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="9-3-4-使用-trim-if标签-实现添加功能"><a href="#9-3-4-使用-trim-if标签-实现添加功能" class="headerlink" title="9.3.4 使用 trim+if标签-实现添加功能"></a>9.3.4 使用 trim+if标签-实现添加功能</h3><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Ceee.png" alt="eee"></p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertEmp<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    insert into emp(列，列，列) values（值，值，值） --></span>       insert into emp       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">suffix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ename!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               ename,           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mgr!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               mgr,           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sal!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               sal,           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptno!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               deptno,           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span>       values       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> (<span class="token punctuation">"</span></span> <span class="token attr-name">suffix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ename!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               #<span class="token entity" title="&#123;">&amp;#123;</span>ename<span class="token entity" title="&#125;">&amp;#125;</span>,           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mgr!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               #<span class="token entity" title="&#123;">&amp;#123;</span>mgr<span class="token entity" title="&#125;">&amp;#125;</span>,           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sal!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               #<span class="token entity" title="&#123;">&amp;#123;</span>sal<span class="token entity" title="&#125;">&amp;#125;</span>,           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptno!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               #<span class="token entity" title="&#123;">&amp;#123;</span>deptno<span class="token entity" title="&#125;">&amp;#125;</span>,           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span> </code></pre><h3 id="9-3-5-使用-set-if-where标签-实现修改功能"><a href="#9-3-5-使用-set-if-where标签-实现修改功能" class="headerlink" title="9.3.5 使用 set+if+where标签-实现修改功能"></a>9.3.5 使用 set+if+where标签-实现修改功能</h3><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Cfff.png" alt="fff"></p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateEmp<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- update emp set 列1=值1，列2=值2，列3=值3 where 列1=值 and 列2=值2 --></span>           update emp        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ename!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              ename= #<span class="token entity" title="&#123;">&amp;#123;</span>ename<span class="token entity" title="&#125;">&amp;#125;</span>,           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mgr!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              mgr= #<span class="token entity" title="&#123;">&amp;#123;</span>mgr<span class="token entity" title="&#125;">&amp;#125;</span>,           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sal!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              sal= #<span class="token entity" title="&#123;">&amp;#123;</span>sal<span class="token entity" title="&#125;">&amp;#125;</span>,           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptno!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              deptno= #<span class="token entity" title="&#123;">&amp;#123;</span>deptno<span class="token entity" title="&#125;">&amp;#125;</span>,           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empno!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             and empno=#<span class="token entity" title="&#123;">&amp;#123;</span>empno<span class="token entity" title="&#125;">&amp;#125;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comm!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             and comm=#<span class="token entity" title="&#123;">&amp;#123;</span>comm<span class="token entity" title="&#125;">&amp;#125;</span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><h3 id="9-3-6-使用foreach标签-构建in条件"><a href="#9-3-6-使用foreach标签-构建in条件" class="headerlink" title="9.3.6 使用foreach标签-构建in条件"></a>9.3.6 使用foreach标签-构建in条件</h3><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Cggg.png" alt="ggg"></p><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Chhh.png" alt="hhh"></p><p>例子1：   select * from emp where   (empno=123 or empno=234 or empno=345)</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectEmpsByList"</span> parameterType<span class="token operator">=</span><span class="token string">"java.util.List"</span> resultType<span class="token operator">=</span><span class="token string">"emp"</span><span class="token operator">></span>              select <span class="token operator">*</span> from emp      <span class="token operator">&lt;</span>where<span class="token operator">></span>         <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">"list"</span> open<span class="token operator">=</span><span class="token string">"("</span> close<span class="token operator">=</span><span class="token string">")"</span> item<span class="token operator">=</span><span class="token string">"no"</span> separator<span class="token operator">=</span><span class="token string">"or"</span><span class="token operator">></span>               empno<span class="token operator">=</span>#<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>no<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>          <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testforeache1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SqlSession session<span class="token operator">=</span>factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EmpMapper empMapper<span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>EmpMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7369</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1213</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> emps<span class="token operator">=</span>empMapper<span class="token punctuation">.</span><span class="token function">selectEmpByempnos</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Emp e<span class="token operator">:</span>emps<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getEmpno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";"</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getEname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";"</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMgr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>例子2：  select * from emp where empno in(1,3,4,5,6)</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectEmpsByList<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.List<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              select * from emp        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>           empno           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in (<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               #<span class="token entity" title="&#123;">&amp;#123;</span>no<span class="token entity" title="&#125;">&amp;#125;</span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>例子3：参数换为int型数组</p><pre><code>&lt;select id=&quot;selectEmpsByList&quot; parameterType=&quot;java.util.List&quot;  resultType=&quot;emp&quot;&gt;           select * from emp        &lt;where&gt;           empno           &lt;foreach collection=&quot;array&quot; close=&quot;)&quot;  open=&quot;in (&quot; item=&quot;no&quot; separator=&quot;,&quot;&gt;               #&#123;no&#125;             &lt;/foreach&gt;        &lt;/where&gt;  &lt;/select&gt;</code></pre><p>例子4：参数换为Map集合</p><pre class=" language-xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectEmpsByList<span class="token punctuation">"</span></span>  <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         select * from emp      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>         empno          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nos<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span>  <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in (<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             #<span class="token entity" title="&#123;">&amp;#123;</span>no<span class="token entity" title="&#125;">&amp;#125;</span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>例子5：  查询 部门编号为10的，员工编号为 8901，8900，8899，8898  同时，名字里带A 的员工信息</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectEmpsByMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Map<span class="token punctuation">"</span></span>     <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        deptno=#<span class="token entity" title="&#123;">&amp;#123;</span>deptkey<span class="token entity" title="&#125;">&amp;#125;</span>                and          ename like '%$<span class="token entity" title="&#123;">&amp;#123;</span>enamekey<span class="token entity" title="&#125;">&amp;#125;</span>%'           and         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>listkey<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empno in(<span class="token punctuation">"</span></span>  <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            #<span class="token entity" title="&#123;">&amp;#123;</span>no<span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="9-3-7-使用SQL片段"><a href="#9-3-7-使用SQL片段" class="headerlink" title="9.3.7 使用SQL片段"></a>9.3.7 使用SQL片段</h3><p>在实际开发中，存在大量的重复的SQL代码，通过SQL代码片段，实现SQL代码重用。</p><pre class=" language-xml"><code class="language-xml">   <span class="token comment" spellcheck="true">&lt;!--  提取相同sql代码： --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       select * from emp   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectEmpsByList<span class="token punctuation">"</span></span>  <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>         empno          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nos<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span>  <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in (<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             #<span class="token entity" title="&#123;">&amp;#123;</span>no<span class="token entity" title="&#125;">&amp;#125;</span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="9-3-8-使用bind标签"><a href="#9-3-8-使用bind标签" class="headerlink" title="9.3.8 使用bind标签"></a>9.3.8 使用bind标签</h3><p><code>bind</code> 元素允许你在 OGNL 表达式以外创建一个变量，并将其绑定到当前的上下文。</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectEmpBysalename<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bind</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>%<span class="token punctuation">'</span> + ename + <span class="token punctuation">'</span>%<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        select * from emp        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sal !<span class="token punctuation">=</span>null <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and  sal <span class="token cdata">&lt;![CDATA[ &lt;= ]]></span>#<span class="token entity" title="&#123;">&amp;#123;</span>sal<span class="token entity" title="&#125;">&amp;#125;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ename !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and ename like #<span class="token entity" title="&#123;">&amp;#123;</span>name<span class="token entity" title="&#125;">&amp;#125;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h1 id="10-MyBatis查询"><a href="#10-MyBatis查询" class="headerlink" title="10.MyBatis查询"></a>10.MyBatis查询</h1><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Ciii.png" alt="iii"></p><h2 id="10-1一对一关联查询"><a href="#10-1一对一关联查询" class="headerlink" title="10.1一对一关联查询"></a>10.1一对一关联查询</h2><p>案例：查询所有员工信息 以及  员工所对应的部门信息</p><p>分析：</p><p>​        一个员工信息只会是属于一个部门下的，所以从查询员工信息出发关联查询部门信息为一对一查询。如果从部门信息出发查询员工信息则为一对多查询，因为一个部门可以有多个员工。</p><h3 id="10-1-1-解决方案一：使用resultType属性"><a href="#10-1-1-解决方案一：使用resultType属性" class="headerlink" title="10.1.1 解决方案一：使用resultType属性"></a>10.1.1 解决方案一：使用resultType属性</h3><p>实现步骤：</p><p>A.创建实体类：</p><pre><code>该类同时拥有 员工信息和部门信息</code></pre><p>B.创建mapper.java接口</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>EmpDept<span class="token operator">></span> <span class="token function">findEmpDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>C.创建mapper.xml映射文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findEmpDept<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empDept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select E.*,d.* from emp e,dept d where e.deptno=d.deptno<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>D.编写测试类</p><pre><code>正常写</code></pre><p>存在的问题：</p><p>浪费了两组pojo，mapper.xml，mapper.java，</p><p>多创建出一组pojo，mapper.xml，mapper.java</p><h3 id="10-1-2解决方案二：使用resultMap属性"><a href="#10-1-2解决方案二：使用resultMap属性" class="headerlink" title="10.1.2解决方案二：使用resultMap属性"></a>10.1.2解决方案二：使用resultMap属性</h3><p>实现步骤：</p><p>A.创建实体类：Dept  Emp</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dept</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> Integer deptno<span class="token punctuation">;</span>    <span class="token keyword">private</span> String dname<span class="token punctuation">;</span>    <span class="token keyword">private</span> String loc<span class="token punctuation">;</span>    <span class="token operator">==</span><span class="token operator">=</span>get、set、有参、无参，toString方法<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Emp</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer empno<span class="token punctuation">;</span>    <span class="token keyword">private</span> String ename<span class="token punctuation">;</span>    <span class="token keyword">private</span> String job<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer mgr<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date hiredate<span class="token punctuation">;</span>    <span class="token keyword">private</span> Double sal<span class="token punctuation">;</span>    <span class="token keyword">private</span> Double comm<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*  private Integer deptno;*/</span>        <span class="token keyword">private</span> Dept dept<span class="token punctuation">;</span>   <span class="token operator">==</span><span class="token operator">=</span>get、set、有参、无参，toString方法   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>B.创建EmpMapper.java接口</p><pre><code>List&lt;Emp&gt; findAll();</code></pre><p>C.创建EmpMapper.xml映射文件</p><pre><code> &lt;resultMap type=&quot;com.msb.pojo.Emp&quot; id=&quot;EmpAndDept&quot;&gt;       &lt;id column=&quot;empno&quot; property=&quot;empno&quot;/&gt;       &lt;result column=&quot;ename&quot; property=&quot;ename&quot;/&gt;        &lt;result column=&quot;mgr&quot; property=&quot;mgr&quot;/&gt;       &lt;result column=&quot;sal&quot; property=&quot;sal&quot;/&gt;       &lt;result column=&quot;hiredate&quot; property=&quot;hiredate&quot;/&gt;       &lt;association property=&quot;dept&quot; javaType=&quot;com.msb.pojo.Dept&quot;&gt;           &lt;id column=&quot;deptno&quot; property=&quot;deptno&quot;/&gt;           &lt;result column=&quot;dname&quot; property=&quot;dname&quot;/&gt;           &lt;result column=&quot;loc&quot; property=&quot;loc&quot;/&gt;       &lt;/association&gt;   &lt;/resultMap&gt;   &lt;select id=&quot;findAll&quot; resultMap=&quot;EmpAndDept&quot;&gt;         select e.empno,e.ename,e.mgr,e.sal,e.hiredate,d.deptno,d.dname,d.loc        from emp e  inner join dept d                     on e.deptno=d.deptno    &lt;/select&gt;</code></pre><p>D.创建测试类</p><pre><code>    @Test    public void test() &#123;      SqlSession session =factory.openSession();      EmpMapper empmapper= session.getMapper(EmpMapper.class);      List&lt;Emp&gt; list=empmapper.findAll();        for(Emp e:list)&#123;            System.out.println(e.getEmpno()+&quot;;&quot;+e.getEname()+&quot;;&quot;+                    e.getDept().getDname()+&quot;;&quot;+e.getDept().getLoc());        &#125;        session.close();    &#125;</code></pre><h2 id="10-2-一对多关联查询"><a href="#10-2-一对多关联查询" class="headerlink" title="10.2 一对多关联查询"></a>10.2 一对多关联查询</h2><p>案例：查询所有部门信息 以及 部门下的所有员工信息</p><p>分析：查询所有部门信息 以及 部门下的所有员工信息，部门信息 与 员工的信息是一对多的关系。</p><p>实现步骤：</p><p>A.创建实体类：Dept  Emp</p><pre><code>public class Dept  &#123;        private Integer deptno;    private String dname;    private String loc;        private List&lt;Emp&gt; emps;    ===get、set、有参、无参，toString方法&#125;</code></pre><pre><code>public class Emp &#123;    private Integer empno;    private String ename;    private String job;    private Integer mgr;    private Date hiredate;    private Double sal;    private Double comm;  /*  private Integer deptno;*/        private Dept dept;   ===get、set、有参、无参，toString方法   &#125;</code></pre><p>B.创建DeptMapper.java接口</p><pre><code>Dept findDeptByid(int deptno);</code></pre><p>C.创建DeptMapper.xml映射文件</p><pre><code> &lt;resultMap type=&quot;com.msb.pojo.Dept&quot; id=&quot;DeptAndEmps&quot;&gt;       &lt;id column=&quot;deptno&quot; property=&quot;deptno&quot;/&gt;       &lt;result column=&quot;dname&quot; property=&quot;dname&quot;/&gt;       &lt;result column=&quot;loc&quot; property=&quot;loc&quot;/&gt;       &lt;collection property=&quot;emps&quot; ofType=&quot;com.msb.pojo.Emp&quot;&gt;             &lt;id column=&quot;empno&quot; property=&quot;empno&quot;/&gt;             &lt;result column=&quot;ename&quot; property=&quot;ename&quot;/&gt;             &lt;result column=&quot;sal&quot; property=&quot;sal&quot;/&gt;       &lt;/collection&gt; &lt;/resultMap&gt; &lt;select id=&quot;findDeptByid&quot; parameterType=&quot;int&quot; resultMap=&quot;DeptAndEmps&quot;&gt;    select d.deptno,d.dname,d.loc,e.empno,e.ename,e.sal    from dept d inner join emp e on d.deptno=e.deptno    where d.deptno=#&#123;id&#125; &lt;/select&gt;</code></pre><p>D.创建测试类</p><pre><code>    @Test    public void test1()&#123;        SqlSession session =factory.openSession();        DeptMapper deptmapper= session.getMapper(DeptMapper.class);        Dept dept=deptmapper.findDeptByid(10);                System.out.println(&quot;部门信息：&quot;+dept.getLoc()+&quot;;&quot;+dept.getDname()+&quot;;&quot;+dept.getLoc());        System.out.println(&quot;部门里，所有员工的信息：&quot;);        for(Emp e:dept.getEmps())&#123;            System.out.println(e.getEname()+&quot;;&quot;+e.getEmpno()+&quot;;&quot;+e.getSal());        &#125;        session.close();    &#125;</code></pre><h2 id="10-3-多对多关联查询"><a href="#10-3-多对多关联查询" class="headerlink" title="10.3 多对多关联查询"></a>10.3 多对多关联查询</h2><p><strong>准备案例数据模型：</strong></p><p><strong>用户表：</strong></p><p>CREATE TABLE <code>users</code> (<br>  <code>uid</code> int(4) NOT NULL,<br>  <code>uname</code> varchar(20) DEFAULT NULL,<br>  <code>sex</code> varchar(3) DEFAULT NULL,<br>  <code>birthday</code> date DEFAULT NULL,<br>  <code>address</code> varchar(100) DEFAULT NULL,<br>  PRIMARY KEY (<code>uid</code>)<br>) </p><p>INSERT INTO <code>users</code> VALUES (‘1001’, ‘张三’, ‘男’, ‘2002-02-21’, ‘北京朝阳区’);<br>INSERT INTO <code>users</code> VALUES (‘1002’, ‘李四’, ‘女’, ‘2004-06-18’, ‘北京海淀区’);<br>INSERT INTO <code>users</code> VALUES (‘1003’, ‘王五’, ‘男’, ‘1999-02-04’, ‘北京昌平区’);</p><p><strong>订单表：</strong></p><p>CREATE TABLE <code>orders</code> (<br>  <code>oid</code> int(4) NOT NULL,<br>  <code>userid</code> int(4) DEFAULT NULL,<br>  <code>orderid</code> varchar(20) DEFAULT NULL,<br>  <code>createtime</code> date DEFAULT NULL,<br>  <code>status</code> varchar(10) DEFAULT NULL,<br>  PRIMARY KEY (<code>oid</code>)<br>) </p><p>INSERT INTO <code>orders</code> VALUES (‘1’, ‘1001’, ‘A3579SF001’, ‘2020-06-11’, ‘已签收’);<br>INSERT INTO <code>orders</code> VALUES (‘2’, ‘1001’, ‘C90373G002’, ‘2020-06-28’, ‘已签收’);<br>INSERT INTO <code>orders</code> VALUES (‘3’, ‘1002’, ‘S75375S003’, ‘2020-07-02’, ‘已签收’);<br>INSERT INTO <code>orders</code> VALUES (‘4’, ‘1003’, ‘K45772F004’, ‘2020-07-31’, ‘已签收’);</p><p><strong>订单详情表:</strong></p><p>CREATE TABLE <code>orderdetail</code> (<br>  <code>odid</code> int(4) NOT NULL,<br>  <code>orderid</code> varchar(20) DEFAULT NULL,<br>  <code>itemid</code> int(4) DEFAULT NULL,<br>  <code>itemnum</code> int(4) DEFAULT NULL,<br>  PRIMARY KEY (<code>odid</code>)<br>) </p><p>INSERT INTO <code>orderdetail</code> VALUES (‘1’, ‘K45772F004’, ‘1’, ‘3’);<br>INSERT INTO <code>orderdetail</code> VALUES (‘2’, ‘K45772F004’, ‘2’, ‘1’);<br>INSERT INTO <code>orderdetail</code> VALUES (‘3’, ‘S75375S003’, ‘1’, ‘1’);<br>INSERT INTO <code>orderdetail</code> VALUES (‘4’, ‘C90373G002’, ‘3’, ‘1’);<br>INSERT INTO <code>orderdetail</code> VALUES (‘5’, ‘C90373G002’, ‘4’, ‘2’);<br>INSERT INTO <code>orderdetail</code> VALUES (‘6’, ‘A3579SF001’, ‘1’, ‘1’);</p><p><strong>商品表：</strong></p><p>CREATE TABLE <code>items</code> (<br>  <code>iid</code> int(4) NOT NULL,<br>  <code>name</code> varchar(30) DEFAULT NULL,<br>  <code>detail</code> varchar(50) DEFAULT NULL,<br>  <code>price</code> double(5,2) DEFAULT NULL,<br>  PRIMARY KEY (<code>iid</code>)<br>)</p><p>INSERT INTO <code>items</code> VALUES (‘1’, ‘电饭锅’, ‘美的牌久用不坏电饭锅’, ‘390.00’);<br>INSERT INTO <code>items</code> VALUES (‘2’, ‘儿童座椅’, ‘长达5年实验’, ‘620.00’);<br>INSERT INTO <code>items</code> VALUES (‘3’, ‘冬季外套’, ‘户外专属外套’, ‘360.00’);<br>INSERT INTO <code>items</code> VALUES (‘4’, ‘卷发器’, ‘白色 塑料制品’, ‘5.30’);</p><p><strong>案例：</strong></p><p>所有用户的所有订单里的所有商品信息！</p><p><strong>分析：</strong></p><p>用户 1：n 订单  1 ：n  订单详情 1：1 商品   </p><p>用户  订单详情/商品</p><p>实现步骤：</p><p>A.创建实体类：Users  Orders  OrderDateil  Items</p><pre><code>public class Users &#123;    private Integer uid;    private String uname;    private String sex;    private Date birthday;    private String address;        private List&lt;Orders&gt; orders; &#125;  public class Orders &#123;    private Integer oid;    private Integer userid;    private String orderid;    private Date createtime;    private String status;        private List&lt;OrderDetail&gt; orderdetails; &#125; public class OrderDetail &#123;    private Integer odid;    private String ordersid;/*    private Integer itemsid;*/    private Integer itemsnum;        private Items item; &#125;public class Items &#123;    private Integer iid;    private String name;    private String detail;    private Double price;&#125;</code></pre><p>B.创建UserMapper .java接口</p><pre><code>List&lt;User&gt; findAllinfo();</code></pre><p>C.创建DeptMapper.xml映射文件</p><pre><code>  &lt;resultMap type=&quot;com.neuedu.bean.User&quot; id=&quot;usersAndOrdersAnddetailsAndItem&quot;&gt;     &lt;id column=&quot;uid&quot; property=&quot;uid&quot;/&gt;    &lt;result column=&quot;username&quot; property=&quot;uname&quot;/&gt;        &lt;collection property=&quot;orders&quot; ofType=&quot;com.neuedu.bean.Orders&quot;&gt;        &lt;id column=&quot;oid&quot; property=&quot;oid&quot;/&gt;        &lt;result column=&quot;orderId&quot; property=&quot;orderid&quot;/&gt;            &lt;collection property=&quot;orderdetails&quot; ofType=&quot;com.neuedu.bean.OrderDetail&quot;&gt;             &lt;id column=&quot;odid&quot; property=&quot;odid&quot;/&gt;            &lt;result column=&quot;itemsNum&quot; property=&quot;itemsnum&quot;/&gt;                        &lt;association property=&quot;item&quot; javaType=&quot;com.neuedu.bean.Items&quot;&gt;                &lt;id column=&quot;iid&quot; property=&quot;iid&quot;/&gt;                &lt;result column=&quot;name&quot; property=&quot;name&quot;/&gt;                &lt;result column=&quot;price&quot; property=&quot;price&quot;/&gt;                &lt;result column=&quot;detail&quot; property=&quot;detail&quot;/&gt;            &lt;/association&gt;        &lt;/collection&gt;    &lt;/collection&gt; &lt;/resultMap&gt; &lt;select id=&quot;findAllinfo&quot; resultMap=&quot;usersAndOrdersAnddetailsAndItem&quot;&gt;    select u.uid,u.uname,           o.oid,o.orderid,           od.odid,od.itemnum,           i.iid,i.name,i.price,i.detail   from  users u         inner join orders o            on u.uid=o.userId         inner join orderdetail od          on od.orderid=o.orderid         inner join items i          on i. iid=od.itemid &lt;/select&gt;</code></pre><p>D.创建测试类</p><pre><code>@Test    public void test() &#123;            SqlSession session=factory.openSession();        UserMapper usermapper=session.getMapper(UserMapper.class);        List&lt;User&gt; list=usermapper.findAllinfo();        for(User u:list)&#123;            System.out.println(&quot;用户信息：&quot;+u.getUname()+&quot;;&quot;+u.getUid()+&quot;\n&quot;);            for(Orders o:u.getOrders())&#123;                System.out.println(&quot;用户所下的订单信息：&quot;+o.getOid()+&quot;;&quot;+o.getOrderid()+&quot;\n&quot;);                for(OrderDetail od:o.getOrderdetails())&#123;                    System.out.println(&quot;订单详情：&quot;+od.getItemsnum()+&quot;;&quot;+od.getItem().getName()+&quot;;&quot;+od.getItem().getDetail());                                    &#125;            &#125;        &#125;        session.close();    &#125;</code></pre><h2 id="10-4分页查询"><a href="#10-4分页查询" class="headerlink" title="10.4分页查询"></a>10.4分页查询</h2><p> 案例：对用户表进行分页！</p><h3 id="10-4-1方案一：使用page工具类"><a href="#10-4-1方案一：使用page工具类" class="headerlink" title="10.4.1方案一：使用page工具类"></a>10.4.1方案一：使用page工具类</h3><h3 id="10-4-2方案二：使用RowBounds插件"><a href="#10-4-2方案二：使用RowBounds插件" class="headerlink" title="10.4.2方案二：使用RowBounds插件"></a>10.4.2方案二：使用RowBounds插件</h3><p>实现步骤：</p><p>A.创建实体类：</p><p>   没变化</p><p>B.创建UserMapper .java接口</p><pre><code>List&lt;User&gt; findall(RowBounds rb);</code></pre><p>C.创建UserMapper .xml映射文件</p><pre><code> &lt;select id=&quot;findall&quot; resultType=&quot;user&quot;&gt;     select * from user  &lt;/select&gt;</code></pre><p>D.创建测试类</p><pre><code>    @Test    public void  test1()&#123;                SqlSession session=factory.openSession();        UserMapper usermapper=session.getMapper(UserMapper.class);           RowBounds rb=new RowBounds(0, 2);        List&lt;User&gt; list=usermapper.findall( rb);        for(User u:list)&#123;            System.out.println(u.getUname()+&quot;;&quot;+u.getUid()+&quot;;&quot;+u.getBirthday());        &#125;            &#125;</code></pre><h1 id="11-延迟加载"><a href="#11-延迟加载" class="headerlink" title="11.延迟加载"></a>11.延迟加载</h1><h2 id="11-1延迟加载介绍"><a href="#11-1延迟加载介绍" class="headerlink" title="11.1延迟加载介绍"></a>11.1延迟加载介绍</h2><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Clll.png" alt="lll"></p><h2 id="11-2延迟加载配置"><a href="#11-2延迟加载配置" class="headerlink" title="11.2延迟加载配置"></a>11.2延迟加载配置</h2><p>A.MyBatis 默认没有开启延迟加载，需要在SqlMapConfig.xml中setting进行配置</p><p>B.lazyLoadingEnabled :true 使用延迟加载，false 禁用延迟加载，默认为false</p><p>C.aggressiveLazyLoading  :true启用时，当延迟加载开启时 访问对象中一个懒对象属性时，将完全加载这个对象的所有懒对象属性。false，当延迟加载时，按需加载对象属性。 （在 3.4.1 及之前的版本中默认为 true；之后版本默认为false） </p><settings><p>​            <!--打开延迟加载的开关  --></p><pre><code>      &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</code></pre><p>​            <!--将积极加载改为消极加载 即 按需加载 --></p><pre><code>     &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;true&quot;/&gt;</code></pre></settings><h2 id="11-3延迟加载代码实现"><a href="#11-3延迟加载代码实现" class="headerlink" title="11.3延迟加载代码实现"></a>11.3延迟加载代码实现</h2><h3 id="1-准备两个实体类"><a href="#1-准备两个实体类" class="headerlink" title="1.准备两个实体类"></a>1.准备两个实体类</h3><p>OrderDetail 订单详情   Items商品</p><pre><code>public class OrderDetail &#123;    private Integer odid;    private String orderid;/*  private Integer itemid;*/    private Integer itemnum;    private Items items; //订单详情  跟 商品是 1对1 关联关系 &#125;public class Items &#123;    private Integer iid;    private String name;    private String detail;    private Double price;&#125;</code></pre><h3 id="2-准备两个mapper接口"><a href="#2-准备两个mapper接口" class="headerlink" title="2.准备两个mapper接口"></a>2.准备两个mapper接口</h3><pre><code>public interface OrderDetailMapper &#123;    OrderDetail selectOrderDetailLazyLoad(int odid) throws  Exception;&#125;public interface ItemsMapper &#123;    Items selectByid(int iid) throws Exception;    &#125;</code></pre><h3 id="3-准备两个mapper映射文件"><a href="#3-准备两个mapper映射文件" class="headerlink" title="3.准备两个mapper映射文件"></a>3.准备两个mapper映射文件</h3><pre><code>&lt;mapper namespace=&quot;com.msb.mapper.OrderDetailMapper&quot; &gt;    &lt;resultMap id=&quot;OrderDetailItemLazyLoad&quot; type=&quot;orderDetail&quot;&gt;        &lt;id column=&quot;odid&quot; property=&quot;odid&quot;/&gt;        &lt;result column=&quot;orderid&quot; property=&quot;orderid&quot;/&gt;        &lt;result column=&quot;itemnum&quot; property=&quot;itemnum&quot;/&gt;        &lt;association property=&quot;items&quot;                      javaType=&quot;items&quot;                     select=&quot;com.msb.mapper.ItemsMapper.selectByid&quot;                      column=&quot;itemid&quot;/&gt;    &lt;/resultMap&gt;    &lt;select id=&quot;selectOrderDetailLazyLoad&quot; parameterType=&quot;int&quot; resultMap=&quot;OrderDetailItemLazyLoad&quot;&gt;            select * from orderDetail where odid=#&#123;odid&#125;    &lt;/select&gt;&lt;/mapper&gt;&lt;mapper namespace=&quot;com.msb.mapper.ItemsMapper&quot; &gt;    &lt;select id=&quot;selectByid&quot; parameterType=&quot;int&quot; resultType=&quot;items&quot;&gt;        select * from items where iid=#&#123;iid&#125;    &lt;/select&gt;&lt;/mapper&gt;</code></pre><h3 id="4-编写测试代码"><a href="#4-编写测试代码" class="headerlink" title="4.编写测试代码"></a>4.编写测试代码</h3><pre><code>public class MyBatisLazyLoad &#123;    private SqlSessionFactory factory;    @Before    public void init() throws IOException &#123;        InputStream stream= Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);        SqlSessionFactoryBuilder builder=new SqlSessionFactoryBuilder();        factory=builder.build(stream);    &#125;    @Test    public void test1() throws Exception &#123;        SqlSession session=factory.openSession();        OrderDetailMapper orderDetailMapper= session.getMapper(OrderDetailMapper.class);        OrderDetail orderDetail=  orderDetailMapper.selectOrderDetailLazyLoad(1);        session.close();        //System.out.println(orderDetail.getOrderid());        //System.out.println(orderDetail.getItems().getName());    &#125;&#125;</code></pre><h3 id="5-设置SqlMapConfig核心配置文件-观察运行结果："><a href="#5-设置SqlMapConfig核心配置文件-观察运行结果：" class="headerlink" title="5.设置SqlMapConfig核心配置文件  观察运行结果："></a>5.设置SqlMapConfig核心配置文件  观察运行结果：</h3><p>A.两个设置都为false：</p>  <setting name="lazyLoadingEnabled" value="false"/>  <setting name="aggressiveLazyLoading" value="false"/><p>===无论是 </p><p>获得对象就关闭   OrderDetail orderDetail=  orderDetailMapper.selectOrderDetailLazyLoad(1);</p><p>调用对象自己的属性  orderDetail.getOrderid()</p><p>调用对象的对象的属性  orderDetail.getItems().getName()</p><p>===两张表SQL都执行 </p><p>B.一个设置为false，一个设置为true：   </p>  <setting name="lazyLoadingEnabled" value="true"/>  <setting name="aggressiveLazyLoading" value="false"/>--消极懒加载<p>获得对象就关闭   OrderDetail orderDetail=  orderDetailMapper.selectOrderDetailLazyLoad(1);</p><p>调用对象自己的属性  orderDetail.getOrderid()</p><p>===都只执行orderDetail 订单详情表sql语句。</p><p>调用对象的对象的属性  orderDetail.getItems().getName()</p><p>===两张表SQL都执行 </p><p>C.两个设置都为true：</p>  <setting name="lazyLoadingEnabled" value="true"/>  <setting name="aggressiveLazyLoading" value="true"/> ===积极懒加载<p>获得对象就关闭   OrderDetail orderDetail=  orderDetailMapper.selectOrderDetailLazyLoad(1);</p><p>===只执行orderDetail 订单详情表sql语句。</p><p>调用对象自己的属性  orderDetail.getOrderid()</p><p>调用对象的对象的属性  orderDetail.getItems().getName()</p><p>===两张表SQL都执行 </p><h1 id="12-MyBatis查询缓存"><a href="#12-MyBatis查询缓存" class="headerlink" title="12.MyBatis查询缓存"></a>12.MyBatis查询缓存</h1><h2 id="12-1介绍缓存技术"><a href="#12-1介绍缓存技术" class="headerlink" title="12.1介绍缓存技术"></a>12.1介绍缓存技术</h2><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Cppp.png" alt="ppp"></p><h2 id="12-2介绍MyBatis缓存机制"><a href="#12-2介绍MyBatis缓存机制" class="headerlink" title="12.2介绍MyBatis缓存机制"></a>12.2介绍MyBatis缓存机制</h2><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Cqqq.png" alt="qqq"></p><h2 id="12-3MyBatis一级缓存"><a href="#12-3MyBatis一级缓存" class="headerlink" title="12.3MyBatis一级缓存"></a>12.3MyBatis一级缓存</h2><p>MyBatis默认支持一级缓存，不需要在配置文件里进行配置。</p><pre><code> 例子：根据用户编号，查询用户信息：          @Test    public void test() &#123;                 SqlSession session=factory.openSession();         UserMapper usermapper=session.getMapper(UserMapper.class);         User u= usermapper.findUserByid(4);         System.out.println(&quot;编号为4的用户信息：&quot;+u.getUsername()+&quot;;&quot;+u.getSex()+&quot;;&quot;+u.getAddress());           User u2= usermapper.findUserByid(4);         System.out.println(&quot;编号为4的用户信息：&quot;+u2.getUsername()+&quot;;&quot;+u2.getSex()+&quot;;&quot;+u2.getAddress());         session.close();    &#125;   同一个session作用域里，第二次进行相同查询的时候，直接获得缓存数据，不再执行sql去数据库查找。   同一个session：获得session对象开始，-----》到，session.commit（）或者session，close（）或 session.flush()结束。                                                      </code></pre><h2 id="12-4MyBatis二级缓存"><a href="#12-4MyBatis二级缓存" class="headerlink" title="12.4MyBatis二级缓存"></a>12.4MyBatis二级缓存</h2><p>​        MyBatis的二级缓存是mapper范围级别，除了在SqlMapConfig.xml里设置二级缓存的总开关，还要在具体的mapper.xml中开启二级缓存。</p><pre><code>第0步：添加jar包mybatis-ehcache-1.0.2.jarehcache-core-2.6.5.jar    &lt;dependency&gt;        &lt;groupId&gt;org.mybatis.caches&lt;/groupId&gt;        &lt;artifactId&gt;mybatis-ehcache&lt;/artifactId&gt;        &lt;version&gt;1.0.2&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt;        &lt;artifactId&gt;ehcache&lt;/artifactId&gt;        &lt;version&gt;2.10.1&lt;/version&gt;    &lt;/dependency&gt;    第一步：在SqlMapConfig.xml中配置开始全局二级缓存：&lt;settings&gt;  &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;  &lt;/settings&gt;第二步：去各自的sql映射文件里，单独再开启二级缓存&lt;cache type=&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;/&gt;第三步：实体类实现序列化：public class User implements Serializable &#123;  &#125;第四步：编写测试类：</code></pre><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Crrr.png" alt="rrr"></p><p>补充：</p><pre><code>（1）禁用二级缓存：useCache=&quot;false&quot;      映射文件里开启二级缓存后，那么映射文件里所有的查询语句都使用二级缓存，如果某一个sql语句不希望使用缓存数据的话：        表示每次查询都会发出SQL查询，默认情况是true,即该SQL使用二级缓存。          &lt;select id=&quot;findUserByid&quot; parameterType=&quot;int&quot; resultType=&quot;user&quot; useCache=&quot;false&quot;&gt;    （2）刷新缓存：flushCache=&quot;false&quot;    在mapper的同一个namespace中，如果有其它insert，update,delete操作数据后需要刷新缓存，如果不执行刷新缓存会出现脏读。    默认情况下flushCache=”true“会刷新缓存；改为false则不会刷新缓存。    &lt;update id=&quot;update&quot; parameterType=&quot;user&quot; flushCache=&quot;false&quot;&gt;---那么修改功能不进行刷新。         update user set sex=#&#123;sex&#125; where uid=#&#123;uid&#125;    &lt;/update&gt;        代码例子如下：         UserMapper usermapper1=session1.getMapper(UserMapper.class);         User u1= usermapper1.findUserByid(5);  //持久化----缓存         System.out.println(&quot;第一次：编号为5的用户信息：&quot;+u1.getUsername()+&quot;;&quot;+u1.getSex()+&quot;;&quot;+u1.getAddress());                     User uu=new User();                 uu.setSex(&quot;女&quot;);                 uu.setUid(5);                         usermapper1.update(uu);                 session1.commit();                session1.close();                         UserMapper usermapper2=session2.getMapper(UserMapper.class);         User u2= usermapper2.findUserByid(5);         System.out.println(&quot;第二次：编号为5的用户信息：&quot;+u2.getUsername()+&quot;;&quot;+u2.getSex()+&quot;;&quot;+u2.getAddress());         session2.close();</code></pre><p>说明：</p><pre><code>在一级缓存作用域中，执行session.commit()。 即使标签内设置了flushCache=&quot;false&quot;  也仍然会刷新一级缓存。在二级缓存作用域中，执行session.commit()。 如果标签内设置了flushCache=&quot;false&quot;  则将不刷新二级缓存。</code></pre><h2 id="12-5-MyBatis整合第三方缓存框架"><a href="#12-5-MyBatis整合第三方缓存框架" class="headerlink" title="12.5 MyBatis整合第三方缓存框架"></a>12.5 MyBatis整合第三方缓存框架</h2><p>分布式缓存框架：</p><p>​        1.我们系统为了提高系统并发 和性能，一般对系统进行分布式部署（集群部署方式）</p><p>​        2.不适用分布缓存， 缓存的数据在各个服务单独存储，不方便系统开发。所以要使用分布式缓存对缓存数据进行集中管理。</p><p>​        3.ehcache,redis ,memcache缓存框架。</p><p>Ehcache：</p><p>​        1.是一种广泛使用的开源java分布式缓存。主要面向通用缓存，javaEE 和 轻量级容器。它具有内存和磁盘存储功能。</p><p>​        2.被用于大型复杂分布式web application的</p><p>**实现步骤：</p><pre><code>第0步：添加jar包mybatis-ehcache-1.0.2.jarehcache-core-2.6.5.jar    &lt;dependency&gt;        &lt;groupId&gt;org.mybatis.caches&lt;/groupId&gt;        &lt;artifactId&gt;mybatis-ehcache&lt;/artifactId&gt;        &lt;version&gt;1.0.2&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt;        &lt;artifactId&gt;ehcache&lt;/artifactId&gt;        &lt;version&gt;2.10.1&lt;/version&gt;    &lt;/dependency&gt;第一步：在SqlMapConfig.xml中配置开始全局二级缓存： &lt;settings&gt;    &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;  &lt;/settings&gt; 第二步：去各自的sql映射文件里，单独再开启二级缓存 &lt;cache type=&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;/&gt;第三步：实体类实现序列化：public class User implements Serializable &#123;  &#125;   第四步：在src下放置一个配置文件：第五步：编写测试代码：@Test    public void aa()&#123;             SqlSession session1=factory.openSession();         SqlSession session2=factory.openSession();                  UserMapper usermapper1=session1.getMapper(UserMapper.class);         User u1= usermapper1.findUserByid(5);  //持久化----缓存         System.out.println(u1);         session1.close();         UserMapper usermapper2=session2.getMapper(UserMapper.class);         User u2= usermapper2.findUserByid(5);         System.out.println(u2);         session2.close();    &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>说与你听</title>
      <link href="/2022/05/13/shuo-yu-ni-ting/"/>
      <url>/2022/05/13/shuo-yu-ni-ting/</url>
      
        <content type="html"><![CDATA[<h1 id="说与你听"><a href="#说与你听" class="headerlink" title="说与你听"></a>说与你听</h1><h2 id="建站原因"><a href="#建站原因" class="headerlink" title="建站原因:"></a>建站原因:</h2><p>学以致用,想法再多,总要付诸于实践</p><p>主要还是自己一时兴起,觉得新鲜,其实这是别人早就玩剩下的,虽然迟了,但是我不允许自己不知道或者还不会</p><h2 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h2><p>记录生活成长点滴,捕捉生活中不经意的美好,并以这种方式永久的封存</p><p>如果恰巧对你也有一丝帮助,也算是我为社会做点贡献了</p><p>当然主要是怕自己忘了</p><h2 id="状态描述-虽然也没有人关注"><a href="#状态描述-虽然也没有人关注" class="headerlink" title="状态描述(虽然也没有人关注)"></a>状态描述(虽然也没有人关注)</h2><p>现在是牛刀初试,,还有好多的功能和细节有待完善,</p><p>近期不会进行维护,更新,大概2个月后,随着时间的宽裕,随着技术的提升,随着经济的积累,会每天抽出一点的时间来打造,,,这也是对自己的承诺</p><p>纯记录,目前不考虑增加运营成分</p><p>如需深入了解/合作 :可通过主页gmail  twitter  qq  都可找到我</p>]]></content>
      
      
      <categories>
          
          <category> first </category>
          
      </categories>
      
      
        <tags>
            
            <tag> status </tag>
            
            <tag> introduction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBlog 搭建</title>
      <link href="/2022/05/13/myblog-da-jian/"/>
      <url>/2022/05/13/myblog-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBlog-搭建"><a href="#MyBlog-搭建" class="headerlink" title="MyBlog 搭建"></a>MyBlog 搭建</h1><h1 id="使用hexo框架"><a href="#使用hexo框架" class="headerlink" title="使用hexo框架"></a>使用hexo框架</h1><h2 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1,安装node.js"></a>1,安装node.js</h2><blockquote><p>node.js:<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p></blockquote><p>安装完成后进入终端</p><p>查看版本</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看node版本</span>node -v<span class="token comment" spellcheck="true">#查看npm版本</span><span class="token function">npm</span> -v</code></pre><h2 id="2-安装hexo博客框架"><a href="#2-安装hexo博客框架" class="headerlink" title="2,安装hexo博客框架"></a>2,安装hexo博客框架</h2><p>安装前</p><p>由于npm外网比较慢,用cnpm来安装,,所以先借助npm来安装cnpm</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#-p代表全局安装</span><span class="token function">npm</span> <span class="token function">install</span> -g cnmp --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span class="token comment" spellcheck="true">#查看cnpm版本</span>cnpm -v</code></pre><p>如果脚本被阻止了:参考:<a>https:/go.microsoft.com/fwlink/?LinkID=135170</a>这里进行设置</p><p>更改执行策略</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#更改策略</span>Set-ExecutionPolicy -ExecutionPolicy Bypass<span class="token comment" spellcheck="true">#再次查看cnpm版本,就是测试可不可用</span>cnpm -v</code></pre><p><strong>全局安装hexo博客框架</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#全局安装hexo</span>cnpm <span class="token function">install</span> -g hexo-cli<span class="token comment" spellcheck="true">#查看</span>hexo -v</code></pre><p>建立一个blog文件夹,,不想用了/出错了,直接删除这个文件夹可以重新开始,</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#创建一个文件夹,用来生成博客</span><span class="token function">mkdir</span> blog<span class="token comment" spellcheck="true">#进入blog目录</span><span class="token function">cd</span> blog<span class="token comment" spellcheck="true">#使用hexo生成</span>hexo init<span class="token comment" spellcheck="true">#查看生成文件</span><span class="token function">ls</span></code></pre><p><strong>启动hexo</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#启动</span>hexo s</code></pre><p>本地启动默认在4000端口,即:<a href="http://localhost:4000/">http://localhost:4000</a></p><p>新建一篇文章——-支持md</p><pre class=" language-bash"><code class="language-bash">hexo n <span class="token string">"文章标题"</span></code></pre><p>博客搭建到此完成</p><hr/><h2 id="3-部署到远程"><a href="#3-部署到远程" class="headerlink" title="3,部署到远程"></a>3,部署到远程</h2><p>这里使用免费的,直接部署到GitHub上去</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#在blog目录下安装git插件</span>cnpm <span class="token function">install</span> --save hexo-deployer-git</code></pre><blockquote><p>1.注册一个GitHub账号</p><p>2.建立一个同名仓库且以.github.io结尾  (xxx.github.io)</p><p>3.将此地址映射到blog配置文件中</p></blockquote><blockquote><p><strong>终端vim编辑命令不可用</strong></p><p>vim官网:<a href="https://www.vim.org/download.php">download : vim online</a></p><p>下载对应的版本</p><p>配置环境变量重启终端即可</p></blockquote><p>修改blog下的_config.yml文件</p><pre class=" language-bash"><code class="language-bash">vim _config.yml</code></pre><blockquote><p>进入编辑界面——–末行(deployment配置项)——i进入编辑模式</p><pre class=" language-bash"><code class="language-bash">deploy   type:git   repo:https://github.com/Achenzhiguo/Achenzhiguo.github.io.git <span class="token comment" spellcheck="true">#你的github创建的远程库地址</span>   branch:master <span class="token comment" spellcheck="true">#不写默认也是master</span>   </code></pre></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#退出编辑模式</span>Esc定位到末行shift+:<span class="token comment" spellcheck="true">#保存并退出</span>wq</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#部署到远程</span>hexo d<span class="token comment" spellcheck="true">#输入账号密码即可</span>xxx</code></pre><p>刷新github可看到多了一些文件,,,推送成功</p><p>然后就可以使用    xxx.github.io    作为你的网址直接可以访问了</p><h2 id="4-更换blog主题"><a href="#4-更换blog主题" class="headerlink" title="4.更换blog主题"></a>4.更换blog主题</h2><blockquote><p>自定义一个主题</p><p>下载地址: github.com/litten/hexo-theme-yilia</p></blockquote><p>在blog目录下</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#克隆值blog下的themes/yilia中</span><span class="token function">git</span> clone https://github.com/litten/hexo-theme-yilia.git themes/yilia<span class="token comment" spellcheck="true">#修改根目录下的_config.yml中的theme: yilia</span>vim _config.yml    i进入编辑模式    themes: yiliawq</code></pre><p>修改完成</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#清理</span>hexo clean<span class="token comment" spellcheck="true">#重新生成</span>hexo g<span class="token comment" spellcheck="true">#重新启动</span>hexo s<span class="token comment" spellcheck="true">#重新推送到远端</span>hexo d</code></pre><p>远端可访问</p><hr/><p><strong>至此完整的博客搭建完成</strong></p><h2 id="5-Windows常用终端命令"><a href="#5-Windows常用终端命令" class="headerlink" title="5.Windows常用终端命令"></a>5.Windows常用终端命令</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span>        切换目录<span class="token function">cat</span>        查看文件<span class="token function">ls</span>        查看目录vim        进入编辑模式        h左   j上   k下  l右     m中        i进入编辑模式  Esc退出编辑模式        shift+:末行   wq保存退出                <span class="token function">mkdir</span>    创建文件夹/目录<span class="token function">type</span> nul<span class="token operator">></span>text.xml    创建文件ren     重命名<span class="token function">mv</span>        移动文件<span class="token function">rm</span>        删除文件<span class="token function">rmdir</span>    删除文件夹            </code></pre>]]></content>
      
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this is my first time</title>
      <link href="/2022/05/13/this-is-my-first-time/"/>
      <url>/2022/05/13/this-is-my-first-time/</url>
      
        <content type="html"><![CDATA[<h1 id="this-is-my-first-time"><a href="#this-is-my-first-time" class="headerlink" title="this is my first time"></a>this is my first time</h1><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/13/hello-world/"/>
      <url>/2022/05/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
