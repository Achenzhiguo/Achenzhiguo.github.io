<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/05/14/%E8%AF%B4%E4%B8%8E%E4%BD%A0%E5%90%AC/"/>
      <url>/2022/05/14/%E8%AF%B4%E4%B8%8E%E4%BD%A0%E5%90%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="说与你听"><a href="#说与你听" class="headerlink" title="说与你听"></a>说与你听</h1><h2 id="建站原因"><a href="#建站原因" class="headerlink" title="建站原因:"></a>建站原因:</h2><p>学以致用,想法再多,总要付诸于实践</p><p>主要还是自己一时兴起,觉得新鲜,其实这是别人早就玩剩下的,虽然迟了,但是我不允许自己不知道或者还不会</p><h2 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h2><p>记录生活成长点滴,捕捉生活中不经意的美好,并以这种方式永久的封存</p><p>如果恰巧对你也有一丝帮助,也算是我为社会做点贡献了</p><p>当然主要是怕自己忘了</p><h2 id="状态描述-虽然也没有人关注"><a href="#状态描述-虽然也没有人关注" class="headerlink" title="状态描述(虽然也没有人关注)"></a>状态描述(虽然也没有人关注)</h2><p>现在是牛刀初试,,还有好多的功能和细节有待完善,</p><p>近期不会进行维护,更新,大概2个月后,随着时间的宽裕,随着技术的提升,随着经济的积累,会每天抽出一点的时间来打造,,,这也是对自己的承诺</p><p>纯记录,目前不考虑增加运营成分</p><p>如需深入了解/合作 :可通过主页gmail  twitter  qq  都可找到我</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/13/MyBlog%20%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/05/13/MyBlog%20%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBlog-搭建"><a href="#MyBlog-搭建" class="headerlink" title="MyBlog 搭建"></a>MyBlog 搭建</h1><h1 id="使用hexo框架"><a href="#使用hexo框架" class="headerlink" title="使用hexo框架"></a>使用hexo框架</h1><h2 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1,安装node.js"></a>1,安装node.js</h2><blockquote><p>node.js:<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p></blockquote><p>安装完成后进入终端</p><p>查看版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查看node版本</span><br><span class="line">node -v</span><br><span class="line">#查看npm版本</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h2 id="2-安装hexo博客框架"><a href="#2-安装hexo博客框架" class="headerlink" title="2,安装hexo博客框架"></a>2,安装hexo博客框架</h2><p>安装前</p><p>由于npm外网比较慢,用cnpm来安装,,所以先借助npm来安装cnpm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#-p代表全局安装</span><br><span class="line">npm install -g cnmp --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">#查看cnpm版本</span><br><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><p>如果脚本被阻止了:参考:<a>https:/go.microsoft.com/fwlink/?LinkID=135170</a>这里进行设置</p><p>更改执行策略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#更改策略</span><br><span class="line">Set-ExecutionPolicy -ExecutionPolicy Bypass</span><br><span class="line">#再次查看cnpm版本,就是测试可不可用</span><br><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><p><strong>全局安装hexo博客框架</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#全局安装hexo</span><br><span class="line">cnpm install -g hexo-cli</span><br><span class="line">#查看</span><br><span class="line">hexo -v</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>建立一个blog文件夹,,不想用了/出错了,直接删除这个文件夹可以重新开始,</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#创建一个文件夹,用来生成博客</span><br><span class="line">mkdir blog</span><br><span class="line">#进入blog目录</span><br><span class="line">cd blog</span><br><span class="line">#使用hexo生成</span><br><span class="line">hexo init</span><br><span class="line">#查看生成文件</span><br><span class="line">ls</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>启动hexo</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#启动</span><br><span class="line">hexo s</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本地启动默认在4000端口,即:<a href="http://localhost:4000/">http://localhost:4000</a></p><p>新建一篇文章——-支持md</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;文章标题&quot;</span><br></pre></td></tr></table></figure><p>博客搭建到此完成</p><hr/><h2 id="3-部署到远程"><a href="#3-部署到远程" class="headerlink" title="3,部署到远程"></a>3,部署到远程</h2><p>这里使用免费的,直接部署到GitHub上去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#在blog目录下安装git插件</span><br><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><blockquote><p>1.注册一个GitHub账号</p><p>2.建立一个同名仓库且以.github.io结尾  (xxx.github.io)</p><p>3.将此地址映射到blog配置文件中</p></blockquote><blockquote><p><strong>终端vim编辑命令不可用</strong></p><p>vim官网:<a href="https://www.vim.org/download.php">download : vim online</a></p><p>下载对应的版本</p><p>配置环境变量重启终端即可</p></blockquote><p>修改blog下的_config.yml文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure><blockquote><p>进入编辑界面——–末行(deployment配置项)——i进入编辑模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;deploy</span><br><span class="line">type:git</span><br><span class="line">repo:https://github.com/Achenzhiguo/Achenzhiguo.github.io.git #你的github创建的远程库地址</span><br><span class="line">branch:master #不写默认也是master</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#退出编辑模式</span><br><span class="line">Esc</span><br><span class="line">定位到末行</span><br><span class="line">shift+:</span><br><span class="line">#保存并退出</span><br><span class="line">wq</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#部署到远程</span><br><span class="line">hexo d</span><br><span class="line">#输入账号密码即可</span><br><span class="line">xxx</span><br></pre></td></tr></table></figure><p>刷新github可看到多了一些文件,,,推送成功</p><p>然后就可以使用    xxx.github.io    作为你的网址直接可以访问了</p><h2 id="4-更换blog主题"><a href="#4-更换blog主题" class="headerlink" title="4.更换blog主题"></a>4.更换blog主题</h2><blockquote><p>自定义一个主题</p><p>下载地址: github.com/litten/hexo-theme-yilia</p></blockquote><p>在blog目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#克隆值blog下的themes/yilia中</span><br><span class="line">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br><span class="line">#修改根目录下的_config.yml中的theme: yilia</span><br><span class="line">vim _config.yml</span><br><span class="line">i进入编辑模式</span><br><span class="line">themes: yilia</span><br><span class="line">wq</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#清理</span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">#重新生成</span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">#重新启动</span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line">#重新推送到远端</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>远端可访问</p><hr/><p><strong>至此完整的博客搭建完成</strong></p><h2 id="5-Windows常用终端命令"><a href="#5-Windows常用终端命令" class="headerlink" title="5.Windows常用终端命令"></a>5.Windows常用终端命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cd切换目录</span><br><span class="line">cat查看文件</span><br><span class="line">ls查看目录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vim进入编辑模式</span><br><span class="line">h左   j上   k下  l右 m中</span><br><span class="line">i进入编辑模式  Esc退出编辑模式</span><br><span class="line">shift+:末行   wq保存退出</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mkdir创建文件夹/目录</span><br><span class="line">type nul&gt;text.xml创建文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ren 重命名</span><br><span class="line">mv移动文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rm删除文件</span><br><span class="line">rmdir删除文件夹</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/13/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/05/13/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="20个linux常用命令"><a href="#20个linux常用命令" class="headerlink" title="20个linux常用命令"></a>20个linux常用命令</h1><h2 id="1-ls：列出文件list"><a href="#1-ls：列出文件list" class="headerlink" title="1. ls：列出文件list"></a>1. ls：列出文件list</h2><p>List列出当前路径下的文件与文件夹。</p><blockquote><p>ls 常用参数：<br>-l：列出文件的详细信息<br>-a：all，列出所有文件，包括隐藏文件<br>注：参数可以叠加使用，如-la表示列出所有文件及其详细信息</p></blockquote><h2 id="2-cd：切换目录change-directory"><a href="#2-cd：切换目录change-directory" class="headerlink" title="2. cd：切换目录change directory"></a>2. cd：切换目录change directory</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## cd用法</span></span><br><span class="line"><span class="built_in">cd</span> /home<span class="comment"># 切换/进入home目录</span></span><br><span class="line"><span class="built_in">cd</span> ..<span class="comment"># 到上一目录（父目录）</span></span><br><span class="line"><span class="built_in">cd</span> ../..<span class="comment"># 到父目录的父目录</span></span><br><span class="line"><span class="built_in">cd</span> .<span class="comment"># 进入当前目录（其实啥都不做）</span></span><br><span class="line">12345</span><br></pre></td></tr></table></figure><h2 id="3-cp：复制copy"><a href="#3-cp：复制copy" class="headerlink" title="3. cp：复制copy"></a>3. cp：复制copy</h2><blockquote><p>cp 常用参数：<br>-i：interactive mode，若有同名文件，会询问是否覆盖（如果没这个参数，会不提示，直接覆盖）<br>-r：recursive copy，复制文件夹时连同子文件（夹）一起复制，如果是对文件夹进行操作，一定要带这个参数</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## cp用法</span></span><br><span class="line"><span class="built_in">cp</span> -ir sourceDir/ home/targetDir/<span class="comment"># 把当前路径下的sourceDir文件夹复制到home目录下，取名为targetDir，且带参数-i和-r</span></span><br><span class="line">12</span><br></pre></td></tr></table></figure><h2 id="4-mv：移动move"><a href="#4-mv：移动move" class="headerlink" title="4. mv：移动move"></a>4. mv：移动move</h2><p>即剪切操作。源文件会被删除。</p><blockquote><p>mv 参数：<br>-i： interactive mode，同cp的-i参数，若覆盖会询问</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## mv用法</span></span><br><span class="line"><span class="built_in">mv</span> -i sourceFile /home/targetFile<span class="comment"># 把当前目录下的sourceFile剪切到/home目录下并命名为targetFile</span></span><br><span class="line">12</span><br></pre></td></tr></table></figure><h2 id="5-rm：移除，删除remove"><a href="#5-rm：移除，删除remove" class="headerlink" title="5. rm：移除，删除remove"></a>5. rm：移除，删除remove</h2><blockquote><p>rm 参数：<br>-i：interactive，同上，若覆盖，先询问<br>-r：recursive mode，删除所有子文件（夹）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## rm用法</span></span><br><span class="line"><span class="built_in">rm</span> Dir/<span class="comment"># 删除Dir文件夹（错误示例，会报错）</span></span><br><span class="line"><span class="built_in">rm</span> -r Dir/<span class="comment"># 删除Dir文件夹（正确，对文件夹操作一定要带-r）</span></span><br><span class="line">123</span><br></pre></td></tr></table></figure><h2 id="6-mkdir：创建文件夹make-directory"><a href="#6-mkdir：创建文件夹make-directory" class="headerlink" title="6. mkdir：创建文件夹make directory"></a>6. <a href="https://so.csdn.net/so/search?q=mkdir&spm=1001.2101.3001.7020">mkdir</a>：创建文件夹make directory</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## mkdir用法</span></span><br><span class="line"><span class="built_in">mkdir</span> newDir/<span class="comment"># 在当前路径创建一个空文件夹newDir/</span></span><br><span class="line">12</span><br></pre></td></tr></table></figure><h2 id="7-rmdir：移除，删除文件夹remove-directory"><a href="#7-rmdir：移除，删除文件夹remove-directory" class="headerlink" title="7. rmdir：移除，删除文件夹remove directory"></a>7. rmdir：移除，删除文件夹remove directory</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## rmdir用法</span></span><br><span class="line"><span class="built_in">rmdir</span> oldDir/<span class="comment"># 在当前路径删除oldDir文件夹及其子文件（夹）</span></span><br><span class="line">12</span><br></pre></td></tr></table></figure><h2 id="8-chown：更改所有者change-owner"><a href="#8-chown：更改所有者change-owner" class="headerlink" title="8. chown：更改所有者change owner"></a>8. chown：更改所有者change owner</h2><blockquote><p>chown 参数：<br>-R： 同-r，recursive</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## chown用法</span></span><br><span class="line"><span class="built_in">chown</span> user -R myDir/<span class="comment"># 把文件夹myDir的所有者改成user</span></span><br><span class="line">12</span><br></pre></td></tr></table></figure><h2 id="9-chmod：更改文件的权限模式change-mode"><a href="#9-chmod：更改文件的权限模式change-mode" class="headerlink" title="9. chmod：更改文件的权限模式change mode"></a>9. <a href="https://so.csdn.net/so/search?q=chmod&spm=1001.2101.3001.7020">chmod</a>：更改文件的权限模式change mode</h2><p>文件权限模式针对三类对象：当前用户user（这里也是文件的所有者），组group，其他用户other。<br>文件权限有读Read，写Write，执行Execute。</p><blockquote><p>chmod参数：<br>u: user，权限对象为当前用户（这里是所有者）<br>g：group，权限对象为所有者和组<br>o：other，权限对象为其他用户<br>r：read = 4，读权限<br>w：write = 2，写权限<br>e：execute = 1，执行权限<br>+：u/g/o与r/w/e组合使用，加入<br>-：删除<br>=：设置<br>4：仅读<br>5：仅读+执行<br>6：仅读+写<br>7：读+写+执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## chmod用法</span></span><br><span class="line"><span class="built_in">chmod</span> 754 myDir/<span class="comment"># 当前用户（所有者）可读+写+执行，组group可读+执行，其他用户可读</span></span><br><span class="line"><span class="built_in">chmod</span> g+w myDir/<span class="comment"># 为组group添加写write权限</span></span><br><span class="line"><span class="built_in">chmod</span> -R 777 myDir/ <span class="comment"># 给myDir/及其所有子目录添加所有权限</span></span><br><span class="line"><span class="built_in">ls</span> -n <span class="comment"># 可以查看当前目录下各子目录的文件权限</span></span><br><span class="line">12345</span><br></pre></td></tr></table></figure><h2 id="10-find：查找"><a href="#10-find：查找" class="headerlink" title="10. find：查找"></a>10. find：查找</h2><blockquote><p>find 常用参数：<br>-name：根据文件名查找<br>-mtime n：n为数字，表示找出在n天前的当天被更改过的文件（0表示今天）<br>-mtime +n：查找在n天前（不包括n天当天）被改过的文件<br>-mtime -n：查找在n天之内（包括n天当天）被改过的文件<br>-size +/-：查找比XXsize大/小的文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## find用法</span></span><br><span class="line">find /home -name myFile<span class="comment"># 在/home目录下查找文件名为myFile的文件（注：myFile也可以搭配正则表达式使用）</span></span><br><span class="line">find /home -name *.txt<span class="comment"># 在/home目录下查找以txt为后缀的文件</span></span><br><span class="line">find /home -mtime 0<span class="comment"># 在/home目录下查找今天内被改过的文件</span></span><br><span class="line">find /home -mtime +1<span class="comment"># 在/home目录下查找昨天之前（不包括昨天）被改过的文件</span></span><br><span class="line">find /home -mtime -1<span class="comment"># 在/home目录下查找昨天至今（即昨天和今天）被改过的文件</span></span><br><span class="line">find /home -size +100M<span class="comment"># 在/home目录下查找大于100MB的文件，注意c表示byte</span></span><br><span class="line">1234567</span><br></pre></td></tr></table></figure><h2 id="11-：管道"><a href="#11-：管道" class="headerlink" title="11. |：管道"></a>11. |：管道</h2><p>将前一个命令的输出结果像管道一样传递给后一个命令作为输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 管道|用法</span></span><br><span class="line"><span class="built_in">ls</span> | find -name myFile<span class="comment"># 列出当前路径的文件（夹）并查找名字为“myFile”的，打印出来</span></span><br><span class="line">12</span><br></pre></td></tr></table></figure><h2 id="12-grep：按行查找并匹配"><a href="#12-grep：按行查找并匹配" class="headerlink" title="12. grep：按行查找并匹配"></a>12. <a href="https://so.csdn.net/so/search?q=grep&spm=1001.2101.3001.7020">grep</a>：按行查找并匹配</h2><blockquote><p>grep参数：<br>-r：recursive，查找所有子文件（夹）<br>-n：number，显示行号<br>-w：word，完整匹配整个单词<br>-i：insensitive search，忽略大小写<br>-l：显示文件名称，而非匹配到的行的内容<br>-v：反向选择，显示出没匹配到的行的内容</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## grep用法</span></span><br><span class="line">grep -i mystring file.txt<span class="comment"># 忽略大小写，在file.txt中查找并打印出有“mystring”的行</span></span><br><span class="line"><span class="built_in">ls</span> -l | grep -i mystring<span class="comment"># 在ls -l的输出中把有“mystring”的行打印出来（忽略大小写）</span></span><br><span class="line">123</span><br></pre></td></tr></table></figure><h2 id="13-tar：打包，压缩，解压"><a href="#13-tar：打包，压缩，解压" class="headerlink" title="13. tar：打包，压缩，解压"></a>13. tar：打包，压缩，解压</h2><blockquote><p>tar常用参数<br>-jcv：压缩<br>-jxv：解压</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## tar用法</span></span><br><span class="line">tar -jcv myDir/<span class="comment"># 压缩myDir文件夹</span></span><br><span class="line">tar -jxv DownloadDir.tar.gz myDir/<span class="comment"># 解压DownloadDir.tar.gz到当前文件夹下，并命令为myDir</span></span><br><span class="line">123</span><br></pre></td></tr></table></figure><h2 id="14-cat：打印文件内容"><a href="#14-cat：打印文件内容" class="headerlink" title="14. cat：打印文件内容"></a>14. cat：打印文件内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## cat用法</span></span><br><span class="line"><span class="built_in">cat</span> myFile<span class="comment"># 显示myFile</span></span><br><span class="line">12</span><br></pre></td></tr></table></figure><h2 id="15-ps：查看进程process-select"><a href="#15-ps：查看进程process-select" class="headerlink" title="15. ps：查看进程process select"></a>15. ps：查看进程process select</h2><blockquote><p>ps 常用参数：<br>-A：显示所有进程<br>-a：不与terminal有关的所有进程<br>-u：有效用户的相关进程<br>-x：一般与-a一起用，列出完整的进程信息<br>-l：long，详细列出PID的信息</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## ps用法</span></span><br><span class="line">ps Aux <span class="comment"># 查看系统所有的进程数据</span></span><br><span class="line">ps ax</span><br><span class="line">123</span><br></pre></td></tr></table></figure><h2 id="16-kill：杀死进程"><a href="#16-kill：杀死进程" class="headerlink" title="16. kill：杀死进程"></a>16. kill：杀死进程</h2><blockquote><p>kill常用参数：<br>-SIGHUP：启动被终止的进程<br>-SIGINT：相当于ctrl+c，中断进程<br>-SIGKILL：强制中断进程<br>-SIGTERM：以正常的结束进程方式来终止进程<br>-SIGSTOP：相当于ctrl+z，暂停进程</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## kill用法</span></span><br><span class="line"><span class="built_in">kill</span> -SIGKILL 10876<span class="comment"># 强制中断PID=10876的进程（PID可以通过ps查到，有时可以加上| grep进行筛选）</span></span><br><span class="line">12</span><br></pre></td></tr></table></figure><h2 id="17-passwd：修改密码password"><a href="#17-passwd：修改密码password" class="headerlink" title="17. passwd：修改密码password"></a>17. passwd：修改密码password</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## passwd用法</span></span><br><span class="line">passwd<span class="comment"># 修改当前用户的密码</span></span><br><span class="line">12</span><br></pre></td></tr></table></figure><h2 id="18-pwd：显示工作目录print-work-directory"><a href="#18-pwd：显示工作目录print-work-directory" class="headerlink" title="18. pwd：显示工作目录print work directory"></a>18. pwd：显示工作目录print work directory</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pwd用法</span></span><br><span class="line"><span class="built_in">pwd</span><span class="comment"># 显示当前路径的具体位置</span></span><br><span class="line">12</span><br></pre></td></tr></table></figure><h2 id="19-tee：显示并保存"><a href="#19-tee：显示并保存" class="headerlink" title="19. tee：显示并保存"></a>19. tee：显示并保存</h2><p>显示内容并将内容保存在文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3.6 test.py | <span class="built_in">tee</span> result.log<span class="comment"># 运行test.py文件，显示编译与运行结果并保存成result.log文件</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="20-reboot：重启"><a href="#20-reboot：重启" class="headerlink" title="20. reboot：重启"></a>20. reboot：重启</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## reboot用法</span></span><br><span class="line">reboot<span class="comment"># 输完立马重启（记得保存文件）</span></span><br><span class="line">12</span><br></pre></td></tr></table></figure><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><ol><li>alias 设置别名</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> <span class="built_in">cp</span>=<span class="string">&#x27;cp -i&#x27;</span>  <span class="comment"># 输入cp默认调用cp -i</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">rm</span>=<span class="string">&#x27;rm -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">mv</span>=<span class="string">&#x27;mv -i&#x27;</span></span><br><span class="line">123</span><br></pre></td></tr></table></figure><ol><li>bg查看后端运行的进程 background</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bg</span> <span class="comment">#会显示后端进程的号码</span></span><br><span class="line"><span class="built_in">kill</span> %1 <span class="comment">#强制杀死1号进程</span></span><br><span class="line">12</span><br></pre></td></tr></table></figure><ol><li>touch创建新文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> new_file.txt <span class="comment"># 创建一个new_file.txt文件</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><ol><li>du -h 打印文件/文件夹的大小</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> -h <span class="comment">#打印当前目录下所有子目录与子文件夹的大小</span></span><br><span class="line"><span class="built_in">du</span> -h --max-depth=0 <span class="comment">#打印当前目录的大小</span></span><br><span class="line"><span class="built_in">du</span> -h --max-depth=1 <span class="comment">#打印当前目录下所有子目录的大小 </span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/13/MyBatis/"/>
      <url>/2022/05/13/MyBatis/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis框架"><a href="#MyBatis框架" class="headerlink" title="MyBatis框架"></a>MyBatis框架</h1><h2 id="1-1为什么要学习框架"><a href="#1-1为什么要学习框架" class="headerlink" title="1.1为什么要学习框架"></a>1.1为什么要学习框架</h2><p>举例子：            如何制作一份看上去具有专业水准的PPT文档呢？</p><p>​                           一个简单的方法就是使用 Microsoft  Power Point 的模板功能。</p><p>​                           使用模板新建出来的文档已经有了一个PPT的”架子“，我们只需要把必要的信息像”做填空题“一样填写进去就可以了。</p><p>思考一下，使用ppt模板制作ppt有哪些好处呢？</p><p>​                            a.不用考虑布局，排版等问题，提高了效率</p><p>​                            b.可以专心于ppt的内容上，使ppt的质量更有保障</p><p>​                            c.新手也可以很快速的制作很专业的ppt</p><p>而使用框架来构建项目也是基于这样的考虑。当确定使用哪个技术框架后，就已经有了一个”半成品“，然后在这个半成品里填上内容，工作就完成了。这就是框架的优势：</p><p>​                            a.不用在考虑公共问题，框架都已经帮我们做好了</p><p>​                            b.可以专心于业务的实现，保证核心业务逻辑的开发质量</p><p>​                            c.结构统一，便于学习和维护</p><p>​                            d.框架中集成了前人的经验，可以帮助新手写出稳定，性能优良而且结构优美的高质量程序。</p><p>​                            e.缩短我们开发的时间与周期</p><h2 id="1-2框架的概念"><a href="#1-2框架的概念" class="headerlink" title="1.2框架的概念"></a>1.2框架的概念</h2><p>​          框架(Framework)是一个提供了可重用的公共结构的半成品。它为我们构建新的应用程序提供了极大的便利。一方面提供了可以拿来就用的工具，更重要的是，提供了可重用的设计。</p><p>​          框架的另一个层面的含义是：框架使混乱的东西变得结构化。莎士比亚说：”一千个人眼中有一千个哈姆雷特“。同样，如果没有框架的话，一千个人将写出一千种Servlet+JavaBean+JSP的代码。而框架保证了程序结构风格统一。从企业的角度来说，降低了培训成本和软件的维护成本。</p><p>​            框架像它的名字一样，是一个框，那框就是要有一些约束，所以在学习框架很多时候都需要按照人家规定好的步骤按部就班去操作；是一个架，是框架中包含了很多设计模式和基础功能，将应用程序支撑起来。</p><h2 id="1-3框架的使用场合"><a href="#1-3框架的使用场合" class="headerlink" title="1.3框架的使用场合"></a>1.3框架的使用场合</h2><p>但是框架也有它的弊端，不是任何时候都适合使用框架的。</p><p>框架的维护需要很大的人力，财力。如果不是特别大规模，特别复杂的项目，建议还是不要使用 框架。</p><p>那么今天我们就要学习一个框架MyBatis，那该框架是为了解决什么问题的呢？又有哪些强大的功能呢？那么我们一起来学习一下！</p><h1 id="2-MyBatis框架"><a href="#2-MyBatis框架" class="headerlink" title="2.MyBatis框架"></a>2.MyBatis框架</h1><h2 id="2-1-MyBatis框架简介"><a href="#2-1-MyBatis框架简介" class="headerlink" title="2.1.MyBatis框架简介"></a>2.1.MyBatis框架简介</h2><h3 id="2-1-1-Mybatis的基本信息"><a href="#2-1-1-Mybatis的基本信息" class="headerlink" title="2.1.1.Mybatis的基本信息"></a>2.1.1.Mybatis的基本信息</h3><p>MyBatis 本是<a href="https://baike.baidu.com/item/apache/6265">apache</a>的一个开源项目<a href="https://baike.baidu.com/item/iBatis">iBatis</a>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github。</p><p>当前，最新版本是MyBatis 3.5.5 ，其发布时间是2020年6月4日。</p><p>MyBatis是一个基于Java的数据持久层(ORM)框架。把实体类和SQL语句之间建立了映射关系，是一种半自动化的ORM实现。</p><pre><code>  补充：（1）ORM 对象关系映射，是一种数据持久化技术             O：Object   对象===java里的实体类（对象）           R：Relation 关系===关系型数据库（表）           M：Mapping  映射===提供一种机制，实现映射       （2）半自动化：需要写一些sql语句，才能完成 指定功能。           全自动化：不需要使用sql语句，直接操作实体类对象，就可以对应的操作数据库表里的数据。           有全自动为什么还需要半自动化？===多表查询的时候，分页查询的时候，全自动在进行修改的的时候反而很复杂</code></pre><p>MyBatis 支持定制化SQL，存储过程以及高级映射。</p><p>MyBatis 可以使用简单的XML或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录。</p><h3 id="2-1-2-MyBatis与传统JDBC比较"><a href="#2-1-2-MyBatis与传统JDBC比较" class="headerlink" title="2.1.2.MyBatis与传统JDBC比较"></a>2.1.2.MyBatis与传统JDBC比较</h3><p><strong>——-MyBatis避免了几乎所有的JDBC代码和手动设置参数以及获取结果集。</strong></p><p>​     A.传统JDBC实现根据用户名查询用户信息代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">String url = &quot;jdbc:mysql://localhost:3306/test&quot;;</span><br><span class="line">String user = &quot;root&quot;;</span><br><span class="line">String password = &quot;root&quot;;</span><br><span class="line">Connection connection = DriverManager.getConnection(url, user, password)</span><br><span class="line">String sql = &quot;SELECT * FROM userinfo where username= ? &quot;;</span><br><span class="line">PreparedStatement statement = connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">statement.setString(1, &quot;王五&quot;);</span><br><span class="line">ResultSet rs = statement.executeQuery();</span><br><span class="line">            while (rs.next()) &#123;</span><br><span class="line">       System.out.println(rs.getString(&quot;id&quot;)+rs.getString(&quot;username&quot;));</span><br><span class="line">&#125; </span><br><span class="line">rs.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><p> <img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Cimage-20200810152127748.png" alt="image-20200810152127748"></p><p> B. MyBatis配置文件实现根据用户名查询用户信息代码:</p><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Cimage-20200810152445228.png" alt="image-20200810152445228"></p><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Cimage-20200810152515136.png" alt="image-20200810152515136"></p><h3 id="2-1-3-MyBatis的优点"><a href="#2-1-3-MyBatis的优点" class="headerlink" title="2.1.3.MyBatis的优点"></a>2.1.3.MyBatis的优点</h3><p>A.简单易学</p><p>===MyBatis本身小巧简单，没有任何第三方依赖，易于学习，易于使用。</p><p>B.基于SQL语法，灵活</p><p>===MyBatis不会 对 应用程序或者数据库的现有设计强加任何影响。SQL写在xml里，便于统一管理和优化，通过SQL语句可以满足操作数据库的所有需求。</p><p>C.解除SQL与程序代码的耦合</p><p>===通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</p><p>D.提供映射标签，支持对象与数据库的orm字段关系映射</p><p>E.提供对象关系映射标签，支持对象关系组建维护</p><p>F.提供xml标签，支持编写动态sql</p><p>===如果您以前有使用JDBC，您就会明白把SQL语句条件连接在一起是多么的痛苦，要确保不能忘记空格或者不要在columns列后面省略一个逗号等。动态语句能够完全解决掉这些痛苦。</p><h1 id="3-MyBatis框架架构讲解"><a href="#3-MyBatis框架架构讲解" class="headerlink" title="3.MyBatis框架架构讲解"></a>3.MyBatis框架架构讲解</h1><h2 id="3-1回顾"><a href="#3-1回顾" class="headerlink" title="3.1回顾"></a>3.1回顾</h2><h3 id="3-1-1什么是MyBatis？"><a href="#3-1-1什么是MyBatis？" class="headerlink" title="3.1.1什么是MyBatis？"></a>3.1.1什么是MyBatis？</h3><p>​        mybatis是一个优秀的基于java的持久层框架，它内部封装了JDBC， 使开发者只需要关注SQL语句本身，而<br>不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。</p><p>​        mybatis通过xmI或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中sq|<br>的动态参数进行映射生成最终执行的sq|语句，最后由mybatis框架执行sq|并将结果映射为java对象并返回。</p><p>​      </p><h3 id="3-1-2为什么学习MyBatis？"><a href="#3-1-2为什么学习MyBatis？" class="headerlink" title="3.1.2为什么学习MyBatis？"></a>3.1.2为什么学习MyBatis？</h3><p>​         为了和数据库进行交互，通常的做法是将SQL语句写在Java代码中，SQL语句和Java代码耦合在一起不利于后期维护修改，而MyBatis能够帮助我们将SQL语句和Java代码分离，方便了后期因需求变动而对SQL语句进行修改。</p><p>​       采用ORM思想解决了实体对象和数据库映射的问题，对jdbc进行了封装，屏蔽了jdbc api 底层访问细节，使我<br>们不用与jdbc api打交道，就可以完成对数据库的持久化操作； 同时MyBatis封装了绝大部分JDBC中参数设置和返回值接收工作，我们不再需要编写大量臃肿代码。</p><h2 id="3-2MyBatis框架功能架构"><a href="#3-2MyBatis框架功能架构" class="headerlink" title="3.2MyBatis框架功能架构"></a>3.2MyBatis框架功能架构</h2><h3 id="3-2-1MyBatis架构图"><a href="#3-2-1MyBatis架构图" class="headerlink" title="3.2.1MyBatis架构图"></a>3.2.1MyBatis架构图</h3><p>​     <img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Cimage-20200811185305792.png" alt="image-20200811185305792"></p><p>详细说明：</p><p>MyBatis框架功能架构分为三层：</p><p>(1)API接口层：</p><p>　　首先接口层是我们打交道最多的。核心对象是SqlSession，它是上层应用和MyBatis打交道的桥梁，SqlSession 上定义了非常多的对数据库的操作方法。接口层在接收到调用请求的时候，会调用核心处理层的相应模块来完成具体的数据库操作。</p><p>(2)数据处理层/核心处理层：</p><p>​         跟数据库操作相关的动作都是在这一层完成的。核心处理层主要做了这几件事：</p><ol><li>把接口中传入的参数解析并且映射成JDBC 类型；</li><li>解析xml 文件中的SQL 语句，包括插入参数，和动态SQL 的生成；</li><li>执行SQL 语句；</li><li>处理结果集，并映射成Java 对象。</li></ol><p>(3)基础支撑层：</p><p>　    基础支持层主要是一些抽取出来的通用的功能（实现复用），比如数据源、缓存、日志、xml 解析、反射、IO、事务等等这些功能。</p><p>为上层的数据处理层提供最基础的支撑。</p><h3 id="3-2-2MyBatis核心类及工作流程"><a href="#3-2-2MyBatis核心类及工作流程" class="headerlink" title="3.2.2MyBatis核心类及工作流程"></a>3.2.2MyBatis核心类及工作流程</h3><h4 id="3-2-2-1Mybatis核心类"><a href="#3-2-2-1Mybatis核心类" class="headerlink" title="3.2.2.1Mybatis核心类"></a>3.2.2.1Mybatis核心类</h4><p> <strong>SqlSessionFactory：</strong>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为中心的。SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或通过Java的方式构建出 SqlSessionFactory 的实例。SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在。一个SqlSessionFactory对应配置文件中的一个环境（environment），如果你要使用多个数据库 就配置多个环境分别对应一个SqlSessionFactory。</p><p> <strong>SqlSession：</strong>SqlSession是一个接口，它有2个实现类，分别是DefaultSqlSession(默认使用)以及SqlSessionManager。SqlSession通过内部存放的执行器（Executor）来对数据进行CRUD。此外SqlSession不是线程安全的，因为每一次操作完数据库后都要调用close对其进行关闭，官方建议通过try-finally来保证总是关闭SqlSession。</p><p> <strong>Executor：</strong>Executor（执行器）接口有两个实现类，其中BaseExecutor有三个继承类分别是BatchExecutor（重用语句并执行批量更新），ReuseExecutor（重用预处理语句prepared statement，跟Simple的唯一区别就是内部缓存statement），SimpleExecutor（默认，每次都会创建新的statement）。以上三个就是主要的Executor。我们可以用CachingExecutor来装饰前面的三个执行器目的就是用来实现缓存。</p><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5C1.png" alt="1"></p><p> <strong>MappedStatement：</strong>MappedStatement就是用来存放我们SQL映射文件中的信息包括sql语句，输入参数，输出参数等等。一个SQL节点对应一个MappedStatement对象。</p><h4 id="3-2-2-2-MyBatis工作流程"><a href="#3-2-2-2-MyBatis工作流程" class="headerlink" title="3.2.2.2 MyBatis工作流程"></a>3.2.2.2 MyBatis工作流程</h4><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5C777.png" alt="777"></p><p>详细说明：</p><p>MyBatis工作流程具体如下：</p><p>我们再来说下MyBatis 的主要工作流程：<br>1.加载配置并初始化：<br>首先在MyBatis 启动的时候我们要去解析配置文件，包括全局配置文件和映射器配置文件，<br>全局配置文件里面包含了我们怎么控制MyBatis 的行为，我们会把它们解析成一个Configuration 对象。<br>映射器配置文件包含了我们要对数据库下达的指令，也就是我们的SQL 信息。然后一个SQL节点会被对应解析成一个MappedStatement对象存储在内存中。<br>接下来就是我们操作数据库的接口，它在应用程序和数据库中间，<br>代表我们跟数据库之间的一次连接：这个就是SqlSession 对象。<br>我们要获得一个SqlSession对象或者说是获得一次连接会话， 必须有一个会话工厂SqlSessionFactory 。<br>SqlSessionFactory 里面又必须包含我们的所有的配置信息，所以我们会通过一个FactoryBuilder 来创建工厂类。</p><p>2.接收调用的请求：<br>  接收SQL的ID 和传入的参数对象</p><p>3.处理操作请求：</p><pre><code>    A.根据SQL的ID查找对应的MappedStatement对象。        B.根据传入参数对象解析MappedStatement对象，得到最终要执行的SQL和执行传入参数。    C.获取数据库连接，根据得到的最终SQL语句和执行传入参数到数据库执行，并得到执行结果。    D.根据MappedStatement对象中的结果映射配置，对得到的执行结果进行转换处理，并得到最终的处理结果。    E.释放连接资源。</code></pre><p>4.返回最终的处理结果</p><p>​        我们知道MyBatis 是对JDBC 的封装，也就是意味着底层一定会出现JDBC 的一些核心对象，比如执行SQL 的Statement，结果集ResultSet。在Mybatis 里面，SqlSession 只是提供给应用一个接口，还不是SQL 的真正的执行对象。<br>其实SqlSession内部是持有了一个Executor 对象，用来封装对数据库的操作。在执行器Executor 执行query 或者update 操作的时候我们创建一系列的对象，来处理参数、执行SQL、处理结果集，这里我们把它简化成一个对象：StatementHandler,（但是Executor ,StatementHandler我们都操作不到，底层源码里可以看到）以上这些就是MyBatis 主要的工作流程。</p><h1 id="4-MyBatis环境搭建-入门程序"><a href="#4-MyBatis环境搭建-入门程序" class="headerlink" title="4.MyBatis环境搭建/入门程序"></a>4.MyBatis环境搭建/入门程序</h1><h2 id="A-项目结构"><a href="#A-项目结构" class="headerlink" title="A.项目结构"></a>A.项目结构</h2><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5C%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" alt="项目结构"></p><h2 id="B-添加项目依赖"><a href="#B-添加项目依赖" class="headerlink" title="B.添加项目依赖"></a>B.添加项目依赖</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!-- mybatis核心包--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.5.3&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- mysql驱动包 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.8&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- junit测试包 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 日志包，方便看sql语句 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.6.1&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明：</p><p>5.<build> 因为Maven默认只编译resource下面的文件 ，</p><p>​                    不会去编译java下面的xml 或者properties文件。</p><p>​                   所以会报错：文件找不到，那么为了解决这个问题 添加build标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">【第一种方案：将mapper映射文件放在src/main/resource/同名文件夹下】</span><br><span class="line">【第二种方案：添加build，让mapper映射文件继续放在src/main/java/文件夹下 但是maven项目不推荐使用】</span><br><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;resources&gt;</span><br><span class="line">        &lt;resource&gt;</span><br><span class="line">            &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">            &lt;/includes&gt;</span><br><span class="line">            &lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">        &lt;/resource&gt;</span><br><span class="line">        &lt;resource&gt;</span><br><span class="line">            &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">                &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">            &lt;/includes&gt;</span><br><span class="line">        &lt;/resource&gt;</span><br><span class="line">    &lt;/resources&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><h2 id="C-创建SqlMapConfig-xml全局配置文件"><a href="#C-创建SqlMapConfig-xml全局配置文件" class="headerlink" title="C.创建SqlMapConfig.xml全局配置文件"></a>C.创建SqlMapConfig.xml全局配置文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 配置数据源 --&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/test&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 加载映射文件： --&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=&quot;com/msb/pojo/DeptMapper.xml&quot;/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>说明：</p><p>====如何设置可以让idea平台直接创建核心配置文件 和 mapper映射文件？</p><p><a href="https://blog.csdn.net/weixin_40689822/article/details/81909380">https://blog.csdn.net/weixin_40689822/article/details/81909380</a>  该网址提供解决方案。</p><h2 id="D-创建实体类"><a href="#D-创建实体类" class="headerlink" title="D.创建实体类"></a>D.创建实体类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class Dept &#123;</span><br><span class="line">    private Integer deptno;</span><br><span class="line">    private String dname;</span><br><span class="line">    private String loc;</span><br><span class="line"></span><br><span class="line">    public Integer getDeptno() &#123;</span><br><span class="line">        return deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDeptno(Integer deptno) &#123;</span><br><span class="line">        this.deptno = deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDname() &#123;</span><br><span class="line">        return dname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDname(String dname) &#123;</span><br><span class="line">        this.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getLoc() &#123;</span><br><span class="line">        return loc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setLoc(String loc) &#123;</span><br><span class="line">        this.loc = loc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Dept() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Dept(Integer deptno, String dname, String loc) &#123;</span><br><span class="line">        this.deptno = deptno;</span><br><span class="line">        this.dname = dname;</span><br><span class="line">        this.loc = loc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-创建mapper-xml映射文件"><a href="#E-创建mapper-xml映射文件" class="headerlink" title="E.创建mapper.xml映射文件"></a>E.创建mapper.xml映射文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;com.msb.pojo.Dept&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id=&quot;addDept&quot; parameterType=&quot;String&quot;&gt;</span><br><span class="line"></span><br><span class="line">        insert into Dept(dname) values(#&#123;dname&#125;)</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;selectDept&quot;  resultType=&quot;com.msb.pojo.Dept&quot;&gt;</span><br><span class="line">         select * from dept</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h2 id="F-创建Junit测试类："><a href="#F-创建Junit测试类：" class="headerlink" title="F.创建Junit测试类："></a>F.创建Junit测试类：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class MyBatisTest &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void insert() throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        //1.加载配置文件</span><br><span class="line">            InputStream is= Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);</span><br><span class="line"></span><br><span class="line">        //2.获得session对象，建立会话连接</span><br><span class="line">            SqlSessionFactoryBuilder builder=new SqlSessionFactoryBuilder();</span><br><span class="line">            SqlSessionFactory factory=builder.build(is);</span><br><span class="line">            SqlSession session=factory.openSession();</span><br><span class="line">            </span><br><span class="line">        //3.调用session方法，获得结果信息    </span><br><span class="line">            List&lt;Dept&gt; list=session.selectList(&quot;selectDept&quot;);</span><br><span class="line">            for(Dept d:list)&#123;</span><br><span class="line">                System.out.println(d.getDeptno()+&quot;;&quot;+d.getDname()+&quot;;&quot;+d.getLoc());</span><br><span class="line">            &#125;</span><br><span class="line">       //4.关闭session对象资源     </span><br><span class="line">            session.close();</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先在SqlSessionFactoryBuilder的build（）方法中可以看到MyBatis内部定义了一个类XMLConfigBuilder用来解析配置文件mybatis-config.xml。针对配置文件中的每一个节点进行解析并将数据存放到Configuration这个对象中，紧接着使用带有Configuration的构造方法发返回一个DefautSqlSessionFactory。</p><h2 id="G-添加log4j-查看生成的sql语句"><a href="#G-添加log4j-查看生成的sql语句" class="headerlink" title="G.添加log4j 查看生成的sql语句"></a>G.添加log4j 查看生成的sql语句</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - Logging initialized using &#x27;class org.apache.ibatis.logging.slf4j.Slf4jImpl&#x27; adapter.</span><br><span class="line">DEBUG [main] - PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">DEBUG [main] - PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">DEBUG [main] - PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">DEBUG [main] - PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">DEBUG [main] - Opening JDBC Connection</span><br><span class="line">DEBUG [main] - Created connection 1256728724.</span><br><span class="line">DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@4ae82894]</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: select * from dept </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: </span><br><span class="line">DEBUG [main] - &lt;==      Total: 3</span><br><span class="line">10;开发部;沈阳</span><br><span class="line">20;实施部;长春</span><br><span class="line">30;运维部;北京</span><br><span class="line">DEBUG [main] - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@4ae82894]</span><br><span class="line">DEBUG [main] - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@4ae82894]</span><br><span class="line">DEBUG [main] - Returned connection 1256728724 to pool.</span><br></pre></td></tr></table></figure><h1 id="5-MyBatis核心配置文件讲解"><a href="#5-MyBatis核心配置文件讲解" class="headerlink" title="5.MyBatis核心配置文件讲解"></a>5.MyBatis核心配置文件讲解</h1><p>​         MyBatis的核心配置文件包含了会深深影响MyBatis行为的设置和属性信息。</p><p>​        那MyBatis的核心配置文件到底长什么样子呢？我们借助核心配置文件的文档类型定义和中文帮助文档一起来学习一下。首先下载一份核心配置文件的文档类型定义，记事本打开，简单介绍一下。</p><p>​       然后我们结合着帮助文档一起来实际操作一下：</p><h2 id="5-1properties-属性"><a href="#5-1properties-属性" class="headerlink" title="5.1properties 属性"></a>5.1properties 属性</h2><h3 id="使用方式一："><a href="#使用方式一：" class="headerlink" title="使用方式一："></a>使用方式一：</h3><p>​    A.将数据源中四要素提取出来，成为全局变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties &gt;</span><br><span class="line">    &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/test&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure><p>​       B.  使用变量调用的方式 获得四要素的属性值            </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">    &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">    &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br><span class="line">    &lt;/dataSource&gt;</span><br><span class="line">&lt;/environment&gt;</span><br></pre></td></tr></table></figure><h3 id="使用方式二：推荐使用"><a href="#使用方式二：推荐使用" class="headerlink" title="使用方式二：推荐使用"></a>使用方式二：推荐使用</h3><p>​              A：在src/main/resources/下创建一个属性文件，一般取名为jdbc.properties。然后在该属性文件中保存四要素信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://127.0.0.1:3306/test1</span><br><span class="line">username=root</span><br><span class="line">password=root</span><br></pre></td></tr></table></figure><p>​              B：使用properties 标签加载属性文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties resource=&quot;jdbc.properties&quot;&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure><p>​            说明：</p><p>​            resource属性：常用 —-&gt; 指定配置文件的位置，是按照类路径的写法来写，并且必须存在于类路径下。</p><p>​            url属性： 按照统一资源标识符的写法来写地址</p><p>​          C：使用变量调用的方式 获得四要素的属性值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">    &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">    &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br><span class="line">    &lt;/dataSource&gt;</span><br><span class="line">&lt;/environment&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><p>假设需要临时更改url访问路径，我们可以在 properties  标签中设置新的属性值，但是有一个问题要注意就是不能同名！</p><p>因为MyBatis加载属性的顺序是：A。先加载properties 元素内指定的属性。</p><p>​                                                         B。再加载properties元素中  resource属性值所对应的属性文件里的值，并覆盖之前读取的同名变量。</p><p>​                                                         C。最后读取作为方法参数传递的属性，并覆盖之前读取的同名变量。（稍后解释）</p><p>所以如果想通过修改properties 元素修改指定的属性值，需要设置不同的名字如url123，例子如下：</p><pre><code>&lt;properties resource=&quot;jdbc.properties&quot;&gt;    &lt;property name=&quot;url123&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/test123&quot;/&gt;&lt;/properties&gt;    &lt;environment id=&quot;development&quot;&gt;        &lt;transactionManager type=&quot;JDBC&quot;/&gt;        &lt;dataSource type=&quot;POOLED&quot;&gt;            &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;            &lt;property name=&quot;url&quot; value=&quot;$&#123;url123&#125;&quot;/&gt;            &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;            &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;        &lt;/dataSource&gt;    &lt;/environment&gt;</code></pre><h3 id="使用方式三：做为了解"><a href="#使用方式三：做为了解" class="headerlink" title="使用方式三：做为了解"></a>使用方式三：做为了解</h3><p>​        也可以在 SqlSessionFactoryBuilder.build() 方法中传入属性值  </p><p>​        A.多添加一个数据源环境：此时配置文件中，设置使用的数据源是id=“development”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">    &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">        &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">        &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br><span class="line">        &lt;/dataSource&gt;</span><br><span class="line">    &lt;/environment&gt;</span><br><span class="line">    &lt;environment id=&quot;development123&quot;&gt;</span><br><span class="line">        &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">        &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br><span class="line">        &lt;/dataSource&gt;</span><br><span class="line">    &lt;/environment&gt;</span><br><span class="line">&lt;/environments&gt;</span><br></pre></td></tr></table></figure><p>​     B.编写代码：通过代码 动态设置使用development123 数据源环境。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">InputStream resource= Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);</span><br><span class="line">SqlSessionFactoryBuilder builder=new SqlSessionFactoryBuilder();</span><br><span class="line">SqlSessionFactory factory=builder.build(resource,&quot;development123&quot;);</span><br></pre></td></tr></table></figure><h3 id="额外补充："><a href="#额外补充：" class="headerlink" title="额外补充："></a>额外补充：</h3><p>为四要素设置默认值，假设属性 ‘username’ 没有被配置，设置’username’ 属性的默认值为 ‘ut_user’ </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties &gt;</span><br><span class="line">    &lt;property name=&quot;org.apache.ibatis.parsing.PropertyParser.enable-default-value&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">    &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">        &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">        &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;username&quot; value=&quot;$&#123;username:ut_user&#125;&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br><span class="line">        &lt;/dataSource&gt;</span><br><span class="line">    &lt;/environment&gt;</span><br><span class="line"> &lt;/environments&gt;  </span><br></pre></td></tr></table></figure><h2 id="5-2-settings设置"><a href="#5-2-settings设置" class="headerlink" title="5.2 settings设置"></a>5.2 settings设置</h2><p>MyBatis框架在运行时可以调整一些运行参数，比如：开启二级缓存，开启延迟加载等。</p><p>介绍几个后面会用到的属性：</p><p>cacheEnabled   ：开启二级缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure><p>lazyLoadingEnabled ：开启延迟加载/懒加载   “针对级联使用的”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure><p>aggressiveLazyLoading ：3.4.1（包含）前为true，之后为false。它是控制具有懒加载特性的对象的属性的加载情况的。</p><p>​            true表示如果对具有懒加载特性的对象的任意调用会导致这个对象的完整加载，false表示每种属性按照需要加载。       “属性”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="5-3-typeAliases-类型别名"><a href="#5-3-typeAliases-类型别名" class="headerlink" title="5.3 typeAliases 类型别名"></a>5.3 typeAliases 类型别名</h2><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。</p><p>举个例子：</p><p>在如下mapper映射文件中，resultType的值为全限定类名；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectAllDept&quot; resultType=&quot;com.msb.pojo.Dept&quot;&gt;</span><br><span class="line">     select * from dept</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>如果再有一个例子，根据主键查找该对象，resultType的值仍然为全限定类名；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectAllDept&quot; resultType=&quot;com.msb.pojo.Dept&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">     select * from dept where deptno=#&#123;deptno&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>所以 ，为了降低冗余的全限定类名  进行如下配置，</p><h3 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h3><p>alias 别名；type类型；当这样设置完，dept可以用在任何使用com.msb.pojo.Dept的地方。一般多用于mapper.xml中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">  &lt;typeAlias alias=&quot;dept&quot; type=&quot;com.msb.pojo.Dept&quot;/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure><h3 id="方式二：推荐使用"><a href="#方式二：推荐使用" class="headerlink" title="方式二：推荐使用"></a>方式二：推荐使用</h3><p>也可以直接设置一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，那别名是什么呢？</p><p>如果实体类中没有设置@Alias(“author”) 该注解，那么该实体类的别名就是首字母小写的名字；</p><p>如果实体类中有@Alias(“author”) 该注解，那么该实体类的别名就是 注解中设置的名字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">  &lt;package name=&quot;com.msb.pojo&quot;/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure><h2 id="5-4-typeHandlers类型处理器-了解"><a href="#5-4-typeHandlers类型处理器-了解" class="headerlink" title="5.4 typeHandlers类型处理器 (了解)"></a>5.4 typeHandlers类型处理器 (了解)</h2><p>​        MyBatis 在   设置预处理语句（PreparedStatement）中的参数     或从     结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式完成jdbc类型和java类型的转换。 从 3.4.5 开始，MyBatis 默认支持 JSR-310（日期和时间  API） 。 通常情况下，MyBatis提供的类型处理器满足日常的需求，不需要自定义。</p><h2 id="5-5-objectFactory-对象工厂-了解"><a href="#5-5-objectFactory-对象工厂-了解" class="headerlink" title="5.5 objectFactory 对象工厂(了解)"></a>5.5 objectFactory 对象工厂(了解)</h2><p>​        每次 MyBatis 创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成实例化工作。  默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认无参构造方法，要么通过存在的参数映射来调用带有参数的构造方法。  如果想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂来实现。   但是通常我们不进行自定义，直接使用MyBatis提供的对象工厂。</p><h2 id="5-6-plugins-插件-了解"><a href="#5-6-plugins-插件-了解" class="headerlink" title="5.6 plugins 插件(了解)"></a>5.6 plugins 插件(了解)</h2><p>MyBatis 允许你在映射语句执行过程中的某一点进行拦截调用。但很可能会破坏 MyBatis 的核心模块。 这些都是更底层的类和方法，所以使用插件的时候要特别当心。这可能会极大影响 MyBatis 的行为，务请慎之又慎。</p><h2 id="5-7-environments-环境配置"><a href="#5-7-environments-环境配置" class="headerlink" title="5.7 environments 环境配置"></a>5.7 environments 环境配置</h2><p>​        MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中。现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；<strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong>所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例。</p><p>​        那要如何创建两个SqlSessionFactory 实例？</p><p>为了指定创建哪种环境，只要将它作为可选的参数传递给 SqlSessionFactoryBuilder 即可。可以接受环境配置的两个方法名是： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment);</span><br><span class="line">SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, properties);</span><br><span class="line">reader：读取的全局XML配置文件的输入流，配置信息都在这个文件中；</span><br><span class="line">environment：指定的此SqlSessionFactory的数据库环境，默认为default；</span><br><span class="line">properties：设置一些动态化常量，会和XML中的properties 中常量合并在一起；</span><br></pre></td></tr></table></figure><p>​        </p><h3 id="5-7-1-environments-元素定义了如何配置环境。"><a href="#5-7-1-environments-元素定义了如何配置环境。" class="headerlink" title="5.7.1 environments 元素定义了如何配置环境。"></a>5.7.1 environments 元素定义了如何配置环境。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">    &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">        &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">        &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br><span class="line">        &lt;/dataSource&gt;</span><br><span class="line">    &lt;/environment&gt;</span><br><span class="line">&lt;/environments&gt;</span><br></pre></td></tr></table></figure><p>注意几个关键点：</p><p>A.默认使用的环境 ID 叫development</p><p>B.每个 environment 元素都要定义一个环境 ID</p><p>===环境ID可以随意命名，但务必保证默认的环境 ID 要匹配其中一个。 </p><p>C.事务管理器的配置</p><p>​    在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）：</p><p>​    JDBC：这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域</p><p>   Manager：这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如Spring, JEE 应用服务器                        的上下文）。 </p><p>   <strong>然后和 Spring 整合后environments 配置将废除。</strong> </p><p>D.数据源的配置</p><p>有三种数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）：</p><p>​     UNPOOLED：如果将类型设置成UNPOOLED，mybaties会为每一个数据库操作创建一个新的连接，并关闭它。该方式适用于只有小规模数量并发用户的简单应用程序上。</p><p>​     POOLED：如果将属性设置成POOLED，mybaties会创建一个数据库连接池，连接池的一个连接将会被用作数据库操作。一旦数据库操作完成，mybaties会将此连接返回给连接池。在开发或测试环境中经常用到此方式。</p><p>​     JNDI：如果将类型设置成JNDI。mybaties会从在应用服务器向配置好的JNDI数据源DataSource获取数据库连接。</p><h1 id="5-8-mappers映射器"><a href="#5-8-mappers映射器" class="headerlink" title="5.8 mappers映射器"></a>5.8 mappers映射器</h1><p> MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。  在<strong>自动查找资源方面</strong>，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。  你可以使用<strong>相对于类路径的资源引用</strong>，或<strong>完全限定资源定位符</strong>（包括 <code>file:///</code> 形式的 URL），或<strong>类名和包名</strong>等。例如： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">  &lt;mapper resource=&quot;org/mybatis/builder/AuthorMapper.xml&quot;/&gt;</span><br><span class="line">  &lt;mapper resource=&quot;org/mybatis/builder/BlogMapper.xml&quot;/&gt;</span><br><span class="line">  &lt;mapper resource=&quot;org/mybatis/builder/PostMapper.xml&quot;/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">  &lt;mapper url=&quot;file:///var/mappers/AuthorMapper.xml&quot;/&gt;</span><br><span class="line">  &lt;mapper url=&quot;file:///var/mappers/BlogMapper.xml&quot;/&gt;</span><br><span class="line">  &lt;mapper url=&quot;file:///var/mappers/PostMapper.xml&quot;/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">  &lt;mapper class=&quot;org.mybatis.builder.AuthorMapper&quot;/&gt;</span><br><span class="line">  &lt;mapper class=&quot;org.mybatis.builder.BlogMapper&quot;/&gt;</span><br><span class="line">  &lt;mapper class=&quot;org.mybatis.builder.PostMapper&quot;/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">  &lt;package name=&quot;org.mybatis.builder&quot;/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br><span class="line">===其中后两种方式 适合应用在mapper代理模式下！</span><br></pre></td></tr></table></figure><p>这些配置会告诉 MyBatis 去哪里找映射文件，剩下的细节就应该是每个 SQL 映射文件了，也就是接下来我们要讨论的。</p><h1 id="6-Mapper-xml映射文件讲解"><a href="#6-Mapper-xml映射文件讲解" class="headerlink" title="6.Mapper.xml映射文件讲解"></a>6.Mapper.xml映射文件讲解</h1><p>​        MyBatis 的真正强大在于它的语句映射，这是它的魔力所在。由于它的异常强大，映射器的 XML 文件就显得相对简单。如果拿它跟具有相同功能的 JDBC  代码进行对比，你会立即发现省掉了将近 95% 的代码。MyBatis 致力于减少使用成本，让用户能更专注于 SQL 代码。</p><p>​        那Mapper.xml映射文件到底长什么样子呢？我们借助Mapper.xml映射文件的文档类型定义和中文帮助文档一起来学习一下。首先下载一份核心配置文件的文档类型定义，记事本打开，简单介绍一下。</p><p>SQL 映射文件只有很少的几个顶级元素（按照应被定义的顺序列出）：</p><ul><li><code>cache</code> – 该命名空间的缓存配置。 <strong>—-缓存处理</strong></li><li><code>cache-ref</code> – 引用其它命名空间的缓存配置。 <strong>—–缓存处理</strong></li><li><code>resultMap</code> – 描述如何从数据库结果集中加载对象，是最复杂也是最强大的元素。 <strong>—-关联关系映射</strong></li><li><del><code>parameterMap</code> –  老式风格的参数映射。此元素已被废弃，并可能在将来被移除！请使用行内参数映射。文档中不会介绍此元素。</del> </li><li><code>sql</code> – 可被其它语句引用的可重用语句块。  <strong>—-动态sql语句</strong></li><li><code>insert</code> – 映射插入语句。 </li><li><code>update</code> – 映射更新语句。 </li><li><code>delete</code> – 映射删除语句。 </li><li><code>select</code> – 映射查询语句。 </li></ul><h2 id="6-1-select-查询"><a href="#6-1-select-查询" class="headerlink" title="6.1 select 查询"></a>6.1 select 查询</h2><p>查询语句是 MyBatis 中最常用的元素之一</p><p>一个简单查询的 select 元素是非常简单的。比如： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectDept&quot; parameterType=&quot;int&quot; resultType=&quot;dept&quot;&gt;</span><br><span class="line">  SELECT * FROM Dept WHERE deptno = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;selectDept&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;dept&quot;&gt;</span><br><span class="line">  SELECT * FROM Dept WHERE dname = #&#123;name&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;selectDept&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;dept&quot;&gt;</span><br><span class="line">  SELECT * FROM Dept WHERE dname = $&#123;name&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">===输出参数是  开发部  </span><br><span class="line">   #&#123; &#125;-----“开发部”   </span><br><span class="line">   $&#123; &#125;----- 开发部 or &#x27;1=1&#x27;</span><br><span class="line">   </span><br><span class="line">&lt;select id=&quot;selectDept&quot; parameterType=&quot;dept&quot; resultType=&quot;dept&quot;&gt;</span><br><span class="line">  SELECT * FROM Dept WHERE dname = #&#123;dname&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Caaa.png" alt="aaa"></p><table><thead><tr><th><code>id</code></th><th>在命名空间中唯一的标识符，可以被用来引用这条语句。</th></tr></thead><tbody><tr><td><code>parameterType</code></td><td>将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis  可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td></tr><tr><td><del>parameterMap</del></td><td><del>用于引用外部 parameterMap 的属性，目前已被废弃。请使用行内参数映射和 parameterType 属性。</del></td></tr><tr><td><code>resultType</code></td><td>期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。 resultType 和  resultMap 之间只能同时使用一个。</td></tr><tr><td><code>resultMap</code></td><td>对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。  resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td><code>flushCache</code></td><td>将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：false。</td></tr><tr><td><code>useCache</code></td><td>将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true。</td></tr></tbody></table><p>然后我们来说一下sql语句中的<code>parameterType</code></p><p>1.parameterType后的类型可以是基本类型int,String,HashMap和java自定义类型。</p><p>2.占位符号和名字：</p><p> 【占位符号：】   </p><p>#{  }  ,  ${  } 区别在于 </p><p>​        #{}是预编译处理，$ {}是字符串替换。mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；  mybatis在处理 $ { } 时，就是把 ${ } 替换成变量的值。使用 #{} 可以有效的防止SQL注入，提高系统安全性。但是表名用参数传递进来的时候，只能使用 ${}</p><p>【名字】</p><p>​       如果是简单类型，参数名可以任意；</p><p>​      如果是pojo类型，参数名必须是pojo中的属性名。</p><h2 id="6-2-insert语句"><a href="#6-2-insert语句" class="headerlink" title="6.2 insert语句"></a>6.2 insert语句</h2><p>例子1：简单的添加语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;insertAuthor&quot; parameterType=&quot;author&quot;&gt;</span><br><span class="line">  insert into Author (id,username,password,email,bio)</span><br><span class="line">  values (#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;bio&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th><code>id</code></th><th>在命名空间中唯一的标识符，可以被用来引用这条语句。</th></tr></thead><tbody><tr><td><code>parameterType</code></td><td>将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis  可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td></tr><tr><td><del><code>parameterMap</code></del></td><td><del>用于引用外部 parameterMap 的属性，目前已被废弃。请使用行内参数映射和 parameterType 属性。</del></td></tr><tr><td><code>flushCache</code></td><td>将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：（对 insert、update 和 delete 语句）true。</td></tr></tbody></table><p>例子2：主键自增语句</p><p>插入语句的配置规则更加丰富，在插入语句里面有一些额外的属性和子元素用来处理主键的生成，并且提供了多种生成方式。</p><p>首先，如果你的数据库支持自动生成主键的字段（比如 MySQL 和 SQL Server），那么你可以设置  useGeneratedKeys=”true”，然后再把 keyProperty 设置为目标属性就 OK 了。例如，如果上面的 Author 表已经在 id  列上使用了自动生成，那么语句可以修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;insertAuthor&quot; useGeneratedKeys=&quot;true&quot;</span><br><span class="line">    keyProperty=&quot;id&quot;&gt;</span><br><span class="line">  insert into Author (username,password,email,bio)</span><br><span class="line">  values (#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;bio&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line"></span><br><span class="line"> public void insertuseGeneratedKeys()&#123;</span><br><span class="line"></span><br><span class="line">        SqlSession session=factory.openSession();</span><br><span class="line">        Dept dept=new Dept();</span><br><span class="line">        dept.setDname(&quot;开发2组&quot;);</span><br><span class="line">        dept.setLoc(&quot;成都&quot;);</span><br><span class="line">        int i=session.insert(&quot;insertuseGeneratedKeys&quot;,dept);</span><br><span class="line">        //注意：session 进行手动提交</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        System.out.println(i==1?&quot;添加成功&quot;:&quot;添加失败&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-update，delete语句"><a href="#6-3-update，delete语句" class="headerlink" title="6.3 update，delete语句"></a>6.3 update，delete语句</h2><p>例子1：插入，删除语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=&quot;updateAuthor&quot; parameterType=&quot;author&quot;&gt;</span><br><span class="line">  update Author set</span><br><span class="line">    username = #&#123;username&#125;,</span><br><span class="line">    password = #&#123;password&#125;,</span><br><span class="line">    email = #&#123;email&#125;,</span><br><span class="line">    bio = #&#123;bio&#125;</span><br><span class="line">  where id = #&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br><span class="line"></span><br><span class="line">&lt;delete id=&quot;deleteAuthor&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">  delete from Author where id = #&#123;id&#125;</span><br><span class="line">&lt;/delete&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void updateDept()&#123;</span><br><span class="line">        SqlSession session=factory.openSession();</span><br><span class="line">        Dept dept=new Dept();</span><br><span class="line">        dept.setDeptno(32);</span><br><span class="line">        dept.setLoc(&quot;沈阳&quot;);</span><br><span class="line">        int i= session.update(&quot;updDeptByid&quot;,dept);</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        System.out.println(i==1?&quot;修改成功&quot;:&quot;修改失败&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void deleteDept()&#123;</span><br><span class="line">        SqlSession session=factory.openSession();</span><br><span class="line">        int i= session.delete(&quot;delDeptByid&quot;,32);</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        System.out.println(i==1?&quot;删除成功&quot;:&quot;删除失败&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="7-MyBatis-Mapper代理开发Dao层"><a href="#7-MyBatis-Mapper代理开发Dao层" class="headerlink" title="7.MyBatis Mapper代理开发Dao层"></a>7.MyBatis Mapper代理开发Dao层</h1><h2 id="7-1-MyBatis-原始模式开发Dao层："><a href="#7-1-MyBatis-原始模式开发Dao层：" class="headerlink" title="7.1 MyBatis 原始模式开发Dao层："></a>7.1 MyBatis 原始模式开发Dao层：</h2><h3 id="A-创建Maven项目，添加jar包依赖"><a href="#A-创建Maven项目，添加jar包依赖" class="headerlink" title="A.创建Maven项目，添加jar包依赖"></a>A.创建Maven项目，添加jar包依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!-- mybatis核心包--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.5.3&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- mysql驱动包 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.8&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- junit测试包 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 日志包，方便看sql语句 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.6.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="B-编写mybatis的核心配置文件：SqlMapConfig-xml"><a href="#B-编写mybatis的核心配置文件：SqlMapConfig-xml" class="headerlink" title="B.编写mybatis的核心配置文件：SqlMapConfig.xml"></a>B.编写mybatis的核心配置文件：SqlMapConfig.xml</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 加载属性文件--&gt;</span><br><span class="line">    &lt;properties resource=&quot;config.properties&quot;&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;!-- 配置数据源环境--&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;!-- 配置mapper映射文件地址 --&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=&quot;com/msb/dao/DeptDao.xml&quot;/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="C-实体类：Dept"><a href="#C-实体类：Dept" class="headerlink" title="C.实体类：Dept"></a>C.实体类：Dept</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public class Dept &#123;</span><br><span class="line"></span><br><span class="line">private Integer deptno;</span><br><span class="line"></span><br><span class="line">private String dname;</span><br><span class="line"></span><br><span class="line">private String loc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Integer getDeptno() &#123;</span><br><span class="line">        return deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDeptno(Integer deptno) &#123;</span><br><span class="line">        this.deptno = deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDname() &#123;</span><br><span class="line">        return dname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDname(String dname) &#123;</span><br><span class="line">        this.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getLoc() &#123;</span><br><span class="line">        return loc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setLoc(String loc) &#123;</span><br><span class="line">        this.loc = loc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Dept() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Dept(Integer deptno, String dname, String loc) &#123;</span><br><span class="line">        this.deptno = deptno;</span><br><span class="line">        this.dname = dname;</span><br><span class="line">        this.loc = loc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D-写接口："><a href="#D-写接口：" class="headerlink" title="D.写接口："></a>D.写接口：</h3><pre><code>public interface DeptDao &#123;         List&lt;Dept&gt; selectDept() throws Exception;         Dept selectDeptByid(int id) throws Exception;         int updateDept(Dept dept) throws Exception;&#125;</code></pre><h3 id="E-写映射文件："><a href="#E-写映射文件：" class="headerlink" title="E.写映射文件："></a>E.写映射文件：</h3><p>​    在src/main/resources/下创建com.msb.dao包下创建DeptDao.xml映射文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace=&quot;com.msb.dao&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;selectAllDept&quot; resultType=&quot;dept&quot;&gt;</span><br><span class="line">         select * from dept</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;selectDeptById&quot; parameterType=&quot;int&quot; resultType=&quot;dept&quot;&gt;</span><br><span class="line">        select * from dept where deptno=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;update id=&quot;updateDept&quot; parameterType=&quot;dept&quot;&gt;</span><br><span class="line">        update dept set dname=#&#123;dname&#125;,loc=#&#123;loc&#125; where deptno=#&#123;deptno&#125;</span><br><span class="line"></span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h3 id="F-写接口的实现类："><a href="#F-写接口的实现类：" class="headerlink" title="F.写接口的实现类："></a>F.写接口的实现类：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class DeptDaoImpl implements DeptDao &#123;</span><br><span class="line"></span><br><span class="line">    private SqlSessionFactory sessionFactory;</span><br><span class="line">    public DeptDaoImpl(SqlSessionFactory sessionFactory)&#123;</span><br><span class="line">        this.sessionFactory=sessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;Dept&gt; selectDept() throws Exception &#123;</span><br><span class="line">      SqlSession session= sessionFactory.openSession();</span><br><span class="line">      List&lt;Dept&gt; list=session.selectList(&quot;selectAllDept&quot;);</span><br><span class="line">      session.close();</span><br><span class="line">      return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Dept selectDeptByid(int id)throws Exception &#123;</span><br><span class="line">        SqlSession session= sessionFactory.openSession();</span><br><span class="line">        Dept dept=session.selectOne(&quot;selectDeptById&quot;);</span><br><span class="line">        session.close();</span><br><span class="line">        return dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int updateDept(Dept dept)throws Exception &#123;</span><br><span class="line">        SqlSession session= sessionFactory.openSession();</span><br><span class="line">        int i=session.update(&quot;updateDept&quot;);</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        return i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="G-编写测试类："><a href="#G-编写测试类：" class="headerlink" title="G.编写测试类："></a>G.编写测试类：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">private SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">// 此方法是在执行testFindUserById之前执行</span><br><span class="line">@Before</span><br><span class="line">public void setUp() throws Exception &#123;</span><br><span class="line">    // 创建sqlSessionFactory</span><br><span class="line"></span><br><span class="line">    // mybatis配置文件</span><br><span class="line">    String resource = &quot;SqlMapConfig.xml&quot;;</span><br><span class="line">    // 得到配置文件流</span><br><span class="line">    InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"></span><br><span class="line">    // 创建会话工厂，传入mybatis的配置文件信息</span><br><span class="line">    sqlSessionFactory = new SqlSessionFactoryBuilder()</span><br><span class="line">            .build(inputStream);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testFindUserById() throws Exception &#123;</span><br><span class="line">    // 创建UserDao的对象</span><br><span class="line">    DeptDao deptDao = new DeptDaoImpl(sqlSessionFactory);</span><br><span class="line">    // 调用UserDao的方法</span><br><span class="line">    Dept dept = deptDao.selectDeptByid(10);</span><br><span class="line">    System.out.println(dept.getDeptno()+&quot;;&quot;+dept.getDname()+&quot;;&quot;+dept.getLoc());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-原始的Dao层开发的缺点："><a href="#总结-原始的Dao层开发的缺点：" class="headerlink" title="总结:原始的Dao层开发的缺点："></a>总结:原始的Dao层开发的缺点：</h3><pre><code>1.dao接口实现类方法中存在大量模板方法，设想能否将这些代码提取出来，大大减轻程序员的工作量。2.调用sqlsession的方法时 将statement的id硬编码了。3.调用sqlsession的方法时 传入的变量和接收的返回值使用了泛型，这样即使变量类型传入或者接收错误，在编译阶段也不报错，不利于程序员开发。</code></pre><h2 id="7-2-MyBatis-Mapper代理开发Dao层："><a href="#7-2-MyBatis-Mapper代理开发Dao层：" class="headerlink" title="7.2 MyBatis  Mapper代理开发Dao层："></a>7.2 MyBatis  Mapper代理开发Dao层：</h2><h3 id="7-2-1Mapper代理开发原因"><a href="#7-2-1Mapper代理开发原因" class="headerlink" title="7.2.1Mapper代理开发原因"></a>7.2.1Mapper代理开发原因</h3><p>​    1.程序员只需要写mapper接口和mapper.xml映射文件，MyBatis可以自动生成mapper接口实现类代理对象。</p><p>​    2.只不过程序员在编写mapper接口时 需要遵循一些开发规范：</p><pre><code>      1.mapper.java接口名 跟 mapper.xml映射文件名相同并且在同一个包下。      2.在mapper.xml映射文件中，namespace=&quot;mapper接口地址&quot; --完全包名.mapper接口名。        3.mapper.java接口中的方法名和mapper.xml中statement的id值一致。      4.mapper.java接口中的方法输入参数类型 和 mapper.xml中statement的parameterType指定的类型一致      5.mapper.java接口中的方法返回值类型 和 mapper.xml中statement的resultType指定的类型一致      6.SqlMapConfig.xml 配置文件中 ---由于使用mapper代理方式，改为加载mapper接口！</code></pre><h3 id="7-2-2-Mapper代理开发过程"><a href="#7-2-2-Mapper代理开发过程" class="headerlink" title="7.2.2 Mapper代理开发过程"></a>7.2.2 Mapper代理开发过程</h3><h4 id="A-创建Maven项目，添加jar包依赖-1"><a href="#A-创建Maven项目，添加jar包依赖-1" class="headerlink" title="A.创建Maven项目，添加jar包依赖"></a>A.创建Maven项目，添加jar包依赖</h4><p>​     没改动</p><h4 id="B-编写mybatis的核心配置文件：SqlMapConfig-xml-1"><a href="#B-编写mybatis的核心配置文件：SqlMapConfig-xml-1" class="headerlink" title="B.编写mybatis的核心配置文件：SqlMapConfig.xml"></a>B.编写mybatis的核心配置文件：SqlMapConfig.xml</h4><p>​     有改动！</p><p>原来的样子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置mapper映射文件地址 --&gt;</span><br><span class="line">   &lt;mappers&gt;</span><br><span class="line">       &lt;mapper resource=&quot;com/msb/dao/DeptDao.xml&quot;/&gt;</span><br><span class="line">   &lt;/mappers&gt;</span><br></pre></td></tr></table></figure><p>现在的样子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">  &lt;mapper class=&quot;com.msb.mapper.DeptMapper&quot;/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">  &lt;package name=&quot;com.msb.mapper&quot;/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure><h4 id="C-实体类：Dept-1"><a href="#C-实体类：Dept-1" class="headerlink" title="C.实体类：Dept"></a>C.实体类：Dept</h4><p>​     没改动</p><h4 id="D-写接口：-1"><a href="#D-写接口：-1" class="headerlink" title="D.写接口："></a>D.写接口：</h4><p>​    有改动！</p><p>​    在src/main/java/下创建com.msb.mapper包下创建DeptMapper.java接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public interface DeptMapper &#123;</span><br><span class="line">    List&lt;Dept&gt; selectDept() throws Exception;</span><br><span class="line"></span><br><span class="line">    Dept selectDeptByid(int id) throws Exception;</span><br><span class="line"></span><br><span class="line">    int updateDept(Dept dept) throws Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="E-写映射文件：-1"><a href="#E-写映射文件：-1" class="headerlink" title="E.写映射文件："></a>E.写映射文件：</h4><p>​      有改动！</p><p>​     在src/main/resources/下创建com.msb.mapper包下创建DeptMapper.xml映射文件</p><p>​    遵守如下规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.在mapper.xml映射文件中，namespace=&quot;mapper接口地址&quot; --完全包名.mapper接口名。</span><br><span class="line">  </span><br><span class="line">2.mapper.java接口中的方法名和mapper.xml中statement的id值一致。</span><br><span class="line"></span><br><span class="line">3.mapper.java接口中的方法输入参数类型 和 mapper.xml中statement的parameterType指定的类型一致</span><br><span class="line"></span><br><span class="line">4.mapper.java接口中的方法返回值类型 和 mapper.xml中statement的resultType指定的类型一致</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace=&quot;com.msb.mapper.DeptMapper&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;selectDept&quot; resultType=&quot;dept&quot;&gt;</span><br><span class="line">        select * from dept</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;selectDeptByid&quot; parameterType=&quot;int&quot; resultType=&quot;dept&quot;&gt;</span><br><span class="line">        select * from dept where deptno=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;update id=&quot;updateDept&quot; parameterType=&quot;dept&quot;&gt;</span><br><span class="line">        update dept set dname=#&#123;dname&#125;,loc=#&#123;loc&#125; where deptno=#&#123;deptno&#125;</span><br><span class="line"></span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h4 id="F-写接口的实现类：-1"><a href="#F-写接口的实现类：-1" class="headerlink" title="F.写接口的实现类："></a>F.写接口的实现类：</h4><p>​    不存在了！</p><h4 id="G-编写测试类：-1"><a href="#G-编写测试类：-1" class="headerlink" title="G.编写测试类："></a>G.编写测试类：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> private SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line"> // 此方法是在执行testFindUserById之前执行</span><br><span class="line"> @Before</span><br><span class="line"> public void setUp() throws Exception &#123;</span><br><span class="line">     // 创建sqlSessionFactory</span><br><span class="line"></span><br><span class="line">     // mybatis配置文件</span><br><span class="line">     String resource = &quot;SqlMapConfig.xml&quot;;</span><br><span class="line">     // 得到配置文件流</span><br><span class="line">     InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"></span><br><span class="line">     // 创建会话工厂，传入mybatis的配置文件信息</span><br><span class="line">     sqlSessionFactory = new SqlSessionFactoryBuilder()</span><br><span class="line">             .build(inputStream);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> @Test</span><br><span class="line"> public void test3() throws Exception &#123;</span><br><span class="line">     SqlSession session=sqlSessionFactory.openSession();</span><br><span class="line">     DeptMapper deptMapper=session.getMapper(DeptMapper.class);</span><br><span class="line">     Dept dept=deptMapper.selectDeptByid(10);</span><br><span class="line">     System.out.println(dept.getDeptno()+&quot;;&quot;+dept.getDname()+&quot;;&quot;+dept.getLoc());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-逆向工程"><a href="#8-逆向工程" class="headerlink" title="8.逆向工程"></a>8.逆向工程</h1><p>​          MyBatis的一个主要的特点就是需要程序员自己编写SQL，那么如果表太多的话，难免会很麻烦，所以MyBatis官方提供了一个逆向工程，可以针对单表自动生成MyBatis执行所需要的代码（包括mapper.xml，mapper.java，pojo）。一般在开发中，常用的逆向工程方式是通过数据库的表生成代码。</p><h2 id="8-1创建逆向工程-了解"><a href="#8-1创建逆向工程-了解" class="headerlink" title="8.1创建逆向工程(了解)"></a>8.1创建逆向工程(了解)</h2><p>A.新建一个maven  java工程</p><p>B.添加依赖jar 包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- mysql驱动包 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;5.1.8&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 日志包，方便查看执行信息--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.6.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 代码生成工具jar --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>C.添加配置文件generatorConfig.xml</p><p>用于设置数据库驱动，配置，包名，文件保存位置，表名等</p><p>D.定义GeneratorSqlmap类，调用MyBatis自动创建接口，在main方法执行自动创建</p><p>说明：不需要同学们会编写，为大家准备好了一个逆向工程，同学们只需要会使用就可以。</p><h2 id="8-2使用逆向工程"><a href="#8-2使用逆向工程" class="headerlink" title="8.2使用逆向工程"></a>8.2使用逆向工程</h2><p>A.设置数据库驱动，url，用户名和密码</p><pre><code>     &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;        connectionURL=&quot;jdbc:mysql://127.0.0.1:3306/test&quot;         userId=&quot;root&quot;        password=&quot;root&quot;&gt;    &lt;/jdbcConnection&gt; </code></pre><p>B.设置生成的pojo的位置</p><pre><code>    &lt;!-- targetProject:生成PO类的位置 --&gt;    &lt;javaModelGenerator targetPackage=&quot;com.msb.pojo&quot;        targetProject=&quot;.\src&quot;&gt;        &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;        &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;        &lt;!-- 从数据库返回的值被清理前后的空格 --&gt;        &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;    &lt;/javaModelGenerator&gt;</code></pre><p>C.设置生成的Mapper映射文件的位置</p><pre><code>    &lt;!-- targetProject:mapper映射文件生成的位置 --&gt;    &lt;sqlMapGenerator targetPackage=&quot;com.msb.mapper&quot;         targetProject=&quot;.\src&quot;&gt;        &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;        &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;    &lt;/sqlMapGenerator&gt;</code></pre><p>D.设置生成的Mapper接口的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- targetPackage：mapper接口生成的位置 --&gt;</span><br><span class="line">&lt;javaClientGenerator type=&quot;XMLMAPPER&quot;</span><br><span class="line">targetPackage=&quot;com.msb.mapper&quot; </span><br><span class="line">targetProject=&quot;.\src&quot;&gt;</span><br><span class="line">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">&lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">&lt;/javaClientGenerator&gt;</span><br></pre></td></tr></table></figure><p>E.根据数据库表生成pojo类</p><pre><code>    &lt;!-- 指定数据库表 --&gt;            &lt;table tableName=&quot;dept&quot; domainObjectName=&quot;Dept&quot;     enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot;               enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot; &gt;           &lt;columnOverride column=&quot;id&quot; javaType=&quot;Integer&quot; /&gt;     &lt;/table&gt;</code></pre><p>F.运行逆向工程，执行主方法</p><pre><code>public class GeneratorSqlmap &#123;    public void generator() throws Exception&#123;        List&lt;String&gt; warnings = new ArrayList&lt;String&gt;();        boolean overwrite = true;        //指定 逆向工程配置文件        File configFile = new File(&quot;E:\reverseEngineering\src\main\resources\generatorConfig.xml&quot;);         ConfigurationParser cp = new ConfigurationParser(warnings);        Configuration config = cp.parseConfiguration(configFile);        DefaultShellCallback callback = new DefaultShellCallback(overwrite);        MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config,                callback, warnings);        myBatisGenerator.generate(null);    &#125;     public static void main(String[] args) throws Exception &#123;        try &#123;            GeneratorSqlmap generatorSqlmap = new GeneratorSqlmap();            generatorSqlmap.generator();        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><p><strong>注意：</strong></p><p>1.使用逆向工程，右键运行GeneratorSqlmap类里的main方法。成功执行后，刷新项目会生成3个文件：Dept.java  DeptMapper.java  DeptMapper.xml  下图为运行成功后控制台显示的结果。</p><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Czzz.png" alt="zzz"></p><p>2.使用逆向工程过程中，如果出现了  “找不到程序包 和 符号” ，但是点击类名的时候，还可以点击进入。</p><p>​    idea 2020.1平台修改方法是，修改setting 里的本地仓库地址，改到c盘默认位置就可以了。</p><p>3.使用逆向工程过程中，如果显示generatorConfig.xml配置文件 找不到，可以改为写绝对路径，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;E:\\reverseEngineering\\src\\main\\resources\\generatorConfig.xml&quot;</span><br></pre></td></tr></table></figure><h1 id="9-动态SQL"><a href="#9-动态SQL" class="headerlink" title="9.动态SQL"></a>9.动态SQL</h1><h2 id="9-1简介动态SQL"><a href="#9-1简介动态SQL" class="headerlink" title="9.1简介动态SQL"></a>9.1简介动态SQL</h2><p>​        动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL  语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p><p>​        通过MyBatis提供的各种标签对条件作出判断以实现动态拼接SQL语句。</p><h2 id="9-2使用动态SQL的原因"><a href="#9-2使用动态SQL的原因" class="headerlink" title="9.2使用动态SQL的原因"></a>9.2使用动态SQL的原因</h2><p>​        动态SQL主要用于解决查询条件不确定的情况：在程序运行期间，提供的查询条件不同，执行的SQL语句不同。若将每种可能的情况均逐一列出，就将出现大量的SQL语句。而动态SQL可以解决这个问题！</p><h2 id="9-3使用动态SQL"><a href="#9-3使用动态SQL" class="headerlink" title="9.3使用动态SQL"></a>9.3使用动态SQL</h2><h3 id="9-3-1-使用if标签-实现查询功能"><a href="#9-3-1-使用if标签-实现查询功能" class="headerlink" title="9.3.1 使用if标签-实现查询功能"></a>9.3.1 使用if标签-实现查询功能</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">例子1：模糊查询</span><br><span class="line">  &lt;select id=&quot;selectempByinfo&quot; parameterType=&quot;emp&quot; resultType=&quot;emp&quot;&gt;</span><br><span class="line">  </span><br><span class="line">     select * from emp where sal&gt;3500</span><br><span class="line">     </span><br><span class="line">        &lt;if test=&quot;ename!=null&quot;&gt;</span><br><span class="line">           and ename like &#x27;%$&#123;ename&#125;%&#x27;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;deptno!=null&quot;&gt;</span><br><span class="line">           and deptno=#&#123;deptno&#125;       </span><br><span class="line">        &lt;/if&gt; </span><br><span class="line">        </span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">  </span><br><span class="line"> 例子2：模糊查询</span><br><span class="line">   &lt;select id=&quot;selectempByinfo&quot; parameterType=&quot;emp&quot; resultType=&quot;emp&quot;&gt;</span><br><span class="line">  </span><br><span class="line">     select * from emp where sal&gt;3500</span><br><span class="line">     </span><br><span class="line">        &lt;if test=&quot;ename!=null&quot;&gt;</span><br><span class="line">          and ename like concat(&#x27;%&#x27;,&#x27;$&#123;ename&#125;&#x27;,&#x27;%&#x27;)</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;deptno!=null&quot;&gt;</span><br><span class="line">           and deptno=#&#123;deptno&#125;       </span><br><span class="line">        &lt;/if&gt; </span><br><span class="line">        </span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">  </span><br><span class="line">  或者</span><br><span class="line">  </span><br><span class="line">    &lt;select id=&quot;selectempByinfo&quot; parameterType=&quot;emp&quot; resultType=&quot;emp&quot;&gt;</span><br><span class="line">  </span><br><span class="line">     select * from emp where sal&gt;3500</span><br><span class="line">     </span><br><span class="line">        &lt;if test=&quot;ename!=null&quot;&gt;</span><br><span class="line">          and ename like concat(&#x27;%&#x27;,#&#123;ename&#125;,&#x27;%&#x27;)</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;deptno!=null&quot;&gt;</span><br><span class="line">           and deptno=#&#123;deptno&#125;       </span><br><span class="line">        &lt;/if&gt; </span><br><span class="line">        </span><br><span class="line">  &lt;/select&gt;</span><br><span class="line"> </span><br><span class="line"> 例子3：“CDATA 语法”</span><br><span class="line">   &lt;select id=&quot;selectempByinfo&quot; parameterType=&quot;emp&quot; resultType=&quot;emp&quot;&gt;</span><br><span class="line">  </span><br><span class="line">     select * from emp where sal&gt;3500</span><br><span class="line">     </span><br><span class="line">       &lt;if test=&quot;sal!=null&quot;&gt;</span><br><span class="line">           and sal &lt;![CDATA[&lt;=]]&gt;#&#123;sal&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;deptno!=null&quot;&gt;</span><br><span class="line">           and deptno=#&#123;deptno&#125;       </span><br><span class="line">        &lt;/if&gt; </span><br><span class="line">        </span><br><span class="line">  &lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="9-3-2-使用-if-where标签-实现查询功能"><a href="#9-3-2-使用-if-where标签-实现查询功能" class="headerlink" title="9.3.2 使用 if+where标签-实现查询功能"></a>9.3.2 使用 if+where标签-实现查询功能</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;select id=&quot;selectempByinfo&quot; parameterType=&quot;emp&quot; resultType=&quot;emp&quot;&gt;</span><br><span class="line"></span><br><span class="line">   select * from emp</span><br><span class="line">   </span><br><span class="line">   &lt;where&gt;</span><br><span class="line">      &lt;if test=&quot;ename!=null&quot;&gt;</span><br><span class="line">         and ename like &#x27;%$&#123;ename&#125;%&#x27;</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;sal!=null&quot;&gt;</span><br><span class="line">         and sal &lt;![CDATA[&lt;=]]&gt;#&#123;sal&#125;</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;deptno!=null&quot;&gt;</span><br><span class="line">         and deptno=#&#123;deptno&#125;       </span><br><span class="line">      &lt;/if&gt; </span><br><span class="line">   &lt;/where&gt;</span><br><span class="line"></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p><strong>注意说明：</strong></p><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Cccc.png" alt="ccc"></p><h3 id="9-3-3-使用-choose-when-otherwise标签-实现查询功能"><a href="#9-3-3-使用-choose-when-otherwise标签-实现查询功能" class="headerlink" title="9.3.3 使用 choose+when+otherwise标签-实现查询功能"></a>9.3.3 使用 choose+when+otherwise标签-实现查询功能</h3><p>​        有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的  switch 语句。</p><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Cddd.png" alt="ddd"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectEmpByinfo&quot; parameterType=&quot;emp&quot; resultType=&quot;emp&quot;&gt;</span><br><span class="line"></span><br><span class="line">    select * from emp where</span><br><span class="line">    &lt;choose&gt;</span><br><span class="line">        &lt;when test=&quot;sal !=null &quot;&gt;</span><br><span class="line">            sal &lt;![CDATA[ &lt;= ]]&gt;#&#123;sal&#125;</span><br><span class="line">        &lt;/when&gt;</span><br><span class="line">        &lt;when test=&quot;ename != null&quot;&gt;</span><br><span class="line">            and ename like concat(&#x27;%&#x27;,#&#123;ename&#125;,&#x27;%&#x27;)</span><br><span class="line">        &lt;/when&gt;</span><br><span class="line">        &lt;otherwise&gt;</span><br><span class="line">            deptno=#&#123;deptno&#125;</span><br><span class="line">        &lt;/otherwise&gt;</span><br><span class="line">    &lt;/choose&gt;</span><br><span class="line"></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="9-3-4-使用-trim-if标签-实现添加功能"><a href="#9-3-4-使用-trim-if标签-实现添加功能" class="headerlink" title="9.3.4 使用 trim+if标签-实现添加功能"></a>9.3.4 使用 trim+if标签-实现添加功能</h3><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Ceee.png" alt="eee"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;insertEmp&quot; parameterType=&quot;emp&quot;&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;!--    insert into emp(列，列，列) values（值，值，值） --&gt;</span><br><span class="line">      insert into emp</span><br><span class="line">      &lt;trim prefix=&quot;(&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt;</span><br><span class="line">          &lt;if test=&quot;ename!=null&quot;&gt;</span><br><span class="line">              ename,</span><br><span class="line">          &lt;/if&gt;</span><br><span class="line">          &lt;if test=&quot;mgr!=null&quot;&gt;</span><br><span class="line">              mgr,</span><br><span class="line">          &lt;/if&gt;   </span><br><span class="line">          &lt;if test=&quot;sal!=null&quot;&gt;</span><br><span class="line">              sal,</span><br><span class="line">          &lt;/if&gt; </span><br><span class="line">          &lt;if test=&quot;deptno!=null&quot;&gt;</span><br><span class="line">              deptno,</span><br><span class="line">          &lt;/if&gt;                    </span><br><span class="line">      &lt;/trim&gt;</span><br><span class="line">      values</span><br><span class="line">      &lt;trim prefix=&quot; (&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt;</span><br><span class="line">      </span><br><span class="line">        &lt;if test=&quot;ename!=null&quot;&gt;</span><br><span class="line">              #&#123;ename&#125;,</span><br><span class="line">          &lt;/if&gt;</span><br><span class="line">          &lt;if test=&quot;mgr!=null&quot;&gt;</span><br><span class="line">              #&#123;mgr&#125;,</span><br><span class="line">          &lt;/if&gt;   </span><br><span class="line">          &lt;if test=&quot;sal!=null&quot;&gt;</span><br><span class="line">              #&#123;sal&#125;,</span><br><span class="line">          &lt;/if&gt; </span><br><span class="line">          &lt;if test=&quot;deptno!=null&quot;&gt;</span><br><span class="line">              #&#123;deptno&#125;,</span><br><span class="line">          &lt;/if&gt;        </span><br><span class="line">      &lt;/trim&gt;</span><br><span class="line"> &lt;/insert&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9-3-5-使用-set-if-where标签-实现修改功能"><a href="#9-3-5-使用-set-if-where标签-实现修改功能" class="headerlink" title="9.3.5 使用 set+if+where标签-实现修改功能"></a>9.3.5 使用 set+if+where标签-实现修改功能</h3><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Cfff.png" alt="fff"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=&quot;updateEmp&quot; parameterType=&quot;emp&quot;&gt;</span><br><span class="line">   &lt;!-- update emp set 列1=值1，列2=值2，列3=值3 where 列1=值 and 列2=值2 --&gt;    </span><br><span class="line">  update emp </span><br><span class="line">     &lt;set&gt;</span><br><span class="line">        &lt;if test=&quot;ename!=null&quot;&gt;</span><br><span class="line">            ename= #&#123;ename&#125;,</span><br><span class="line">         &lt;/if&gt;</span><br><span class="line">         &lt;if test=&quot;mgr!=null&quot;&gt;</span><br><span class="line">            mgr= #&#123;mgr&#125;,</span><br><span class="line">         &lt;/if&gt;   </span><br><span class="line">         &lt;if test=&quot;sal!=null&quot;&gt;</span><br><span class="line">            sal= #&#123;sal&#125;,</span><br><span class="line">         &lt;/if&gt; </span><br><span class="line">         &lt;if test=&quot;deptno!=null&quot;&gt;</span><br><span class="line">            deptno= #&#123;deptno&#125;,</span><br><span class="line">         &lt;/if&gt;     </span><br><span class="line">     &lt;/set&gt;</span><br><span class="line">     &lt;where&gt;</span><br><span class="line">       &lt;if test=&quot;empno!=null&quot;&gt;</span><br><span class="line">           and empno=#&#123;empno&#125; </span><br><span class="line">       &lt;/if&gt;</span><br><span class="line">       &lt;if test=&quot;comm!=null&quot;&gt;</span><br><span class="line">           and comm=#&#123;comm&#125;</span><br><span class="line">       &lt;/if&gt;</span><br><span class="line">     &lt;/where&gt;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><h3 id="9-3-6-使用foreach标签-构建in条件"><a href="#9-3-6-使用foreach标签-构建in条件" class="headerlink" title="9.3.6 使用foreach标签-构建in条件"></a>9.3.6 使用foreach标签-构建in条件</h3><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Cggg.png" alt="ggg"></p><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Chhh.png" alt="hhh"></p><p>例子1：   select * from emp where   (empno=123 or empno=234 or empno=345)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectEmpsByList&quot; parameterType=&quot;java.util.List&quot; resultType=&quot;emp&quot;&gt; </span><br><span class="line">       </span><br><span class="line">      select * from emp</span><br><span class="line">      &lt;where&gt;</span><br><span class="line">         &lt;foreach collection=&quot;list&quot; open=&quot;(&quot; close=&quot;)&quot; item=&quot;no&quot; separator=&quot;or&quot;&gt;</span><br><span class="line">               empno=#&#123;no&#125;</span><br><span class="line">         &lt;/foreach&gt; </span><br><span class="line">      &lt;/where&gt;</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">      @Test</span><br><span class="line">    public void testforeache1() throws Exception &#123;</span><br><span class="line">        SqlSession session=factory.openSession();</span><br><span class="line">        EmpMapper empMapper= session.getMapper(EmpMapper.class);</span><br><span class="line">        List&lt;Integer&gt; list=new ArrayList&lt;Integer&gt;();</span><br><span class="line">        list.add(7369);</span><br><span class="line">        list.add(7123);</span><br><span class="line">        list.add(1213);</span><br><span class="line">        List&lt;Emp&gt; emps=empMapper.selectEmpByempnos(list);</span><br><span class="line">        session.close();</span><br><span class="line">        for (Emp e:emps)&#123;</span><br><span class="line">            System.out.println(e.getEmpno()+&quot;;&quot;+e.getEname()+&quot;;&quot;+e.getMgr());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>例子2：  select * from emp where empno in(1,3,4,5,6)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectEmpsByList&quot; parameterType=&quot;java.util.List&quot; resultType=&quot;emp&quot;&gt;  </span><br><span class="line">   </span><br><span class="line">    select * from emp</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">       empno</span><br><span class="line">       &lt;foreach collection=&quot;list&quot; close=&quot;)&quot; open=&quot;in (&quot; item=&quot;no&quot; separator=&quot;,&quot;&gt;</span><br><span class="line">           #&#123;no&#125;  </span><br><span class="line">       &lt;/foreach&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line"> &lt;/select&gt;</span><br></pre></td></tr></table></figure><p>例子3：参数换为int型数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectEmpsByList&quot; parameterType=&quot;java.util.List&quot;  resultType=&quot;emp&quot;&gt;</span><br><span class="line">       select * from emp</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">       empno</span><br><span class="line">       &lt;foreach collection=&quot;array&quot; close=&quot;)&quot;  open=&quot;in (&quot; item=&quot;no&quot; separator=&quot;,&quot;&gt;</span><br><span class="line">           #&#123;no&#125;  </span><br><span class="line">       &lt;/foreach&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">  &lt;/select&gt;</span><br></pre></td></tr></table></figure><p>例子4：参数换为Map集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectEmpsByList&quot;  parameterType=&quot;java.util.Map&quot; resultType=&quot;emp&quot;&gt;</span><br><span class="line">      select * from emp</span><br><span class="line">   &lt;where&gt;</span><br><span class="line">      empno </span><br><span class="line">      &lt;foreach collection=&quot;nos&quot; close=&quot;)&quot;  open=&quot;in (&quot; item=&quot;no&quot; separator=&quot;,&quot;&gt;</span><br><span class="line">          #&#123;no&#125;</span><br><span class="line">      &lt;/foreach&gt;</span><br><span class="line">   &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>例子5：  查询 部门编号为10的，员工编号为 8901，8900，8899，8898  同时，名字里带A 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectEmpsByMap&quot; parameterType=&quot;java.util.Map&quot; </span><br><span class="line">resultType=&quot;emp&quot;&gt;</span><br><span class="line">      &lt;include refid=&quot;selectid&quot;/&gt;</span><br><span class="line">   &lt;where&gt;</span><br><span class="line">        deptno=#&#123;deptkey&#125;</span><br><span class="line">        </span><br><span class="line">        and  </span><br><span class="line">        ename like &#x27;%$&#123;enamekey&#125;%&#x27;</span><br><span class="line">   </span><br><span class="line">        and </span><br><span class="line">        &lt;foreach collection=&quot;listkey&quot; open=&quot;empno in(&quot;  close=&quot;)&quot; item=&quot;no&quot; separator=&quot;,&quot;&gt;</span><br><span class="line">            #&#123;no&#125;</span><br><span class="line">        &lt;/foreach&gt;</span><br><span class="line">        </span><br><span class="line">   &lt;/where&gt;</span><br><span class="line"></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="9-3-7-使用SQL片段"><a href="#9-3-7-使用SQL片段" class="headerlink" title="9.3.7 使用SQL片段"></a>9.3.7 使用SQL片段</h3><p>在实际开发中，存在大量的重复的SQL代码，通过SQL代码片段，实现SQL代码重用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  提取相同sql代码： --&gt;</span><br><span class="line">&lt;sql id=&quot;selectid&quot;&gt;</span><br><span class="line">    select * from emp</span><br><span class="line">&lt;/sql&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;selectEmpsByList&quot;  parameterType=&quot;java.util.Map&quot; resultType=&quot;emp&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;include refid=&quot;selectid&quot;/&gt;</span><br><span class="line">   &lt;where&gt;</span><br><span class="line">      empno </span><br><span class="line">      &lt;foreach collection=&quot;nos&quot; close=&quot;)&quot;  open=&quot;in (&quot; item=&quot;no&quot; separator=&quot;,&quot;&gt;</span><br><span class="line">          #&#123;no&#125;</span><br><span class="line">      &lt;/foreach&gt;</span><br><span class="line">   &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="9-3-8-使用bind标签"><a href="#9-3-8-使用bind标签" class="headerlink" title="9.3.8 使用bind标签"></a>9.3.8 使用bind标签</h3><p><code>bind</code> 元素允许你在 OGNL 表达式以外创建一个变量，并将其绑定到当前的上下文。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectEmpBysalename&quot; parameterType=&quot;emp&quot; resultType=&quot;emp&quot;&gt;</span><br><span class="line">    &lt;bind name=&quot;name&quot; value=&quot;&#x27;%&#x27; + ename + &#x27;%&#x27;&quot;/&gt;</span><br><span class="line">    select * from emp</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;if test=&quot;sal !=null &quot;&gt;</span><br><span class="line">            and  sal &lt;![CDATA[ &lt;= ]]&gt;#&#123;sal&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;ename != null&quot;&gt;</span><br><span class="line">            and ename like #&#123;name&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h1 id="10-MyBatis查询"><a href="#10-MyBatis查询" class="headerlink" title="10.MyBatis查询"></a>10.MyBatis查询</h1><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Ciii.png" alt="iii"></p><h2 id="10-1一对一关联查询"><a href="#10-1一对一关联查询" class="headerlink" title="10.1一对一关联查询"></a>10.1一对一关联查询</h2><p>案例：查询所有员工信息 以及  员工所对应的部门信息</p><p>分析：</p><p>​        一个员工信息只会是属于一个部门下的，所以从查询员工信息出发关联查询部门信息为一对一查询。如果从部门信息出发查询员工信息则为一对多查询，因为一个部门可以有多个员工。</p><h3 id="10-1-1-解决方案一：使用resultType属性"><a href="#10-1-1-解决方案一：使用resultType属性" class="headerlink" title="10.1.1 解决方案一：使用resultType属性"></a>10.1.1 解决方案一：使用resultType属性</h3><p>实现步骤：</p><p>A.创建实体类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">该类同时拥有 员工信息和部门信息</span><br></pre></td></tr></table></figure><p>B.创建mapper.java接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;EmpDept&gt; findEmpDept();</span><br></pre></td></tr></table></figure><p>C.创建mapper.xml映射文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findEmpDept&quot; resultType=&quot;empDept&quot;&gt;</span><br><span class="line">  select E.*,d.* from emp e,dept d where e.deptno=d.deptno</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>D.编写测试类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正常写</span><br></pre></td></tr></table></figure><p>存在的问题：</p><p>浪费了两组pojo，mapper.xml，mapper.java，</p><p>多创建出一组pojo，mapper.xml，mapper.java</p><h3 id="10-1-2解决方案二：使用resultMap属性"><a href="#10-1-2解决方案二：使用resultMap属性" class="headerlink" title="10.1.2解决方案二：使用resultMap属性"></a>10.1.2解决方案二：使用resultMap属性</h3><p>实现步骤：</p><p>A.创建实体类：Dept  Emp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Dept  &#123;</span><br><span class="line"></span><br><span class="line">private Integer deptno;</span><br><span class="line">private String dname;</span><br><span class="line">private String loc;</span><br><span class="line"></span><br><span class="line">===get、set、有参、无参，toString方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class Emp &#123;</span><br><span class="line">    private Integer empno;</span><br><span class="line"></span><br><span class="line">    private String ename;</span><br><span class="line"></span><br><span class="line">    private String job;</span><br><span class="line"></span><br><span class="line">    private Integer mgr;</span><br><span class="line"></span><br><span class="line">    private Date hiredate;</span><br><span class="line"></span><br><span class="line">    private Double sal;</span><br><span class="line"></span><br><span class="line">    private Double comm;</span><br><span class="line"></span><br><span class="line">  /*  private Integer deptno;*/</span><br><span class="line">    </span><br><span class="line">    private Dept dept;</span><br><span class="line"></span><br><span class="line">   ===get、set、有参、无参，toString方法</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>B.创建EmpMapper.java接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Emp&gt; findAll();</span><br></pre></td></tr></table></figure><p>C.创建EmpMapper.xml映射文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap type=&quot;com.msb.pojo.Emp&quot; id=&quot;EmpAndDept&quot;&gt;</span><br><span class="line">      &lt;id column=&quot;empno&quot; property=&quot;empno&quot;/&gt;</span><br><span class="line">      &lt;result column=&quot;ename&quot; property=&quot;ename&quot;/&gt; </span><br><span class="line">      &lt;result column=&quot;mgr&quot; property=&quot;mgr&quot;/&gt;</span><br><span class="line">      &lt;result column=&quot;sal&quot; property=&quot;sal&quot;/&gt;</span><br><span class="line">      &lt;result column=&quot;hiredate&quot; property=&quot;hiredate&quot;/&gt;</span><br><span class="line">      &lt;association property=&quot;dept&quot; javaType=&quot;com.msb.pojo.Dept&quot;&gt;</span><br><span class="line">          &lt;id column=&quot;deptno&quot; property=&quot;deptno&quot;/&gt;</span><br><span class="line">          &lt;result column=&quot;dname&quot; property=&quot;dname&quot;/&gt;</span><br><span class="line">          &lt;result column=&quot;loc&quot; property=&quot;loc&quot;/&gt;</span><br><span class="line">      &lt;/association&gt;</span><br><span class="line">  &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">  &lt;select id=&quot;findAll&quot; resultMap=&quot;EmpAndDept&quot;&gt; </span><br><span class="line">       select e.empno,e.ename,e.mgr,e.sal,e.hiredate,d.deptno,d.dname,d.loc</span><br><span class="line">       from emp e  inner join dept d </span><br><span class="line">                   on e.deptno=d.deptno </span><br><span class="line">  &lt;/select&gt;</span><br></pre></td></tr></table></figure><p>D.创建测试类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test() &#123;</span><br><span class="line">  SqlSession session =factory.openSession();</span><br><span class="line">  EmpMapper empmapper= session.getMapper(EmpMapper.class);</span><br><span class="line">  List&lt;Emp&gt; list=empmapper.findAll();</span><br><span class="line">for(Emp e:list)&#123;</span><br><span class="line">System.out.println(e.getEmpno()+&quot;;&quot;+e.getEname()+&quot;;&quot;+</span><br><span class="line">e.getDept().getDname()+&quot;;&quot;+e.getDept().getLoc());</span><br><span class="line">&#125;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-2-一对多关联查询"><a href="#10-2-一对多关联查询" class="headerlink" title="10.2 一对多关联查询"></a>10.2 一对多关联查询</h2><p>案例：查询所有部门信息 以及 部门下的所有员工信息</p><p>分析：查询所有部门信息 以及 部门下的所有员工信息，部门信息 与 员工的信息是一对多的关系。</p><p>实现步骤：</p><p>A.创建实体类：Dept  Emp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Dept  &#123;</span><br><span class="line"></span><br><span class="line">    private Integer deptno;</span><br><span class="line"></span><br><span class="line">    private String dname;</span><br><span class="line"></span><br><span class="line">    private String loc;</span><br><span class="line">    </span><br><span class="line">    private List&lt;Emp&gt; emps;</span><br><span class="line"></span><br><span class="line">===get、set、有参、无参，toString方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class Emp &#123;</span><br><span class="line">    private Integer empno;</span><br><span class="line"></span><br><span class="line">    private String ename;</span><br><span class="line"></span><br><span class="line">    private String job;</span><br><span class="line"></span><br><span class="line">    private Integer mgr;</span><br><span class="line"></span><br><span class="line">    private Date hiredate;</span><br><span class="line"></span><br><span class="line">    private Double sal;</span><br><span class="line"></span><br><span class="line">    private Double comm;</span><br><span class="line"></span><br><span class="line">  /*  private Integer deptno;*/</span><br><span class="line">    </span><br><span class="line">    private Dept dept;</span><br><span class="line"></span><br><span class="line">   ===get、set、有参、无参，toString方法</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>B.创建DeptMapper.java接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dept findDeptByid(int deptno);</span><br></pre></td></tr></table></figure><p>C.创建DeptMapper.xml映射文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap type=&quot;com.msb.pojo.Dept&quot; id=&quot;DeptAndEmps&quot;&gt;</span><br><span class="line">   &lt;id column=&quot;deptno&quot; property=&quot;deptno&quot;/&gt;</span><br><span class="line">   &lt;result column=&quot;dname&quot; property=&quot;dname&quot;/&gt;</span><br><span class="line">   &lt;result column=&quot;loc&quot; property=&quot;loc&quot;/&gt;</span><br><span class="line">   &lt;collection property=&quot;emps&quot; ofType=&quot;com.msb.pojo.Emp&quot;&gt;</span><br><span class="line">         &lt;id column=&quot;empno&quot; property=&quot;empno&quot;/&gt;</span><br><span class="line">         &lt;result column=&quot;ename&quot; property=&quot;ename&quot;/&gt;</span><br><span class="line">         &lt;result column=&quot;sal&quot; property=&quot;sal&quot;/&gt;</span><br><span class="line">   &lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;findDeptByid&quot; parameterType=&quot;int&quot; resultMap=&quot;DeptAndEmps&quot;&gt;</span><br><span class="line">   select d.deptno,d.dname,d.loc,e.empno,e.ename,e.sal</span><br><span class="line">   from dept d inner join emp e on d.deptno=e.deptno</span><br><span class="line">   where d.deptno=#&#123;id&#125;</span><br><span class="line"></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>D.创建测试类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test1()&#123;</span><br><span class="line">SqlSession session =factory.openSession();</span><br><span class="line">DeptMapper deptmapper= session.getMapper(DeptMapper.class);</span><br><span class="line">Dept dept=deptmapper.findDeptByid(10);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;部门信息：&quot;+dept.getLoc()+&quot;;&quot;+dept.getDname()+&quot;;&quot;+dept.getLoc());</span><br><span class="line">System.out.println(&quot;部门里，所有员工的信息：&quot;);</span><br><span class="line">for(Emp e:dept.getEmps())&#123;</span><br><span class="line">System.out.println(e.getEname()+&quot;;&quot;+e.getEmpno()+&quot;;&quot;+e.getSal());</span><br><span class="line">&#125;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-3-多对多关联查询"><a href="#10-3-多对多关联查询" class="headerlink" title="10.3 多对多关联查询"></a>10.3 多对多关联查询</h2><p><strong>准备案例数据模型：</strong></p><p><strong>用户表：</strong></p><p>CREATE TABLE <code>users</code> (<br>  <code>uid</code> int(4) NOT NULL,<br>  <code>uname</code> varchar(20) DEFAULT NULL,<br>  <code>sex</code> varchar(3) DEFAULT NULL,<br>  <code>birthday</code> date DEFAULT NULL,<br>  <code>address</code> varchar(100) DEFAULT NULL,<br>  PRIMARY KEY (<code>uid</code>)<br>) </p><p>INSERT INTO <code>users</code> VALUES (‘1001’, ‘张三’, ‘男’, ‘2002-02-21’, ‘北京朝阳区’);<br>INSERT INTO <code>users</code> VALUES (‘1002’, ‘李四’, ‘女’, ‘2004-06-18’, ‘北京海淀区’);<br>INSERT INTO <code>users</code> VALUES (‘1003’, ‘王五’, ‘男’, ‘1999-02-04’, ‘北京昌平区’);</p><p><strong>订单表：</strong></p><p>CREATE TABLE <code>orders</code> (<br>  <code>oid</code> int(4) NOT NULL,<br>  <code>userid</code> int(4) DEFAULT NULL,<br>  <code>orderid</code> varchar(20) DEFAULT NULL,<br>  <code>createtime</code> date DEFAULT NULL,<br>  <code>status</code> varchar(10) DEFAULT NULL,<br>  PRIMARY KEY (<code>oid</code>)<br>) </p><p>INSERT INTO <code>orders</code> VALUES (‘1’, ‘1001’, ‘A3579SF001’, ‘2020-06-11’, ‘已签收’);<br>INSERT INTO <code>orders</code> VALUES (‘2’, ‘1001’, ‘C90373G002’, ‘2020-06-28’, ‘已签收’);<br>INSERT INTO <code>orders</code> VALUES (‘3’, ‘1002’, ‘S75375S003’, ‘2020-07-02’, ‘已签收’);<br>INSERT INTO <code>orders</code> VALUES (‘4’, ‘1003’, ‘K45772F004’, ‘2020-07-31’, ‘已签收’);</p><p><strong>订单详情表:</strong></p><p>CREATE TABLE <code>orderdetail</code> (<br>  <code>odid</code> int(4) NOT NULL,<br>  <code>orderid</code> varchar(20) DEFAULT NULL,<br>  <code>itemid</code> int(4) DEFAULT NULL,<br>  <code>itemnum</code> int(4) DEFAULT NULL,<br>  PRIMARY KEY (<code>odid</code>)<br>) </p><p>INSERT INTO <code>orderdetail</code> VALUES (‘1’, ‘K45772F004’, ‘1’, ‘3’);<br>INSERT INTO <code>orderdetail</code> VALUES (‘2’, ‘K45772F004’, ‘2’, ‘1’);<br>INSERT INTO <code>orderdetail</code> VALUES (‘3’, ‘S75375S003’, ‘1’, ‘1’);<br>INSERT INTO <code>orderdetail</code> VALUES (‘4’, ‘C90373G002’, ‘3’, ‘1’);<br>INSERT INTO <code>orderdetail</code> VALUES (‘5’, ‘C90373G002’, ‘4’, ‘2’);<br>INSERT INTO <code>orderdetail</code> VALUES (‘6’, ‘A3579SF001’, ‘1’, ‘1’);</p><p><strong>商品表：</strong></p><p>CREATE TABLE <code>items</code> (<br>  <code>iid</code> int(4) NOT NULL,<br>  <code>name</code> varchar(30) DEFAULT NULL,<br>  <code>detail</code> varchar(50) DEFAULT NULL,<br>  <code>price</code> double(5,2) DEFAULT NULL,<br>  PRIMARY KEY (<code>iid</code>)<br>)</p><p>INSERT INTO <code>items</code> VALUES (‘1’, ‘电饭锅’, ‘美的牌久用不坏电饭锅’, ‘390.00’);<br>INSERT INTO <code>items</code> VALUES (‘2’, ‘儿童座椅’, ‘长达5年实验’, ‘620.00’);<br>INSERT INTO <code>items</code> VALUES (‘3’, ‘冬季外套’, ‘户外专属外套’, ‘360.00’);<br>INSERT INTO <code>items</code> VALUES (‘4’, ‘卷发器’, ‘白色 塑料制品’, ‘5.30’);</p><p><strong>案例：</strong></p><p>所有用户的所有订单里的所有商品信息！</p><p><strong>分析：</strong></p><p>用户 1：n 订单  1 ：n  订单详情 1：1 商品   </p><p>用户  订单详情/商品</p><p>实现步骤：</p><p>A.创建实体类：Users  Orders  OrderDateil  Items</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public class Users &#123;</span><br><span class="line">    private Integer uid;</span><br><span class="line"></span><br><span class="line">    private String uname;</span><br><span class="line"></span><br><span class="line">    private String sex;</span><br><span class="line"></span><br><span class="line">    private Date birthday;</span><br><span class="line"></span><br><span class="line">    private String address;</span><br><span class="line">    </span><br><span class="line">    private List&lt;Orders&gt; orders;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> public class Orders &#123;</span><br><span class="line">    private Integer oid;</span><br><span class="line"></span><br><span class="line">    private Integer userid;</span><br><span class="line"></span><br><span class="line">    private String orderid;</span><br><span class="line"></span><br><span class="line">    private Date createtime;</span><br><span class="line"></span><br><span class="line">    private String status;</span><br><span class="line">    </span><br><span class="line">    private List&lt;OrderDetail&gt; orderdetails;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">public class OrderDetail &#123;</span><br><span class="line">    private Integer odid;</span><br><span class="line"></span><br><span class="line">    private String ordersid;</span><br><span class="line"></span><br><span class="line">/*    private Integer itemsid;*/</span><br><span class="line"></span><br><span class="line">    private Integer itemsnum;</span><br><span class="line">    </span><br><span class="line">    private Items item; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Items &#123;</span><br><span class="line">    private Integer iid;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private String detail;</span><br><span class="line"></span><br><span class="line">    private Double price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>B.创建UserMapper .java接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; findAllinfo();</span><br></pre></td></tr></table></figure><p>C.创建DeptMapper.xml映射文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;resultMap type=&quot;com.neuedu.bean.User&quot; id=&quot;usersAndOrdersAnddetailsAndItem&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;id column=&quot;uid&quot; property=&quot;uid&quot;/&gt;</span><br><span class="line">   &lt;result column=&quot;username&quot; property=&quot;uname&quot;/&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;collection property=&quot;orders&quot; ofType=&quot;com.neuedu.bean.Orders&quot;&gt;</span><br><span class="line">   &lt;id column=&quot;oid&quot; property=&quot;oid&quot;/&gt;</span><br><span class="line">       &lt;result column=&quot;orderId&quot; property=&quot;orderid&quot;/&gt;</span><br><span class="line">   </span><br><span class="line">       &lt;collection property=&quot;orderdetails&quot; ofType=&quot;com.neuedu.bean.OrderDetail&quot;&gt;</span><br><span class="line">        &lt;id column=&quot;odid&quot; property=&quot;odid&quot;/&gt;</span><br><span class="line">           &lt;result column=&quot;itemsNum&quot; property=&quot;itemsnum&quot;/&gt;</span><br><span class="line">           </span><br><span class="line">           &lt;association property=&quot;item&quot; javaType=&quot;com.neuedu.bean.Items&quot;&gt;</span><br><span class="line">           &lt;id column=&quot;iid&quot; property=&quot;iid&quot;/&gt;</span><br><span class="line">               &lt;result column=&quot;name&quot; property=&quot;name&quot;/&gt;</span><br><span class="line">               &lt;result column=&quot;price&quot; property=&quot;price&quot;/&gt;</span><br><span class="line">               &lt;result column=&quot;detail&quot; property=&quot;detail&quot;/&gt;</span><br><span class="line">           &lt;/association&gt;</span><br><span class="line"></span><br><span class="line">       &lt;/collection&gt;</span><br><span class="line">   &lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;findAllinfo&quot; resultMap=&quot;usersAndOrdersAnddetailsAndItem&quot;&gt;</span><br><span class="line"></span><br><span class="line">  select u.uid,u.uname,</span><br><span class="line">          o.oid,o.orderid,</span><br><span class="line">          od.odid,od.itemnum,</span><br><span class="line">          i.iid,i.name,i.price,i.detail</span><br><span class="line">  from  users u</span><br><span class="line">        inner join orders o   </span><br><span class="line">        on u.uid=o.userId</span><br><span class="line">        inner join orderdetail od </span><br><span class="line">        on od.orderid=o.orderid</span><br><span class="line">        inner join items i </span><br><span class="line">        on i. iid=od.itemid</span><br><span class="line"></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>D.创建测试类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test() &#123;</span><br><span class="line"></span><br><span class="line">SqlSession session=factory.openSession();</span><br><span class="line">UserMapper usermapper=session.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; list=usermapper.findAllinfo();</span><br><span class="line">for(User u:list)&#123;</span><br><span class="line">System.out.println(&quot;用户信息：&quot;+u.getUname()+&quot;;&quot;+u.getUid()+&quot;\n&quot;);</span><br><span class="line">for(Orders o:u.getOrders())&#123;</span><br><span class="line">System.out.println(&quot;用户所下的订单信息：&quot;+o.getOid()+&quot;;&quot;+o.getOrderid()+&quot;\n&quot;);</span><br><span class="line">for(OrderDetail od:o.getOrderdetails())&#123;</span><br><span class="line">System.out.println(&quot;订单详情：&quot;+od.getItemsnum()+&quot;;&quot;+od.getItem().getName()+&quot;;&quot;+od.getItem().getDetail());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-4分页查询"><a href="#10-4分页查询" class="headerlink" title="10.4分页查询"></a>10.4分页查询</h2><p> 案例：对用户表进行分页！</p><h3 id="10-4-1方案一：使用page工具类"><a href="#10-4-1方案一：使用page工具类" class="headerlink" title="10.4.1方案一：使用page工具类"></a>10.4.1方案一：使用page工具类</h3><h3 id="10-4-2方案二：使用RowBounds插件"><a href="#10-4-2方案二：使用RowBounds插件" class="headerlink" title="10.4.2方案二：使用RowBounds插件"></a>10.4.2方案二：使用RowBounds插件</h3><p>实现步骤：</p><p>A.创建实体类：</p><p>   没变化</p><p>B.创建UserMapper .java接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; findall(RowBounds rb);</span><br></pre></td></tr></table></figure><p>C.创建UserMapper .xml映射文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findall&quot; resultType=&quot;user&quot;&gt;</span><br><span class="line"></span><br><span class="line">   select * from user</span><br><span class="line"></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>D.创建测试类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void  test1()&#123;</span><br><span class="line"></span><br><span class="line">SqlSession session=factory.openSession();</span><br><span class="line">UserMapper usermapper=session.getMapper(UserMapper.class);</span><br><span class="line">   RowBounds rb=new RowBounds(0, 2);</span><br><span class="line">List&lt;User&gt; list=usermapper.findall( rb);</span><br><span class="line">for(User u:list)&#123;</span><br><span class="line">System.out.println(u.getUname()+&quot;;&quot;+u.getUid()+&quot;;&quot;+u.getBirthday());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="11-延迟加载"><a href="#11-延迟加载" class="headerlink" title="11.延迟加载"></a>11.延迟加载</h1><h2 id="11-1延迟加载介绍"><a href="#11-1延迟加载介绍" class="headerlink" title="11.1延迟加载介绍"></a>11.1延迟加载介绍</h2><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Clll.png" alt="lll"></p><h2 id="11-2延迟加载配置"><a href="#11-2延迟加载配置" class="headerlink" title="11.2延迟加载配置"></a>11.2延迟加载配置</h2><p>A.MyBatis 默认没有开启延迟加载，需要在SqlMapConfig.xml中setting进行配置</p><p>B.lazyLoadingEnabled :true 使用延迟加载，false 禁用延迟加载，默认为false</p><p>C.aggressiveLazyLoading  :true启用时，当延迟加载开启时 访问对象中一个懒对象属性时，将完全加载这个对象的所有懒对象属性。false，当延迟加载时，按需加载对象属性。 （在 3.4.1 及之前的版本中默认为 true；之后版本默认为false） </p><settings><p>​            <!--打开延迟加载的开关  --></p><pre><code>      &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</code></pre><p>​            <!--将积极加载改为消极加载 即 按需加载 --></p><pre><code>     &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;true&quot;/&gt;</code></pre></settings><h2 id="11-3延迟加载代码实现"><a href="#11-3延迟加载代码实现" class="headerlink" title="11.3延迟加载代码实现"></a>11.3延迟加载代码实现</h2><h3 id="1-准备两个实体类"><a href="#1-准备两个实体类" class="headerlink" title="1.准备两个实体类"></a>1.准备两个实体类</h3><p>OrderDetail 订单详情   Items商品</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class OrderDetail &#123;</span><br><span class="line">    private Integer odid;</span><br><span class="line"></span><br><span class="line">    private String orderid;</span><br><span class="line"></span><br><span class="line">/*  private Integer itemid;*/</span><br><span class="line"></span><br><span class="line">    private Integer itemnum;</span><br><span class="line"></span><br><span class="line">    private Items items; //订单详情  跟 商品是 1对1 关联关系</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">public class Items &#123;</span><br><span class="line">    private Integer iid;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private String detail;</span><br><span class="line"></span><br><span class="line">    private Double price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-准备两个mapper接口"><a href="#2-准备两个mapper接口" class="headerlink" title="2.准备两个mapper接口"></a>2.准备两个mapper接口</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public interface OrderDetailMapper &#123;</span><br><span class="line"></span><br><span class="line">    OrderDetail selectOrderDetailLazyLoad(int odid) throws  Exception;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface ItemsMapper &#123;</span><br><span class="line"></span><br><span class="line">    Items selectByid(int iid) throws Exception;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-准备两个mapper映射文件"><a href="#3-准备两个mapper映射文件" class="headerlink" title="3.准备两个mapper映射文件"></a>3.准备两个mapper映射文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace=&quot;com.msb.mapper.OrderDetailMapper&quot; &gt;</span><br><span class="line">    &lt;resultMap id=&quot;OrderDetailItemLazyLoad&quot; type=&quot;orderDetail&quot;&gt;</span><br><span class="line">        &lt;id column=&quot;odid&quot; property=&quot;odid&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;orderid&quot; property=&quot;orderid&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;itemnum&quot; property=&quot;itemnum&quot;/&gt;</span><br><span class="line">        &lt;association property=&quot;items&quot; </span><br><span class="line">         javaType=&quot;items&quot;</span><br><span class="line">                     select=&quot;com.msb.mapper.ItemsMapper.selectByid&quot; </span><br><span class="line">                     column=&quot;itemid&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;select id=&quot;selectOrderDetailLazyLoad&quot; parameterType=&quot;int&quot; resultMap=&quot;OrderDetailItemLazyLoad&quot;&gt;</span><br><span class="line">            select * from orderDetail where odid=#&#123;odid&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;com.msb.mapper.ItemsMapper&quot; &gt;</span><br><span class="line">    &lt;select id=&quot;selectByid&quot; parameterType=&quot;int&quot; resultType=&quot;items&quot;&gt;</span><br><span class="line">        select * from items where iid=#&#123;iid&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h3 id="4-编写测试代码"><a href="#4-编写测试代码" class="headerlink" title="4.编写测试代码"></a>4.编写测试代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class MyBatisLazyLoad &#123;</span><br><span class="line"></span><br><span class="line">    private SqlSessionFactory factory;</span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void init() throws IOException &#123;</span><br><span class="line">        InputStream stream= Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);</span><br><span class="line">        SqlSessionFactoryBuilder builder=new SqlSessionFactoryBuilder();</span><br><span class="line">        factory=builder.build(stream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test1() throws Exception &#123;</span><br><span class="line">        SqlSession session=factory.openSession();</span><br><span class="line">        OrderDetailMapper orderDetailMapper= session.getMapper(OrderDetailMapper.class);</span><br><span class="line">        OrderDetail orderDetail=  orderDetailMapper.selectOrderDetailLazyLoad(1);</span><br><span class="line">        session.close();</span><br><span class="line">        //System.out.println(orderDetail.getOrderid());</span><br><span class="line">        //System.out.println(orderDetail.getItems().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-设置SqlMapConfig核心配置文件-观察运行结果："><a href="#5-设置SqlMapConfig核心配置文件-观察运行结果：" class="headerlink" title="5.设置SqlMapConfig核心配置文件  观察运行结果："></a>5.设置SqlMapConfig核心配置文件  观察运行结果：</h3><p>A.两个设置都为false：</p>  <setting name="lazyLoadingEnabled" value="false"/>  <setting name="aggressiveLazyLoading" value="false"/><p>===无论是 </p><p>获得对象就关闭   OrderDetail orderDetail=  orderDetailMapper.selectOrderDetailLazyLoad(1);</p><p>调用对象自己的属性  orderDetail.getOrderid()</p><p>调用对象的对象的属性  orderDetail.getItems().getName()</p><p>===两张表SQL都执行 </p><p>B.一个设置为false，一个设置为true：   </p>  <setting name="lazyLoadingEnabled" value="true"/>  <setting name="aggressiveLazyLoading" value="false"/>--消极懒加载<p>获得对象就关闭   OrderDetail orderDetail=  orderDetailMapper.selectOrderDetailLazyLoad(1);</p><p>调用对象自己的属性  orderDetail.getOrderid()</p><p>===都只执行orderDetail 订单详情表sql语句。</p><p>调用对象的对象的属性  orderDetail.getItems().getName()</p><p>===两张表SQL都执行 </p><p>C.两个设置都为true：</p>  <setting name="lazyLoadingEnabled" value="true"/>  <setting name="aggressiveLazyLoading" value="true"/> ===积极懒加载<p>获得对象就关闭   OrderDetail orderDetail=  orderDetailMapper.selectOrderDetailLazyLoad(1);</p><p>===只执行orderDetail 订单详情表sql语句。</p><p>调用对象自己的属性  orderDetail.getOrderid()</p><p>调用对象的对象的属性  orderDetail.getItems().getName()</p><p>===两张表SQL都执行 </p><h1 id="12-MyBatis查询缓存"><a href="#12-MyBatis查询缓存" class="headerlink" title="12.MyBatis查询缓存"></a>12.MyBatis查询缓存</h1><h2 id="12-1介绍缓存技术"><a href="#12-1介绍缓存技术" class="headerlink" title="12.1介绍缓存技术"></a>12.1介绍缓存技术</h2><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Cppp.png" alt="ppp"></p><h2 id="12-2介绍MyBatis缓存机制"><a href="#12-2介绍MyBatis缓存机制" class="headerlink" title="12.2介绍MyBatis缓存机制"></a>12.2介绍MyBatis缓存机制</h2><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Cqqq.png" alt="qqq"></p><h2 id="12-3MyBatis一级缓存"><a href="#12-3MyBatis一级缓存" class="headerlink" title="12.3MyBatis一级缓存"></a>12.3MyBatis一级缓存</h2><p>MyBatis默认支持一级缓存，不需要在配置文件里进行配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">例子：根据用户编号，查询用户信息：</span><br><span class="line"></span><br><span class="line">        @Test</span><br><span class="line">public void test() &#123;</span><br><span class="line"></span><br><span class="line"> SqlSession session=factory.openSession();</span><br><span class="line"> UserMapper usermapper=session.getMapper(UserMapper.class);</span><br><span class="line"> User u= usermapper.findUserByid(4);</span><br><span class="line"> System.out.println(&quot;编号为4的用户信息：&quot;+u.getUsername()+&quot;;&quot;+u.getSex()+&quot;;&quot;+u.getAddress());</span><br><span class="line"> </span><br><span class="line"> User u2= usermapper.findUserByid(4);</span><br><span class="line"> System.out.println(&quot;编号为4的用户信息：&quot;+u2.getUsername()+&quot;;&quot;+u2.getSex()+&quot;;&quot;+u2.getAddress());</span><br><span class="line"> session.close();</span><br><span class="line">&#125;</span><br><span class="line">  同一个session作用域里，第二次进行相同查询的时候，直接获得缓存数据，不再执行sql去数据库查找。</span><br><span class="line"></span><br><span class="line">  同一个session：获得session对象开始，-----》到，session.commit（）或者session，close（）或 session.flush()结束。</span><br><span class="line">                                                     </span><br></pre></td></tr></table></figure><h2 id="12-4MyBatis二级缓存"><a href="#12-4MyBatis二级缓存" class="headerlink" title="12.4MyBatis二级缓存"></a>12.4MyBatis二级缓存</h2><p>​        MyBatis的二级缓存是mapper范围级别，除了在SqlMapConfig.xml里设置二级缓存的总开关，还要在具体的mapper.xml中开启二级缓存。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">第0步：添加jar包</span><br><span class="line">mybatis-ehcache-1.0.2.jar</span><br><span class="line">ehcache-core-2.6.5.jar</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.caches&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-ehcache&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.0.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;ehcache&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.10.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第一步：在SqlMapConfig.xml中配置开始全局二级缓存：</span><br><span class="line">&lt;settings&gt;</span><br><span class="line">  &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;  </span><br><span class="line">&lt;/settings&gt;</span><br><span class="line"></span><br><span class="line">第二步：去各自的sql映射文件里，单独再开启二级缓存</span><br><span class="line">&lt;cache type=&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;/&gt;</span><br><span class="line"></span><br><span class="line">第三步：实体类实现序列化：</span><br><span class="line">public class User implements Serializable &#123;  &#125;</span><br><span class="line"></span><br><span class="line">第四步：编写测试类：</span><br></pre></td></tr></table></figure><p><img src="%E6%96%87%E6%A1%A3%E5%9B%BE%E7%89%87%5Crrr.png" alt="rrr"></p><p>补充：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">（1）禁用二级缓存：useCache=&quot;false&quot;</span><br><span class="line"></span><br><span class="line">  映射文件里开启二级缓存后，那么映射文件里所有的查询语句都使用二级缓存，如果某一个sql语句不希望使用缓存数据的话：</span><br><span class="line">    </span><br><span class="line">    表示每次查询都会发出SQL查询，默认情况是true,即该SQL使用二级缓存。</span><br><span class="line">    </span><br><span class="line">  &lt;select id=&quot;findUserByid&quot; parameterType=&quot;int&quot; resultType=&quot;user&quot; useCache=&quot;false&quot;&gt;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">（2）刷新缓存：flushCache=&quot;false&quot;</span><br><span class="line">在mapper的同一个namespace中，如果有其它insert，update,delete操作数据后需要刷新缓存，如果不执行刷新缓存会出现脏读。</span><br><span class="line">默认情况下flushCache=”true“会刷新缓存；改为false则不会刷新缓存。</span><br><span class="line"></span><br><span class="line">    &lt;update id=&quot;update&quot; parameterType=&quot;user&quot; flushCache=&quot;false&quot;&gt;---那么修改功能不进行刷新。  </span><br><span class="line">       update user set sex=#&#123;sex&#125; where uid=#&#123;uid&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">    </span><br><span class="line">代码例子如下：</span><br><span class="line">         UserMapper usermapper1=session1.getMapper(UserMapper.class);</span><br><span class="line"> User u1= usermapper1.findUserByid(5);  //持久化----缓存</span><br><span class="line"> System.out.println(&quot;第一次：编号为5的用户信息：&quot;+u1.getUsername()+&quot;;&quot;+u1.getSex()+&quot;;&quot;+u1.getAddress());</span><br><span class="line">        </span><br><span class="line"> User uu=new User();</span><br><span class="line"> uu.setSex(&quot;女&quot;);</span><br><span class="line">         uu.setUid(5);        </span><br><span class="line">         usermapper1.update(uu); </span><br><span class="line">        session1.commit();</span><br><span class="line">        session1.close();       </span><br><span class="line">         </span><br><span class="line"> UserMapper usermapper2=session2.getMapper(UserMapper.class);</span><br><span class="line"> User u2= usermapper2.findUserByid(5);</span><br><span class="line"> System.out.println(&quot;第二次：编号为5的用户信息：&quot;+u2.getUsername()+&quot;;&quot;+u2.getSex()+&quot;;&quot;+u2.getAddress());</span><br><span class="line"> session2.close();</span><br></pre></td></tr></table></figure><p>说明：</p><pre><code>在一级缓存作用域中，执行session.commit()。 即使标签内设置了flushCache=&quot;false&quot;  也仍然会刷新一级缓存。在二级缓存作用域中，执行session.commit()。 如果标签内设置了flushCache=&quot;false&quot;  则将不刷新二级缓存。</code></pre><h2 id="12-5-MyBatis整合第三方缓存框架"><a href="#12-5-MyBatis整合第三方缓存框架" class="headerlink" title="12.5 MyBatis整合第三方缓存框架"></a>12.5 MyBatis整合第三方缓存框架</h2><p>分布式缓存框架：</p><p>​        1.我们系统为了提高系统并发 和性能，一般对系统进行分布式部署（集群部署方式）</p><p>​        2.不适用分布缓存， 缓存的数据在各个服务单独存储，不方便系统开发。所以要使用分布式缓存对缓存数据进行集中管理。</p><p>​        3.ehcache,redis ,memcache缓存框架。</p><p>Ehcache：</p><p>​        1.是一种广泛使用的开源java分布式缓存。主要面向通用缓存，javaEE 和 轻量级容器。它具有内存和磁盘存储功能。</p><p>​        2.被用于大型复杂分布式web application的</p><p>**实现步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">第0步：添加jar包</span><br><span class="line">mybatis-ehcache-1.0.2.jar</span><br><span class="line">ehcache-core-2.6.5.jar</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.caches&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-ehcache&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.0.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;ehcache&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.10.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第一步：在SqlMapConfig.xml中配置开始全局二级缓存：</span><br><span class="line"> &lt;settings&gt;  </span><br><span class="line">  &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;  </span><br><span class="line">&lt;/settings&gt;</span><br><span class="line"></span><br><span class="line"> 第二步：去各自的sql映射文件里，单独再开启二级缓存</span><br><span class="line"> &lt;cache type=&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;/&gt;</span><br><span class="line"></span><br><span class="line">第三步：实体类实现序列化：</span><br><span class="line">public class User implements Serializable &#123;  &#125;</span><br><span class="line">   </span><br><span class="line">第四步：在src下放置一个配置文件：</span><br><span class="line"></span><br><span class="line">第五步：编写测试代码：</span><br><span class="line">@Test</span><br><span class="line">public void aa()&#123;</span><br><span class="line"> SqlSession session1=factory.openSession();</span><br><span class="line"> SqlSession session2=factory.openSession();</span><br><span class="line"> </span><br><span class="line"> UserMapper usermapper1=session1.getMapper(UserMapper.class);</span><br><span class="line"> User u1= usermapper1.findUserByid(5);  //持久化----缓存</span><br><span class="line"> System.out.println(u1);</span><br><span class="line">         session1.close();</span><br><span class="line"></span><br><span class="line"> UserMapper usermapper2=session2.getMapper(UserMapper.class);</span><br><span class="line"> User u2= usermapper2.findUserByid(5);</span><br><span class="line"> System.out.println(u2);</span><br><span class="line"> session2.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>this is my first time</title>
      <link href="/2022/05/13/this-is-my-first-time/"/>
      <url>/2022/05/13/this-is-my-first-time/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/13/hello-world/"/>
      <url>/2022/05/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
